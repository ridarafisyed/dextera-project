[{"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/index.js":"1","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/hocs/Layout.js":"2","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/context/User/index.js":"3","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/hocs/Theme.js":"4","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Sidebar/Sidebar.jsx":"5","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Navbars/Navbar.jsx":"6","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/context/User/reducer.js":"7","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/context/useToggle.jsx":"8","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/styles/styles.jsx":"9","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Matter/NewMatter.jsx":"10","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Matter/MatterDetail.jsx":"11","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/containers/Matters/MatterDashboard.jsx":"12","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Matter/Calendar.jsx":"13","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/containers/Matters/Matters.jsx":"14","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Matter/Filters.jsx":"15","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Matter/Cards.jsx":"16","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Matter/MatterList.jsx":"17","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Matter/MatterListLong.jsx":"18","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Matter/MatterCards.jsx":"19","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/App.js":"20","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/containers/Home.js":"21","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/utils/PrivateRoute.js":"22","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Profile/Profile.js":"23","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/containers/Auth/Activate.js":"24","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/containers/Auth/Login.js":"25","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/containers/Auth/ResetPassword.js":"26","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/containers/Auth/ResetPasswordConfirm.js":"27","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/containers/Auth/Signup.js":"28","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/containers/Dashboards/DashBoard.js":"29","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/containers/Dashboards/UserRoles/ClientDashboard.jsx":"30","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/containers/Dashboards/UserRoles/AdminDashboard.jsx":"31","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/containers/Dashboards/UserRoles/LawyerDashboard.jsx":"32","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/containers/Dashboards/UserRoles/FirmDashboard.jsx":"33","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Dashboard/ProgressBar.jsx":"34","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Dashboard/Tasks.jsx":"35","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Dashboard/Calender.jsx":"36","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Dashboard/Cards.jsx":"37","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/data/data.jsx":"38","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/store/actions/auth.js":"39","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/store/actions/types.js":"40","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/store/actions/profile.js":"41","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/store/store.js":"42","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/store/reducers/index.js":"43","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/store/reducers/auth.js":"44","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/containers/Invoice/Invoice.jsx":"45","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Invoice/InvoiceList.jsx":"46","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Invoice/Filters.jsx":"47","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Invoice/CreateInvoice.jsx":"48","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Navbars/NavbarSec.jsx":"49","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Invoice/Payment.jsx":"50","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Category/ManageCategory.jsx":"51","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Category/Category.jsx":"52","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Category/SubCategory.jsx":"53","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Category/Classification.jsx":"54","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/utils/ActionAlerts.js":"55","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/utils/ApiController.js":"56","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/User/CreateUser.jsx":"57","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Legder/Time.jsx":"58","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Legder/LedgerTImeList.jsx":"59","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Legder/LedgerActivity.jsx":"60","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Legder/LegderDashbard.jsx":"61","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Legder/LedgerCards.jsx":"62","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Legder/Fillters.jsx":"63","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Tasks/CreateTask.jsx":"64","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Tasks/ViewTasks.jsx":"65","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/api/MatterApi.js":"66","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Legder/LedgerDoc.jsx":"67","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Job/Ssearch.jsx":"68","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Job/Result.jsx":"69","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Job/JobView.jsx":"70","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Template/Templates.jsx":"71","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/User/ManageUser.jsx":"72","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/User/ManageUserGroup.jsx":"73","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/User/UserRole.jsx":"74","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Legder/TimeList.jsx":"75","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Profile/Company.jsx":"76","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Contact/Contact.jsx":"77"},{"size":214,"mtime":1638446938932,"results":"78","hashOfConfig":"79"},{"size":1442,"mtime":1639588630057,"results":"80","hashOfConfig":"79"},{"size":431,"mtime":1637560398977,"results":"81","hashOfConfig":"79"},{"size":377,"mtime":1636440502354,"results":"82","hashOfConfig":"79"},{"size":4991,"mtime":1639580389062,"results":"83","hashOfConfig":"79"},{"size":3383,"mtime":1639026692464,"results":"84","hashOfConfig":"79"},{"size":276,"mtime":1637560343515,"results":"85","hashOfConfig":"79"},{"size":449,"mtime":1638367042591,"results":"86","hashOfConfig":"79"},{"size":2168,"mtime":1639125075738,"results":"87","hashOfConfig":"79"},{"size":11968,"mtime":1639504504237,"results":"88","hashOfConfig":"79"},{"size":6086,"mtime":1639488645340,"results":"89","hashOfConfig":"79"},{"size":631,"mtime":1638446275072,"results":"90","hashOfConfig":"79"},{"size":1212,"mtime":1639494724335,"results":"91","hashOfConfig":"79"},{"size":687,"mtime":1639026628103,"results":"92","hashOfConfig":"79"},{"size":4066,"mtime":1638446047108,"results":"93","hashOfConfig":"79"},{"size":2094,"mtime":1639561652550,"results":"94","hashOfConfig":"79"},{"size":3741,"mtime":1639560606049,"results":"95","hashOfConfig":"79"},{"size":4695,"mtime":1639561610878,"results":"96","hashOfConfig":"79"},{"size":4296,"mtime":1638618151732,"results":"97","hashOfConfig":"79"},{"size":5161,"mtime":1639588620813,"results":"98","hashOfConfig":"79"},{"size":740,"mtime":1638446649748,"results":"99","hashOfConfig":"79"},{"size":463,"mtime":1636993968666,"results":"100","hashOfConfig":"79"},{"size":17552,"mtime":1639590157092,"results":"101","hashOfConfig":"79"},{"size":1154,"mtime":1638449245127,"results":"102","hashOfConfig":"79"},{"size":4621,"mtime":1638449350138,"results":"103","hashOfConfig":"79"},{"size":3104,"mtime":1638449370642,"results":"104","hashOfConfig":"79"},{"size":3386,"mtime":1638449371454,"results":"105","hashOfConfig":"79"},{"size":7122,"mtime":1638449362722,"results":"106","hashOfConfig":"79"},{"size":1269,"mtime":1638446773047,"results":"107","hashOfConfig":"79"},{"size":1338,"mtime":1638447365711,"results":"108","hashOfConfig":"79"},{"size":6005,"mtime":1638447115464,"results":"109","hashOfConfig":"79"},{"size":6006,"mtime":1638447337226,"results":"110","hashOfConfig":"79"},{"size":1660,"mtime":1639495392178,"results":"111","hashOfConfig":"79"},{"size":564,"mtime":1638444685113,"results":"112","hashOfConfig":"79"},{"size":2380,"mtime":1639495720771,"results":"113","hashOfConfig":"79"},{"size":833,"mtime":1639495704995,"results":"114","hashOfConfig":"79"},{"size":2099,"mtime":1639495768657,"results":"115","hashOfConfig":"79"},{"size":272,"mtime":1639495189671,"results":"116","hashOfConfig":"79"},{"size":6785,"mtime":1637997850711,"results":"117","hashOfConfig":"79"},{"size":1435,"mtime":1637672498618,"results":"118","hashOfConfig":"79"},{"size":2734,"mtime":1639038887437,"results":"119","hashOfConfig":"79"},{"size":400,"mtime":1638449247211,"results":"120","hashOfConfig":"79"},{"size":115,"mtime":1636871801359,"results":"121","hashOfConfig":"79"},{"size":2685,"mtime":1638449250535,"results":"122","hashOfConfig":"79"},{"size":243,"mtime":1638690803067,"results":"123","hashOfConfig":"79"},{"size":2342,"mtime":1638692842104,"results":"124","hashOfConfig":"79"},{"size":4240,"mtime":1639037130155,"results":"125","hashOfConfig":"79"},{"size":12590,"mtime":1639555247842,"results":"126","hashOfConfig":"79"},{"size":3052,"mtime":1639026719824,"results":"127","hashOfConfig":"79"},{"size":9398,"mtime":1639026458023,"results":"128","hashOfConfig":"79"},{"size":921,"mtime":1639488431925,"results":"129","hashOfConfig":"79"},{"size":4254,"mtime":1639582009607,"results":"130","hashOfConfig":"79"},{"size":3995,"mtime":1639582008079,"results":"131","hashOfConfig":"79"},{"size":4170,"mtime":1639582008987,"results":"132","hashOfConfig":"79"},{"size":999,"mtime":1639549888810,"results":"133","hashOfConfig":"79"},{"size":15,"mtime":1639033883915,"results":"134","hashOfConfig":"135"},{"size":10858,"mtime":1639584303640,"results":"136","hashOfConfig":"79"},{"size":9506,"mtime":1639551270676,"results":"137","hashOfConfig":"79"},{"size":3512,"mtime":1639588156597,"results":"138","hashOfConfig":"79"},{"size":3100,"mtime":1639558291504,"results":"139","hashOfConfig":"79"},{"size":1234,"mtime":1639588182560,"results":"140","hashOfConfig":"79"},{"size":7573,"mtime":1639545046996,"results":"141","hashOfConfig":"79"},{"size":3225,"mtime":1639115469392,"results":"142","hashOfConfig":"79"},{"size":7594,"mtime":1639544456771,"results":"143","hashOfConfig":"79"},{"size":146,"mtime":1639287010273,"results":"144","hashOfConfig":"79"},{"size":1162,"mtime":1639498013513,"results":"145","hashOfConfig":"79"},{"size":2259,"mtime":1639554943458,"results":"146","hashOfConfig":"79"},{"size":7125,"mtime":1639579524472,"results":"147","hashOfConfig":"79"},{"size":4535,"mtime":1639579500853,"results":"148","hashOfConfig":"79"},{"size":10049,"mtime":1639579586031,"results":"149","hashOfConfig":"79"},{"size":5603,"mtime":1639578250313,"results":"150","hashOfConfig":"79"},{"size":2693,"mtime":1639582619783,"results":"151","hashOfConfig":"79"},{"size":6167,"mtime":1639584223547,"results":"152","hashOfConfig":"79"},{"size":6368,"mtime":1639584224363,"results":"153","hashOfConfig":"79"},{"size":3015,"mtime":1639588233049,"results":"154","hashOfConfig":"79"},{"size":10836,"mtime":1639585474404,"results":"155","hashOfConfig":"79"},{"size":16243,"mtime":1639587431889,"results":"156","hashOfConfig":"79"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1qmi5hf",{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"165","messages":"166","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"176","messages":"177","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"191","messages":"192","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"205","messages":"206","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"219","messages":"220","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"226","messages":"227","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"236","messages":"237","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"255","messages":"256","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"260"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"263"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"266"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"269"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"272"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"275"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"281"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"284","messages":"285","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"yzhj4x",{"filePath":"286","messages":"287","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"288"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"291"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"294"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"297"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"300","messages":"301","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"302","messages":"303","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"304"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"307"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"310","messages":"311","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"312","messages":"313","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"314","messages":"315","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"316"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"319"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"322"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"325"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"328"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"331","messages":"332","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"333"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"336"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"339"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"342"},"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/index.js",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/hocs/Layout.js",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/context/User/index.js",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/hocs/Theme.js",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Sidebar/Sidebar.jsx",["343"],"/** @format */\n\nimport React from \"react\";\nimport { Button, Box, Grid, Paper } from \"@mui/material\";\n\nimport {\n  KeyboardArrowDown,\n  Task,\n  MoneyOff,\n  FileCopy,\n  Receipt,\n  HourglassBottom,\n  AssignmentTurnedIn,\n  Map,\n  AddCircle,\n  Work,\n  Person,\n} from \"@mui/icons-material\";\n\nimport { useToggle } from \"../../context/useToggle\";\n\nimport { SideBarBtn } from \"../../styles/styles\";\nimport { Link } from \"react-router-dom\";\n// import { UserContext } from '../../context/User';\n\nconst Sidebar = () => {\n  const [controlToggle, setControlToggle] = useToggle(true);\n\n  // const [state, dispatch] = useContext(UserContext);\n  return (\n    <Paper elevation={3}>\n      <Button\n        variant=\"text\"\n        fullWidth\n        endIcon={<KeyboardArrowDown />}\n        sx={{ padding: \"0.5em\", marginTop: \"0.5em\", textTransform: \"none\" }}\n        onClick={() => setControlToggle(controlToggle)}\n      >\n        Controls\n      </Button>\n      {controlToggle ? (\n        <Box>\n          <SideBarBtn variant=\"outlined\">\n            <Grid>\n              <Box component={Link} to=\"/dashboard\">\n                <Grid item>\n                  <AddCircle fontSize=\"medium\" />\n                </Grid>\n                <Grid item>DashBoard</Grid>\n              </Box>\n            </Grid>\n          </SideBarBtn>\n          <SideBarBtn variant=\"outlined\">\n            <Grid>\n              <Box component={Link} to=\"/invoices\">\n                <Grid item>\n                  <Receipt fontSize=\"medium\" />\n                </Grid>\n                <Grid item>Invoices</Grid>\n              </Box>\n            </Grid>\n          </SideBarBtn>\n          <SideBarBtn variant=\"outlined\">\n            <Grid>\n              <Box component={Link} to=\"/Profile\">\n                <Grid item>\n                  <Map fontSize=\"medium\" />\n                </Grid>\n                <Grid item>Profile</Grid>\n              </Box>\n            </Grid>\n          </SideBarBtn>\n          <SideBarBtn variant=\"outlined\">\n            <Grid>\n              <Box component={Link} to=\"/users\">\n                <Grid item>\n                  <Person fontSize=\"medium\" />\n                </Grid>\n                <Grid item>Manage User</Grid>\n              </Box>\n            </Grid>\n          </SideBarBtn>\n          <SideBarBtn variant=\"outlined\">\n            <Grid>\n              <Box component={Link} to=\"/manage-categories\">\n                <Grid item>\n                  <FileCopy fontSize=\"medium\" />\n                </Grid>\n                <Grid item>Manage Categories</Grid>\n              </Box>\n            </Grid>\n          </SideBarBtn>\n          <SideBarBtn variant=\"outlined\">\n            <Grid>\n              <Box component={Link} to=\"/ledgers\">\n                <Grid item>\n                  <MoneyOff fontSize=\"medium\" />\n                </Grid>\n                <Grid item>Ledger</Grid>\n              </Box>\n            </Grid>\n          </SideBarBtn>\n          <SideBarBtn variant=\"outlined\">\n            <Grid>\n              <Box component={Link} to=\"/create-task\">\n                <Grid item>\n                  <Task fontSize=\"medium\" />\n                </Grid>\n                <Grid item>New Task</Grid>\n              </Box>\n            </Grid>\n          </SideBarBtn>\n          <SideBarBtn variant=\"outlined\">\n            <Grid>\n              <Box component={Link} to=\"/job-search\">\n                <Grid item>\n                  <Work fontSize=\"medium\" />\n                </Grid>\n                <Grid item>Job Search</Grid>\n              </Box>\n            </Grid>\n          </SideBarBtn>\n          <SideBarBtn variant=\"outlined\">\n            <Grid>\n              <Box component={Link} to=\"/matter-dashboard\">\n                <Grid item>\n                  <AssignmentTurnedIn fontSize=\"medium\" />\n                </Grid>\n                <Grid item>Matters Dashboard</Grid>\n              </Box>\n            </Grid>\n          </SideBarBtn>\n          <SideBarBtn variant=\"outlined\">\n            <Grid>\n              <Box component={Link} to=\"/matters\">\n                <Grid item>\n                  <AssignmentTurnedIn fontSize=\"medium\" />\n                </Grid>\n                <Grid item>Matters</Grid>\n              </Box>\n            </Grid>\n          </SideBarBtn>\n          <SideBarBtn variant=\"outlined\">\n            <Grid>\n              <Box component={Link} to=\"/matter-detail\">\n                <Grid item>\n                  <AssignmentTurnedIn fontSize=\"medium\" />\n                </Grid>\n                <Grid item>Matter Detail</Grid>\n              </Box>\n            </Grid>\n          </SideBarBtn>\n          <SideBarBtn variant=\"outlined\">\n            <Grid>\n              <Box component={Link} to=\"/create-matter\">\n                <Grid item>\n                  <AssignmentTurnedIn fontSize=\"medium\" />\n                </Grid>\n                <Grid item>New Matter</Grid>\n              </Box>\n            </Grid>\n          </SideBarBtn>\n        </Box>\n      ) : null}\n    </Paper>\n  );\n};\n\nexport default Sidebar;\n","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Navbars/Navbar.jsx",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/context/User/reducer.js",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/context/useToggle.jsx",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/styles/styles.jsx",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Matter/NewMatter.jsx",["344","345"],"/** @format */\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { TextField, Box, Grid, Button, Typography } from \"@mui/material\";\nimport SaveIcon from \"@mui/icons-material/Save\";\n\nimport { LocalizationProvider, DateRangePicker, DatePicker } from \"@mui/lab\";\nimport AdapterDateFns from \"@mui/lab/AdapterDateFns\";\n\nimport { CreateMatter, CONFIG } from \"../../api/MatterApi\";\n\nimport { ActionAlerts, TotalDays, GetDate } from \"../../utils/ActionAlerts\";\n\nconst NewMatter = () => {\n  // const matter_number = Math.floor(Math.random() * 10000000);\n  const mask = \"____-__-__\";\n  const matter_number = 23568;\n  const [openDate, setOpenDate] = useState(new Date(\"2021-12-01T21:11:54\"));\n  const [whenDate, setWhenDate] = useState(new Date(\"2021-12-01T21:11:54\"));\n  const [closeDate, setCloseDate] = useState(new Date(\"2021-12-01T21:11:54\"));\n  const [totalDays, setTotalDays] = useState(0);\n  const [matterData, setMatterData] = useState({\n    contact: 0,\n    matter_name: \"\",\n    matter_type: \"\",\n    matter_source: \"\",\n    matter_status: \"\",\n    assign_to: 0,\n    assign_by: 0,\n    billing_rate: 0,\n    alerts: \"\",\n\n    jurisdiction: \"\",\n    status_limitaion: null,\n    opposing_counsel: \"\",\n    where: \"\",\n    involved: \"\",\n    witnesses: \"\",\n    narrative: \"\",\n  });\n\n  const {\n    contact,\n    matter_name,\n    matter_type,\n    matter_source,\n    matter_status,\n    assign_to,\n    assign_by,\n    billing_rate,\n    alerts,\n\n    jurisdiction,\n    status_limitaion,\n    opposing_counsel,\n    where,\n    involved,\n    witnesses,\n    narrative,\n  } = matterData;\n\n  const onChange = (e) =>\n    setMatterData({ ...matterData, [e.target.name]: e.target.value });\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    let open_date = GetDate(openDate);\n    let close_date = GetDate(closeDate);\n    let when = GetDate(whenDate);\n    let total_days = totalDays;\n    const body = JSON.stringify({\n      contact,\n      matter_name,\n      matter_type,\n      matter_source,\n      matter_status,\n      assign_to,\n      assign_by,\n      billing_rate,\n      alerts,\n      open_date,\n      close_date,\n      total_days,\n      jurisdiction,\n      status_limitaion,\n      opposing_counsel,\n      where,\n      when,\n      involved,\n      witnesses,\n      narrative,\n    });\n    axios\n      .post(`${process.env.REACT_APP_API_URL}/api/new-matter/`, body, CONFIG)\n      .then((res) => {\n        <ActionAlerts value={{ status: res.statusText, message: \"Success\" }} />;\n      })\n      .catch((err) => {\n        <ActionAlerts value={{ status: err.statusText, message: \"Failed\" }} />;\n      });\n    console.log(body);\n  };\n  useEffect(() => {\n    let days = TotalDays(openDate, closeDate);\n    setTotalDays(days);\n  }, [openDate, closeDate]);\n\n  return (\n    <Fragment>\n      <Box\n        component=\"form\"\n        Validate\n        sx={{\n          \"& .MuiTextField-root\": { m: 1 },\n        }}\n        onSubmit={(e) => onSubmit(e)}\n      >\n        <Typography component=\"h3\" variant=\"h4\">\n          Create New Matter\n        </Typography>\n        <Grid container spacing={2}>\n          <Grid item xs={8}>\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"contact\"\n              label=\"contact\"\n              type=\"number\"\n              min=\"0\"\n              value={contact}\n              onChange={(e) => onChange(e)}\n              id=\"contact\"\n              sx={{\n                width: \"97%\",\n              }}\n            />\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"matter_number\"\n              label=\"matter_number\"\n              type=\"text\"\n              value={matter_number}\n              // onChange={(e) => onChange(e)}\n              id=\"matter_number\"\n              disabled\n              sx={{\n                width: \"48%\",\n              }}\n            />\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"matter_name\"\n              label=\"matter_name\"\n              type=\"text\"\n              value={matter_name}\n              onChange={(e) => onChange(e)}\n              id=\"matter_name\"\n              sx={{\n                width: \"47%\",\n              }}\n            />\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"alerts\"\n              label=\"alerts\"\n              type=\"text\"\n              value={alerts}\n              onChange={(e) => onChange(e)}\n              id=\"alerts\"\n              autoComplete=\"alerts\"\n              sx={{\n                width: \"97%\",\n              }}\n            />\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"matter_type\"\n              label=\"matter_type\"\n              type=\"text\"\n              value={matter_type}\n              onChange={(e) => onChange(e)}\n              id=\"matter_type\"\n              sx={{\n                width: \"48%\",\n              }}\n            />\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"matter_source\"\n              label=\"matter_source\"\n              type=\"text\"\n              value={matter_source}\n              onChange={(e) => onChange(e)}\n              id=\"matter_source\"\n              sx={{\n                width: \"47%\",\n              }}\n            />\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"matter_status\"\n              label=\"matter_status\"\n              type=\"text\"\n              value={matter_status}\n              onChange={(e) => onChange(e)}\n              id=\"matter_status\"\n              sx={{\n                width: \"48%\",\n              }}\n            />\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"assign_to\"\n              label=\"assign_to\"\n              type=\"number\"\n              value={assign_to}\n              onChange={(e) => onChange(e)}\n              id=\"assign_to\"\n              sx={{\n                width: \"47%\",\n              }}\n            />\n          </Grid>\n          <Grid item xs={4}>\n            <TextField\n              size=\"small\"\n              fullWidth\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"billing_rate\"\n              label=\"billing_rate\"\n              step=\"0.01\"\n              type=\"number\"\n              value={billing_rate}\n              onChange={(e) => onChange(e)}\n              id=\"billing_rate\"\n            />\n            <LocalizationProvider dateAdapter={AdapterDateFns}>\n              <DatePicker\n                inputFormat=\"yyyy-MM-dd\"\n                mask={mask}\n                label=\"Open Date\"\n                value={openDate}\n                name=\"open\"\n                id=\"open\"\n                onChange={(e) => setOpenDate(e)}\n                renderInput={(params) => (\n                  <TextField fullWidth size=\"small\" {...params} />\n                )}\n              />\n            </LocalizationProvider>\n            <LocalizationProvider dateAdapter={AdapterDateFns}>\n              <DatePicker\n                inputFormat=\"yyyy-MM-dd\"\n                mask={mask}\n                label=\"Close Date\"\n                value={closeDate}\n                name=\"closed\"\n                id=\"closed\"\n                onChange={(e) => setCloseDate(e)}\n                renderInput={(params) => (\n                  <TextField fullWidth size=\"small\" {...params} />\n                )}\n              />\n            </LocalizationProvider>\n            <TextField\n              size=\"small\"\n              fullWidth\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"total_days\"\n              label=\"total_days\"\n              type=\"number\"\n              value={totalDays}\n              onChange={(e) => setTotalDays(TotalDays(openDate, closeDate))}\n              id=\"total_days\"\n              disabled\n            />\n          </Grid>\n\n          <Grid item xs={4}>\n            <br />\n            <Typography component=\"h5\" variant=\"h6\">\n              Legal Concerns\n            </Typography>\n            <br />\n            <TextField\n              size=\"small\"\n              fullWidth\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"jurisdiction\"\n              label=\"jurisdiction\"\n              type=\"text\"\n              value={jurisdiction}\n              onChange={(e) => onChange(e)}\n              id=\"jurisdiction\"\n            />\n            <TextField\n              size=\"small\"\n              fullWidth\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"status_limitaion\"\n              label=\"status_limitaion\"\n              type=\"text\"\n              value={status_limitaion}\n              onChange={(e) => onChange(e)}\n              id=\"status_limitaion\"\n            />\n            <TextField\n              size=\"small\"\n              fullWidth\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"opposing_counsel\"\n              label=\"opposing_counsel\"\n              type=\"text\"\n              value={opposing_counsel}\n              onChange={(e) => onChange(e)}\n              id=\"opposing_counsel\"\n            />\n          </Grid>\n          <Grid item xs={4}>\n            <Typography component=\"h5\" variant=\"h6\" sx={{ fontSize: \"1rem\" }}>\n              Event Detail\n            </Typography>\n            <TextField\n              size=\"small\"\n              fullWidth\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"where\"\n              label=\"where\"\n              type=\"text\"\n              value={where}\n              onChange={(e) => onChange(e)}\n              id=\"where\"\n            />\n            <LocalizationProvider dateAdapter={AdapterDateFns}>\n              <DatePicker\n                inputFormat=\"yyyy-MM-dd\"\n                mask={mask}\n                label=\"When\"\n                value={whenDate}\n                name=\"when\"\n                id=\"when\"\n                onChange={(e) => setWhenDate(e)}\n                renderInput={(params) => (\n                  <TextField fullWidth size=\"small\" {...params} />\n                )}\n              />\n            </LocalizationProvider>\n            <TextField\n              size=\"small\"\n              fullWidth\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"involved\"\n              label=\"Who was involved\"\n              type=\"text\"\n              value={involved}\n              onChange={(e) => onChange(e)}\n              id=\"involved\"\n            />\n            <TextField\n              size=\"small\"\n              fullWidth\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"witnesses\"\n              label=\"witnesses\"\n              type=\"text\"\n              value={witnesses}\n              onChange={(e) => onChange(e)}\n              id=\"witnesses\"\n            />\n          </Grid>\n          <Grid item xs={4}>\n            <TextField\n              size=\"small\"\n              fullWidth\n              label=\"Customer Narrative of the Event\"\n              multiline\n              type=\"text\"\n              rows={10}\n              value={narrative}\n              onChange={(e) => onChange(e)}\n              defaultValue=\"Narrative\"\n              name=\"narrative\"\n              id=\"narrative\"\n            />\n          </Grid>\n        </Grid>\n        <Button\n          variant=\"contained\"\n          type=\"submit\"\n          sx={{ float: \"right\" }}\n          endIcon={<SaveIcon />}\n        >\n          Save\n        </Button>\n      </Box>\n    </Fragment>\n  );\n};\n\nexport default NewMatter;\n","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Matter/MatterDetail.jsx",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/containers/Matters/MatterDashboard.jsx",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Matter/Calendar.jsx",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/containers/Matters/Matters.jsx",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Matter/Filters.jsx",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Matter/Cards.jsx",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Matter/MatterList.jsx",["346","347","348"],"/** @format */\n\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\nimport {\n  Paper,\n  Table,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableBody,\n  TableRow,\n  Typography,\n  FormGroup,\n  FormControlLabel,\n  Checkbox,\n  Box,\n  containerClasses,\n} from \"@mui/material\";\nimport { CONFIG } from \"../../api/MatterApi\";\nimport CircleIcon from \"@mui/icons-material/Circle\";\nimport { GetDate } from \"../../utils/ActionAlerts\";\n\nconst MatterList = () => {\n  const [tasks, setTasks] = useState([]);\n  const [status, setStatus] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n\n  const [redTask, setRedTask] = useState(false);\n  const [greenTask, setGreenTask] = useState(false);\n  const [yellowTask, setYellowTask] = useState(false);\n  const [myTask, setMyTask] = useState(true);\n\n  const FetchData = () => {\n    axios\n      .get(`${process.env.REACT_APP_API_URL}/api/tasks/`, CONFIG)\n      .then((res) => {\n        setLoading(false);\n        setStatus(res.statusText);\n        setTasks(res.data);\n      })\n      .catch((err) => {\n        setLoading(false);\n        setStatus(err.statusText);\n      });\n  };\n  useEffect(() => {\n    FetchData();\n  }, []);\n  return (\n    <Box component={Paper} p={2}>\n      <FormGroup aria-label=\"position\" row>\n        <FormControlLabel\n          control={\n            <Checkbox value={myTask} onChange={() => setMyTask(!myTask)} />\n          }\n          label=\"My Tasks\"\n        />\n        <FormControlLabel\n          control={\n            <Checkbox value={redTask} onChange={() => setRedTask(!redTask)} />\n          }\n          label=\"Red Tasks\"\n        />\n        <FormControlLabel\n          control={\n            <Checkbox\n              value={greenTask}\n              onChange={() => setGreenTask(!greenTask)}\n            />\n          }\n          label=\"Green Tasks\"\n        />\n        <FormControlLabel\n          control={\n            <Checkbox\n              value={yellowTask}\n              onChange={() => setYellowTask(!yellowTask)}\n            />\n          }\n          label=\"Yellow Tasks\"\n        />\n      </FormGroup>\n      <Typography component=\"h3\">All Matters Task's List</Typography>\n      <TableContainer>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell></TableCell>\n              <TableCell>Matter Tasks</TableCell>\n              <TableCell>Matter Name</TableCell>\n              <TableCell>Last Action</TableCell>\n              <TableCell>Next Action</TableCell>\n              <TableCell>Assign To</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {loading\n              ? null\n              : tasks?.map((data) => {\n                  return (\n                    <TableRow id={data.id}>\n                      <TableCell>\n                        <Checkbox />\n                      </TableCell>\n                      <TableCell>\n                        {data.task_nature === \"urgent\" ? (\n                          <CircleIcon color=\"error\" />\n                        ) : (\n                          <CircleIcon color=\"success\" />\n                        )}\n                      </TableCell>\n                      <TableCell>{data.matter}</TableCell>\n                      <TableCell>\n                        {data.last_action ? data.next_action : \"-\"}\n                      </TableCell>\n                      <TableCell>\n                        {data.next_action ? data.next_action : \"-\"}\n                      </TableCell>\n                      <TableCell>{data.assign_to}</TableCell>\n                    </TableRow>\n                  );\n                })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </Box>\n  );\n};\n\nexport default MatterList;\n","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Matter/MatterListLong.jsx",["349","350","351","352"],"/** @format */\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport {\n  Box,\n  Table,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TableCell,\n  Checkbox,\n  TableBody,\n} from \"@mui/material\";\nimport { LinkButton } from \"../../styles/styles\";\nimport axios from \"axios\";\nimport { CONFIG } from \"../../api/MatterApi\";\nimport CircleIcon from \"@mui/icons-material/Circle\";\nimport { GetDate } from \"../../utils/ActionAlerts\";\nimport NumberFormat from \"react-number-format\";\n\nconst MatterListLong = () => {\n  const [matters, setMatters] = useState([]);\n\n  const [status, setStatus] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n\n  const FetchData = () => {\n    axios\n      .get(`${process.env.REACT_APP_API_URL}/api/new-matter/`, CONFIG)\n      .then((res) => {\n        console.log(res.data);\n        setLoading(false);\n        setStatus(res.statusText);\n        setMatters(res.data);\n      })\n      .catch((err) => {\n        setLoading(false);\n        setStatus(err.statusText);\n      });\n  };\n  useEffect(() => {\n    FetchData();\n  }, []);\n\n  return (\n    <Fragment>\n      <TableContainer>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell></TableCell>\n              <TableCell>Matter Tasks</TableCell>\n              <TableCell>Matter Name</TableCell>\n              <TableCell>Matter Contact</TableCell>\n              <TableCell>Matter Type</TableCell>\n              <TableCell>Bill Rate</TableCell>\n              <TableCell>Last Action</TableCell>\n              <TableCell>Next Action</TableCell>\n              <TableCell>Assigned to</TableCell>\n              <TableCell>Billable</TableCell>\n              <TableCell>Open Invoice</TableCell>\n              <TableCell>Trust Account</TableCell>\n              <TableCell>Last Payment</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {loading\n              ? null\n              : matters?.map((data, index) => {\n                  return (\n                    <TableRow id={index}>\n                      <TableCell>\n                        <Checkbox />\n                      </TableCell>\n                      <TableCell>\n                        <CircleIcon color=\"error\" />\n                      </TableCell>\n                      <TableCell>{data.matter_name}</TableCell>\n                      <TableCell>{data.contact}</TableCell>\n                      <TableCell>{data.matter_type}</TableCell>\n                      <TableCell>{data.billing_rate}</TableCell>\n                      <TableCell>{data.open_date}</TableCell>\n                      <TableCell>{data.close_date}</TableCell>\n                      <TableCell>{data.assign_to}</TableCell>\n                      <TableCell>\n                        <NumberFormat\n                          value={Math.floor(Math.random() * 100)}\n                          displayType={\"text\"}\n                          thousandSeparator={true}\n                          decimalScale={2}\n                          fixedDecimalScale={true}\n                          prefix=\"$\"\n                        />\n                      </TableCell>\n                      <TableCell>\n                        <NumberFormat\n                          value={Math.floor(Math.random() * 1000)}\n                          displayType={\"text\"}\n                          thousandSeparator={true}\n                          decimalScale={2}\n                          fixedDecimalScale={true}\n                          prefix=\"$\"\n                        />\n                      </TableCell>\n                      <TableCell>\n                        {\" \"}\n                        <NumberFormat\n                          value={Math.floor(Math.random() * 1000)}\n                          displayType={\"text\"}\n                          thousandSeparator={true}\n                          decimalScale={2}\n                          fixedDecimalScale={true}\n                          prefix=\"$\"\n                        />\n                      </TableCell>\n                      <TableCell>\n                        <NumberFormat\n                          value={Math.floor(Math.random() * 1000)}\n                          displayType={\"text\"}\n                          thousandSeparator={true}\n                          decimalScale={2}\n                          fixedDecimalScale={true}\n                          prefix=\"$\"\n                        />{\" \"}\n                        - {data.close_date}\n                      </TableCell>\n                    </TableRow>\n                  );\n                })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </Fragment>\n  );\n};\n\nexport default MatterListLong;\n","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Matter/MatterCards.jsx",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/App.js",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/containers/Home.js",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/utils/PrivateRoute.js",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Profile/Profile.js",["353","354","355"],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/containers/Auth/Activate.js",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/containers/Auth/Login.js",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/containers/Auth/ResetPassword.js",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/containers/Auth/ResetPasswordConfirm.js",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/containers/Auth/Signup.js",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/containers/Dashboards/DashBoard.js",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/containers/Dashboards/UserRoles/ClientDashboard.jsx",["356","357","358"],"/** @format */\n\nimport React from \"react\";\n// import axios from 'axios';\n\nimport { connect } from \"react-redux\";\n\nimport { Paper, Grid } from \"@mui/material\";\n\nimport { useToggle } from \"../../../context/useToggle\";\n\nimport Calender from \"../../../components/Dashboard/Calender\";\nimport ProgressBar from \"../../../components/Dashboard/ProgressBar\";\n\nimport Tasks from \"../../../components/Dashboard/Tasks\";\n\nconst ClientDashboard = () => {\n  const [calendarToggle, setCalendarToggle] = useToggle(true);\n  const [tasksToggle, setTasksToggle] = useToggle(true);\n  const [progressToggle, setProgressToggle] = useToggle(true);\n\n  return (\n    <>\n      <Paper elevation={3} sx={{ minHeight: \"84vh\" }}>\n        <Grid container>\n          {calendarToggle ? (\n            <Grid item xs={4}>\n              <Calender />\n            </Grid>\n          ) : null}\n          {tasksToggle ? (\n            <Grid item mt={3} p={2} xs={8}>\n              <Tasks />\n            </Grid>\n          ) : null}\n          {progressToggle ? (\n            <Grid item xs={12}>\n              <ProgressBar />\n            </Grid>\n          ) : null}\n        </Grid>\n      </Paper>\n    </>\n  );\n};\nconst mapStateToProps = (state) => ({\n  // isAuthenticated: state.auth.isAuthenticated\n  user: state.auth.user,\n});\nexport default connect(mapStateToProps)(ClientDashboard);\n","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/containers/Dashboards/UserRoles/AdminDashboard.jsx",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/containers/Dashboards/UserRoles/LawyerDashboard.jsx",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/containers/Dashboards/UserRoles/FirmDashboard.jsx",["359","360","361","362"],"/** @format */\n\nimport React from \"react\";\n// import axios from 'axios';\n\nimport { connect } from \"react-redux\";\nimport { Paper, Grid } from \"@mui/material\";\n\nimport Calender from \"../../../components/Dashboard/Calender\";\nimport Tasks from \"../../../components/Dashboard/Tasks\";\nimport Cards from \"../../../components/Dashboard/Cards\";\n\nimport { cardData } from \"../../../data/data\";\n\nimport { useToggle } from \"../../../context/useToggle\";\n\nconst FirmDashboard = () => {\n  // const [revToggle, setRevToggle] = useToggle(true);\n  // const [empToggle, setEmpToggle] = useToggle(true);\n  const [cardsToggle, setCardsToggle] = useToggle(true);\n  // const [sidebarToggle, setSidebarToggle] = useToggle(true);\n\n  const [calendarToggle, setCalendarToggle] = useToggle(true);\n  const [tasksToggle, setTasksToggle] = useToggle(true);\n  // const [progressToggle, setProgressToggle] = useToggle(true);\n\n  return (\n    <>\n      {/*main dashboard section for display  */}\n      <Paper elevation={3} sx={{ minHeight: \"84vh\" }}>\n        <Grid container px={2}>\n          {cardsToggle ? (\n            <Grid item xs={12} mt={2}>\n              <Cards />\n            </Grid>\n          ) : null}\n          {calendarToggle ? (\n            <Grid item xs={4}>\n              <Calender />\n            </Grid>\n          ) : null}\n          {tasksToggle ? (\n            <Grid item mt={3} p={2} xs={8}>\n              <Tasks />\n            </Grid>\n          ) : null}\n        </Grid>\n      </Paper>\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  // isAuthenticated: state.auth.isAuthenticated\n  user: state.auth.user,\n});\nexport default connect(mapStateToProps)(FirmDashboard);\n","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Dashboard/ProgressBar.jsx",["363"],"import React,{useState} from 'react'\nimport { LinearProgress, Box , Grid, Typography} from '@mui/material';\n\nconst ProgressBar = () => {\n    const [progress, setProgress] = useState(69);\n    return (\n        <Box paddingLeft={3} paddingRight={3}>\n        <Grid container >\n          <Grid item xs={1}>\n            <Typography>{progress}%</Typography>\n          </Grid>\n          <Grid item xs={11}mt={2}>\n            <LinearProgress variant=\"determinate\" value = {progress} />\n          </Grid>\n          </Grid>\n        </Box>\n    )\n}\n\nexport default ProgressBar\n","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Dashboard/Tasks.jsx",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Dashboard/Calender.jsx",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Dashboard/Cards.jsx",["364"],"/** @format */\n\nimport React from \"react\";\nimport { Box, Card, CardContent, Typography, Grid } from \"@mui/material\";\nimport NumberFormat from \"react-number-format\";\n\nconst Cards = () => {\n  return (\n    <>\n      <Grid container m={2} spacing={1}>\n        <Grid item xs={4}>\n          <Card>\n            <CardContent>\n              <Typography\n                sx={{ fontSize: 14 }}\n                color=\"text.secondary\"\n                gutterBottom\n              >\n                Revenue In\n              </Typography>\n              <Typography variant=\"h3\" component=\"h4\">\n                <NumberFormat\n                  value={23345}\n                  displayType={\"text\"}\n                  thousandSeparator={true}\n                  prefix=\"$\"\n                />\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={4}>\n          <Card>\n            <CardContent>\n              <Typography\n                sx={{ fontSize: 14 }}\n                color=\"text.secondary\"\n                gutterBottom\n              >\n                Revenue out\n              </Typography>\n              <Typography variant=\"h3\" component=\"h4\">\n                <NumberFormat\n                  value={13345}\n                  displayType={\"text\"}\n                  thousandSeparator={true}\n                  prefix=\"$\"\n                />\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={4}>\n          <Card>\n            <CardContent>\n              <Typography\n                sx={{ fontSize: 14 }}\n                color=\"text.secondary\"\n                gutterBottom\n              >\n                New Matters\n              </Typography>\n              <Typography variant=\"h3\" component=\"h4\">\n                <NumberFormat\n                  value={3425}\n                  displayType={\"text\"}\n                  thousandSeparator={true}\n                />\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n    </>\n  );\n};\n\nexport default Cards;\n","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/data/data.jsx",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/store/actions/auth.js",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/store/actions/types.js",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/store/actions/profile.js",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/store/store.js",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/store/reducers/index.js",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/store/reducers/auth.js",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/containers/Invoice/Invoice.jsx",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Invoice/InvoiceList.jsx",["365","366"],"/** @format */\n\nimport React, { Fragment, useState } from \"react\";\nimport {\n  Table,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TableCell,\n  Checkbox,\n} from \"@mui/material\";\nimport Filters from \"./Filters\";\n\nconst InvoiceList = () => {\n  const [invoice, setInvoice] = useState(null);\n\n  // useEffect(() => {\n  //   const config = {\n  //     headers: {\n  //       \"Content-Type\": \"application/json\",\n  //       Accept: \"application/json\",\n  //     },\n  //   };\n  //   const res = axios.get(\n  //     `${process.env.REACT_APP_API_URL}/api/invoices`,\n  //     config,\n  //   );\n  //   setInvoice(res.data);\n  // }, []);\n\n  return (\n    <Fragment>\n      <Filters />\n      <TableContainer>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>Invoice</TableCell>\n              <TableCell>Created</TableCell>\n              <TableCell>Due</TableCell>\n              <TableCell>Tax</TableCell>\n              <TableCell>Interest</TableCell>\n              <TableCell>Discount</TableCell>\n              <TableCell>Total</TableCell>\n              <TableCell>Balance</TableCell>\n              <TableCell>Last Payment</TableCell>\n              <TableCell>Approval Date</TableCell>\n              <TableCell>Approval by</TableCell>\n              <TableCell>Created by</TableCell>\n            </TableRow>\n            {invoice?.map((invoice) => {\n              <TableRow id={invoice.id}>\n                <TableCell>\n                  <Checkbox />\n                </TableCell>\n                <TableCell>{invoice.id}</TableCell>\n                <TableCell>{invoice.created}</TableCell>\n                <TableCell>{invoice.due}</TableCell>\n                <TableCell>{invoice.tax}</TableCell>\n                <TableCell>{invoice.interest}</TableCell>\n                <TableCell>{invoice.discount}</TableCell>\n                <TableCell>{invoice.total}</TableCell>\n                <TableCell>{invoice.balance}</TableCell>\n                <TableCell>{invoice.last_payment}</TableCell>\n                <TableCell>{invoice.approvel_date}</TableCell>\n                <TableCell>{invoice.approvel.by}</TableCell>\n                <TableCell>{invoice.created_by}</TableCell>\n              </TableRow>;\n            })}\n          </TableHead>\n        </Table>\n      </TableContainer>\n    </Fragment>\n  );\n};\n\nexport default InvoiceList;\n","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Invoice/Filters.jsx",["367"],"/** @format */\n\nimport React, { Fragment } from \"react\";\nimport {\n  Box,\n  Switch,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Typography,\n  FormControlLabel,\n} from \"@mui/material\";\nimport {\n  LinkButton,\n  Search,\n  SearchIconWrapper,\n  StyledInputBase,\n} from \"../../styles/styles\";\nimport SearchIcon from \"@mui/icons-material/Search\";\n\nimport { styled } from \"@mui/material/styles\";\n\nimport { useToggle } from \"../../context/useToggle\";\n\nconst Filters = () => {\n  const [paid, setPaid] = useToggle(false);\n\n  const [age, setAge] = React.useState(\"\");\n\n  const handleChange = (event) => {\n    setAge(event.target.value);\n  };\n\n  return (\n    <Fragment>\n      <Box\n        p={3}\n        sx={{\n          \"& .MuiTextField-root\": { m: 1 },\n        }}\n      >\n        <LinkButton to=\"/create-invoice\">Create Invoice</LinkButton>\n        <LinkButton to=\"/recive-invoice\">Receive Money</LinkButton>\n        <FormControlLabel\n          label=\" Paid/ Unpaid\"\n          control={<Switch checked={paid} onChange={() => setPaid(paid)} />}\n        />\n        <Box mt={2}>\n          <Search>\n            <SearchIconWrapper>\n              <SearchIcon />\n            </SearchIconWrapper>\n            <StyledInputBase\n              placeholder=\"Search…\"\n              inputProps={{ \"aria-label\": \"search\" }}\n            />\n          </Search>\n        </Box>\n        <FormControl sx={{ width: \"8rem\", m: 2 }}>\n          <InputLabel id=\"demo-simple-select-label\">All Invoice</InputLabel>\n          <Select\n            size=\"small\"\n            labelId=\"demo-simple-select-label\"\n            id=\"demo-simple-select\"\n            value={age}\n            label=\"Age\"\n            onChange={handleChange}\n          >\n            <MenuItem value={10}>Ten</MenuItem>\n            <MenuItem value={20}>Twenty</MenuItem>\n            <MenuItem value={30}>Thirty</MenuItem>\n          </Select>\n        </FormControl>\n        <FormControl sx={{ width: \"8rem\", m: 2 }}>\n          <InputLabel id=\"demo-simple-select-label\">Bill Date</InputLabel>\n          <Select\n            size=\"small\"\n            labelId=\"demo-simple-select-label\"\n            id=\"demo-simple-select\"\n            value={age}\n            label=\"Age\"\n            onChange={handleChange}\n          >\n            <MenuItem value={10}>Ten</MenuItem>\n            <MenuItem value={20}>Twenty</MenuItem>\n            <MenuItem value={30}>Thirty</MenuItem>\n          </Select>\n        </FormControl>\n        <FormControl sx={{ width: \"8rem\", m: 2 }}>\n          <InputLabel id=\"demo-simple-select-label\">All Times</InputLabel>\n          <Select\n            size=\"small\"\n            labelId=\"demo-simple-select-label\"\n            id=\"demo-simple-select\"\n            value={age}\n            label=\"Age\"\n            onChange={handleChange}\n          >\n            <MenuItem value={10}>Ten</MenuItem>\n            <MenuItem value={20}>Twenty</MenuItem>\n            <MenuItem value={30}>Thirty</MenuItem>\n          </Select>\n        </FormControl>\n        <Typography component=\"span\" variant=\"h8\" sx={{ width: \"8rem\", m: 2 }}>\n          Status:\n        </Typography>\n\n        <FormControl sx={{ width: \"8rem\", m: 2 }}>\n          <InputLabel id=\"demo-simple-select-label\">Any </InputLabel>\n          <Select\n            size=\"small\"\n            labelId=\"demo-simple-select-label\"\n            id=\"demo-simple-select\"\n            value={age}\n            label=\"Age\"\n            onChange={handleChange}\n          >\n            <MenuItem value={10}>Ten</MenuItem>\n            <MenuItem value={20}>Twenty</MenuItem>\n            <MenuItem value={30}>Thirty</MenuItem>\n          </Select>\n        </FormControl>\n        <FormControl sx={{ width: \"8rem\", m: 2 }}>\n          <InputLabel id=\"demo-simple-select-label\">Dropd-own</InputLabel>\n          <Select\n            size=\"small\"\n            labelId=\"demo-simple-select-label\"\n            id=\"demo-simple-select\"\n            value={age}\n            label=\"Age\"\n            onChange={handleChange}\n          >\n            <MenuItem value={10}>Ten</MenuItem>\n            <MenuItem value={20}>Twenty</MenuItem>\n            <MenuItem value={30}>Thirty</MenuItem>\n          </Select>\n        </FormControl>\n      </Box>\n    </Fragment>\n  );\n};\n\nexport default Filters;\n","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Invoice/CreateInvoice.jsx",["368","369"],"/** @format */\n\nimport React, { Fragment, useState } from \"react\";\nimport {\n  Box,\n  Typography,\n  Grid,\n  TextField,\n  Table,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TableCell,\n  Checkbox,\n  FormControlLabel,\n  Switch,\n  Button,\n} from \"@mui/material\";\nimport SaveIcon from \"@mui/icons-material/Save\";\nimport { LocalizationProvider, DateRangePicker } from \"@mui/lab\";\nimport AdapterDateFns from \"@mui/lab/AdapterDateFns\";\nimport { LinkButton } from \"../../styles/styles\";\n\nimport { useToggle } from \"../../context/useToggle\";\n\nconst CreateInvoice = () => {\n  const [approvel, setApprovel] = useToggle(false);\n  const [invoiceData, setInvoiceData] = useState({\n    matter: \"\",\n    contact: \"\",\n    billable: false,\n    date_range: \"\",\n    create_date: \"\",\n    due_date: \"\",\n    template: \"\",\n    invoice_no: \"\",\n    discount: \"\",\n    submit: false,\n  });\n\n  // const {\n  //   matter,\n  //   contact,\n  //   billable,\n  //   date_range,\n  //   create_date,\n  //   due_date,\n  //   template,\n  //   invoice_no,\n  //   discount,\n  //   submit,\n  // } = invoiceData;\n  const onChange = (e) =>\n    setInvoiceData({ ...invoiceData, [e.target.name]: e.target.value });\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n  };\n  const [invoice, setInvoice] = useState(null);\n  // useEffect(() => {\n  //   const config = {\n  //     headers: {\n  //       \"Content-Type\": \"application/json\",\n  //       Accept: \"application/json\",\n  //     },\n  //   };\n  //   const res = axios.get(\n  //     `${process.env.REACT_APP_API_URL}/api/invoice`,\n  //     config,\n  //   );\n  //   setInvoice(res.data);\n  // }, []);\n\n  const [dateRange, setDateRange] = React.useState([null, null]);\n  return (\n    <Fragment>\n      <Typography component=\"h3\" variant=\"h4\">\n        Create New Invoice\n      </Typography>\n      <Box p={3}>\n        <LinkButton to=\"/invoices\" sx={{ float: \"right\" }}>\n          Invoice Dashboard\n        </LinkButton>\n      </Box>\n      <Box\n        component=\"form\"\n        Validate\n        sx={{\n          \"& .MuiTextField-root\": { m: 1, width: \"15rem\" },\n        }}\n        onSubmit={(e) => onSubmit(e)}\n      >\n        <Grid container spacing={2}>\n          <Grid item xs={12}>\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"matter\"\n              label=\"matter\"\n              type=\"text\"\n              onChange={(e) => onChange(e)}\n              id=\"matter\"\n              autoComplete=\"matter\"\n            />\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"contact\"\n              label=\"contact\"\n              type=\"text\"\n              onChange={(e) => onChange(e)}\n              id=\"contact\"\n              autoComplete=\"contact\"\n            />\n            <FormControlLabel\n              control={\n                <Checkbox\n                  name=\"billable\"\n                  value=\"billable\"\n                  onChange={(e) => onChange(e)}\n                  id=\"billable\"\n                />\n              }\n              label=\"Unbillable\"\n            />\n            <LocalizationProvider dateAdapter={AdapterDateFns}>\n              <Typography sx={{ mt: 2, mb: 1 }}> Date Range </Typography>\n              <DateRangePicker\n                calendars={1}\n                value={dateRange}\n                onChange={(newValue) => {\n                  setDateRange(newValue);\n                }}\n                renderInput={(startProps, endProps) => (\n                  <Fragment>\n                    <TextField size=\"small\" {...startProps} />\n                    <Box sx={{ mx: 2 }}> to </Box>\n                    <TextField size=\"small\" {...endProps} />\n                  </Fragment>\n                )}\n              />\n            </LocalizationProvider>\n            <TextField\n              size=\"small\"\n              id=\"create_date\"\n              label=\"create_date\"\n              type=\"date\"\n              InputLabelProps={{\n                shrink: true,\n              }}\n            />\n            <TextField\n              size=\"small\"\n              id=\"due_date\"\n              label=\"due_date\"\n              type=\"date\"\n              InputLabelProps={{\n                shrink: true,\n              }}\n            />\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"template\"\n              label=\"template\"\n              type=\"text\"\n              onChange={(e) => onChange(e)}\n              id=\"template\"\n              autoComplete=\"template\"\n            />\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"contact\"\n              label=\"contact\"\n              type=\"text\"\n              onChange={(e) => onChange(e)}\n              id=\"contact\"\n              autoComplete=\"contact\"\n            />\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"invoice_no\"\n              label=\"invoice_no\"\n              type=\"text\"\n              onChange={(e) => onChange(e)}\n              id=\"invoice_no\"\n              autoComplete=\"invoice_no\"\n            />\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"discount\"\n              label=\"discount\"\n              type=\"text\"\n              onChange={(e) => onChange(e)}\n              id=\"discount\"\n              autoComplete=\"discount\"\n            />\n            <FormControlLabel\n              label=\"Submit For Approvel\"\n              control={\n                <Switch\n                  checked={approvel}\n                  onChange={() => setApprovel(approvel)}\n                />\n              }\n            />\n          </Grid>\n          <Grid item xs={12} mt={2}>\n            <TableContainer>\n              <Table size=\"small\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell></TableCell>\n                    <TableCell>Sub-Category</TableCell>\n                    <TableCell>Description</TableCell>\n                    <TableCell>Date</TableCell>\n                    <TableCell>Hours</TableCell>\n                    <TableCell>Rate</TableCell>\n                    <TableCell>Sub</TableCell>\n                    <TableCell>Tax</TableCell>\n                    <TableCell>int</TableCell>\n                    <TableCell>Disc.</TableCell>\n                    <TableCell>Total</TableCell>\n                    <TableCell>Biller</TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell>\n                      <Checkbox />\n                    </TableCell>\n                    <TableCell></TableCell>\n                    <TableCell></TableCell>\n                    <TableCell></TableCell>\n                    <TableCell></TableCell>\n                    <TableCell></TableCell>\n                    <TableCell></TableCell>\n                    <TableCell></TableCell>\n                    <TableCell></TableCell>\n                    <TableCell></TableCell>\n                    <TableCell></TableCell>\n                    <TableCell></TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell>\n                      <Checkbox />\n                    </TableCell>\n                    <TableCell></TableCell>\n                    <TableCell></TableCell>\n                    <TableCell></TableCell>\n                    <TableCell></TableCell>\n                    <TableCell></TableCell>\n                    <TableCell></TableCell>\n                    <TableCell></TableCell>\n                    <TableCell></TableCell>\n                    <TableCell></TableCell>\n                    <TableCell></TableCell>\n                    <TableCell></TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell>\n                      <Checkbox />\n                    </TableCell>\n                    <TableCell></TableCell>\n                    <TableCell></TableCell>\n                    <TableCell></TableCell>\n                    <TableCell></TableCell>\n                    <TableCell></TableCell>\n                    <TableCell></TableCell>\n                    <TableCell></TableCell>\n                    <TableCell></TableCell>\n                    <TableCell></TableCell>\n                    <TableCell></TableCell>\n                    <TableCell></TableCell>\n                  </TableRow>\n                  {invoice?.map((invoice) => {\n                    <TableRow id={invoice.id}>\n                      <TableCell>\n                        <Checkbox />\n                      </TableCell>\n\n                      <TableCell>{invoice.sub_cat}</TableCell>\n                      <TableCell>{invoice.discription}</TableCell>\n                      <TableCell>{invoice.date}</TableCell>\n                      <TableCell>{invoice.hours}</TableCell>\n                      <TableCell>{invoice.rate}</TableCell>\n                      <TableCell>{invoice.sub}</TableCell>\n                      <TableCell>{invoice.tax}</TableCell>\n                      <TableCell>{invoice.int}</TableCell>\n                      <TableCell>{invoice.dics}</TableCell>\n                      <TableCell>{invoice.total}</TableCell>\n                      <TableCell>{invoice.biller}</TableCell>\n                    </TableRow>;\n                  })}\n                </TableHead>\n              </Table>\n            </TableContainer>\n          </Grid>\n          <Grid item mt={3}>\n            <FormControlLabel\n              control={\n                <Checkbox\n                  name=\"billable\"\n                  value=\"billable\"\n                  onChange={(e) => onChange(e)}\n                  id=\"billable\"\n                />\n              }\n              label=\"Notes\"\n            />\n            <FormControlLabel\n              control={\n                <Checkbox\n                  name=\"billable\"\n                  value=\"billable\"\n                  onChange={(e) => onChange(e)}\n                  id=\"Accept Online Payment\"\n                />\n              }\n              label=\"Unbillable\"\n            />\n            <FormControlLabel\n              control={\n                <Checkbox\n                  name=\"billable\"\n                  value=\"billable\"\n                  onChange={(e) => onChange(e)}\n                  id=\"billable\"\n                />\n              }\n              label=\"Terms & Conditions\"\n            />\n            <FormControlLabel\n              control={\n                <Checkbox\n                  name=\"billable\"\n                  value=\"billable\"\n                  onChange={(e) => onChange(e)}\n                  id=\"billable\"\n                />\n              }\n              label=\"Add interest (Compound / Simple)\"\n            />\n            <FormControlLabel\n              control={\n                <Checkbox\n                  name=\"billable\"\n                  value=\"billable\"\n                  onChange={(e) => onChange(e)}\n                  id=\"billable\"\n                />\n              }\n              label=\"Use Trust Balanace\"\n            />\n            <FormControlLabel\n              control={\n                <Checkbox\n                  name=\"billable\"\n                  value=\"billable\"\n                  onChange={(e) => onChange(e)}\n                  id=\"billable\"\n                />\n              }\n              label=\"Send Reminders Every\"\n            />\n            <TextField size=\"small\" sx={{ width: \"5rem\" }} />\n\n            <FormControlLabel\n              control={\n                <Checkbox\n                  name=\"billable\"\n                  value=\"billable\"\n                  onChange={(e) => onChange(e)}\n                  id=\"billable\"\n                />\n              }\n              label=\"Add all unpaid invoices\"\n            />\n            <FormControlLabel\n              control={\n                <Checkbox\n                  name=\"billable\"\n                  value=\"billable\"\n                  onChange={(e) => onChange(e)}\n                  id=\"billable\"\n                />\n              }\n              label=\"use Operating Balance\"\n            />\n            <br />\n            <Button\n              variant=\"contained\"\n              sx={{ float: \"right\" }}\n              endIcon={<SaveIcon />}\n            >\n              Send\n            </Button>\n          </Grid>\n        </Grid>\n      </Box>\n    </Fragment>\n  );\n};\n\nexport default CreateInvoice;\n","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Navbars/NavbarSec.jsx",["370"],"/** @format */\n/** @format */\n\nimport React, { Fragment, useState } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { logout } from \"../../store/actions/auth\";\n\n// styling imports\nimport {\n  Box,\n  Toolbar,\n  Typography,\n  IconButton,\n  Menu,\n  MenuItem,\n  Fade,\n  Divider,\n} from \"@mui/material\";\n\nimport { SecNavbar } from \"../../styles/styles\";\n\nimport {\n  Message,\n  EmailRounded,\n  CalendarToday,\n  CheckBox,\n  NotificationAdd,\n  Settings,\n} from \"@mui/icons-material/\";\n\nconst NavbarSec = () => {\n  const today = new Date();\n  const time = today.toLocaleTimeString();\n  // const [localuser, setLocalUser] = useState({\n  //   username: \"Guest\",\n  //   is_firm: true,\n  //   is_lawyer: false,\n  //   is_client: false,\n  // });\n\n  // useEffect(() => {\n  //   if (user) {\n  //     setLocalUser({\n  //       username: user.username,\n  //       is_firm: user.is_firm,\n  //       is_lawyer: user.is_lawyer,\n  //       is_client: user.is_client,\n  //     });\n  //   }\n  // }, [user]);\n  const [redirect, setRedirect] = useState(false);\n\n  const [settingAcnchorEl, setSettingAcnchorEl] = useState(null);\n\n  const openSetting = Boolean(settingAcnchorEl);\n\n  const handleClick = (event) => {\n    setSettingAcnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setSettingAcnchorEl(null);\n  };\n\n  return (\n    <Fragment>\n      <SecNavbar>\n        <Toolbar>\n          <Box component=\"div\" sx={{ flexGrow: 1 }}>\n            <Message /> <EmailRounded /> <CalendarToday /> <CheckBox />\n          </Box>\n          <NotificationAdd mr={2} />{\" \"}\n          <Typography component=\"h5\" variant=\"h6\" ml={2} mr={2}>\n            |\n          </Typography>\n          <Typography component=\"h5\" variant=\"h6\" mr={2}>\n            {time}\n          </Typography>\n          <IconButton\n            aria-label=\"more\"\n            id=\"long-button\"\n            aria-controls=\"long-menu\"\n            aria-expanded={openSetting ? \"true\" : undefined}\n            aria-haspopup=\"true\"\n            onClick={handleClick}\n            sx={{\n              color: \"white\",\n            }}\n          >\n            <Settings />\n          </IconButton>\n          <Menu\n            id=\"fade-menu\"\n            MenuListProps={{\n              \"aria-labelledby\": \"fade-button\",\n            }}\n            anchorEl={settingAcnchorEl}\n            open={openSetting}\n            onClose={handleClose}\n            TransitionComponent={Fade}\n          >\n            <MenuItem onClick={handleClose}>Setting Option1</MenuItem>\n            <MenuItem onClick={handleClose}>Setting Option2</MenuItem>\n            <Divider sx={{ my: 0.5 }} />\n            <MenuItem onClick={handleClose}>Setting Option3</MenuItem>\n          </Menu>\n        </Toolbar>\n      </SecNavbar>\n\n      {redirect ? <Redirect to=\"/\" /> : <Fragment></Fragment>}\n    </Fragment>\n  );\n};\nconst mapStateToProps = (state) => ({\n  isAuthenticated: state.auth.isAuthenticated,\n  user: state.auth.user,\n});\n\nexport default connect(mapStateToProps, { logout })(NavbarSec);\n","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Invoice/Payment.jsx",["371","372"],"/** @format */\n\nimport React, { Fragment, useState } from \"react\";\n\nimport {\n  Grid,\n  Box,\n  FormControlLabel,\n  Radio,\n  RadioGroup,\n  FormControl,\n  Checkbox,\n  Typography,\n  TextField,\n  Table,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TableBody,\n  TableCell,\n  Button,\n} from \"@mui/material\";\n\nimport { LocalizationProvider, DateRangePicker } from \"@mui/lab\";\nimport AdapterDateFns from \"@mui/lab/AdapterDateFns\";\n\nimport { useToggle } from \"../../context/useToggle\";\n\nconst PaymentPlan = () => {\n  const [paymentData, setPaymentData] = useState({\n    payment_no: \"File# - 001\",\n    due: \"2020/07/01\",\n    amount: \"$ 750.00\",\n    late_fee: \"$22.00\",\n    total_due: \"$ 775.00\",\n    payment: \"$775.00\",\n    posted: \"$2020/07/05\",\n    method: \"Check\",\n  });\n\n  return (\n    <Fragment>\n      <Grid container mt={3} mb={3}>\n        <Grid item xs={4}>\n          <Typography>Start Balance:</Typography>\n          <Typography>Start Date:</Typography>\n          <Typography>Interest Rate:</Typography>\n        </Grid>\n        <Grid item xs={4}>\n          <Typography>Payment Amout:</Typography>\n          <Typography>Payment Date:</Typography>\n          <Typography>No Payments:</Typography>\n        </Grid>\n        <Grid item xs={4}>\n          <Typography>Payment Remaining:</Typography>\n          <Typography>Last Payment:</Typography>\n          <Typography>Last Payment $:</Typography>\n        </Grid>\n      </Grid>\n      <Table size=\"small\">\n        <TableHead>\n          <TableRow>\n            <TableCell></TableCell>\n            <TableCell>Payment #</TableCell>\n            <TableCell>Due</TableCell>\n            <TableCell>Amout</TableCell>\n            <TableCell>Late Fee</TableCell>\n            <TableCell>Total Due</TableCell>\n            <TableCell>Payment</TableCell>\n            <TableCell>Posted</TableCell>\n            <TableCell>Method</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          <TableCell>\n            <Checkbox />\n          </TableCell>\n          <TableCell>{paymentData.payment_no}</TableCell>\n          <TableCell>{paymentData.due}</TableCell>\n          <TableCell>{paymentData.amount} </TableCell>\n          <TableCell>{paymentData.late_fee}</TableCell>\n          <TableCell>{paymentData.total_due}</TableCell>\n          <TableCell>{paymentData.payment}</TableCell>\n          <TableCell>{paymentData.posted}</TableCell>\n          <TableCell>{paymentData.method}</TableCell>\n        </TableBody>\n      </Table>\n      <Button\n        variant=\"contained\"\n        sx={{\n          float: \"right\",\n          borderRadius: \"0.5rem\",\n          paddingInline: \"2rem\",\n          marginTop: \"2rem\",\n        }}\n      >\n        Close\n      </Button>{\" \"}\n    </Fragment>\n  );\n};\n\nconst InvoicePayment = () => {\n  const [invoiceData, setInvoiceData] = useState({\n    invoice_no: \"i-2106-0004542\",\n    due: \"2020/07/01\",\n    tax: \"$ 15.00\",\n    interest: \"$2.35\",\n    time: \"$ 1,234.50\",\n    hard: \"$457.00\",\n    soft: \"$45.00\",\n    total: \"$ 1,753.85\",\n  });\n\n  return (\n    <Fragment>\n      <Table size=\"small\">\n        <TableHead>\n          <TableRow>\n            <TableCell></TableCell>\n            <TableCell>Invoice</TableCell>\n            <TableCell>Due</TableCell>\n            <TableCell>Tax</TableCell>\n            <TableCell>Interest</TableCell>\n            <TableCell>Time</TableCell>\n            <TableCell>Hard</TableCell>\n            <TableCell>Soft</TableCell>\n            <TableCell>Total</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          <TableCell>\n            <Checkbox />\n          </TableCell>\n          <TableCell>{invoiceData.invoice_no}</TableCell>\n          <TableCell>{invoiceData.due}</TableCell>\n          <TableCell>{invoiceData.tax} </TableCell>\n          <TableCell>{invoiceData.interest}</TableCell>\n          <TableCell>{invoiceData.time}</TableCell>\n          <TableCell>{invoiceData.hard}</TableCell>\n          <TableCell>{invoiceData.soft}</TableCell>\n          <TableCell>{invoiceData.total}</TableCell>\n        </TableBody>\n      </Table>{\" \"}\n      <Button\n        variant=\"contained\"\n        sx={{\n          float: \"right\",\n          borderRadius: \"0.5rem\",\n          paddingInline: \"2rem\",\n          marginTop: \"2rem\",\n        }}\n      >\n        Pay\n      </Button>{\" \"}\n    </Fragment>\n  );\n};\n\nconst Payment = () => {\n  const [dateRange, setDateRange] = useState([null, null]);\n  const [isPlan, setIsPlan] = useToggle(false);\n  const [invoiceData, setInvoiceData] = useState({\n    payment_type: \"\",\n    date: \"\",\n    retainer: \"\",\n    payment: \"\",\n    date_range: \"\",\n    menu: \"\",\n    bank_account: \"\",\n    payment_method: \"\",\n  });\n\n  // const {\n  //   payment_type,\n  //   date,\n  //   retainer,\n  //   payment,\n  //   date_range,\n  //   menu,\n  //   bank_account,\n  //   payment_method,\n  // } = invoiceData;\n  const onChange = (e) =>\n    setInvoiceData({ ...invoiceData, [e.target.name]: e.target.value });\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n  };\n  return (\n    <Fragment>\n      <Grid container>\n        <Grid item xs={12}>\n          <Box\n            component=\"form\"\n            Validate\n            sx={{\n              \"& .MuiTextField-root\": { m: 1, width: \"15rem\" },\n            }}\n            onSubmit={(e) => onSubmit(e)}\n          >\n            <FormControl component=\"fieldset\">\n              <RadioGroup\n                row\n                aria-label=\"payment_type\"\n                defaultValue=\"cash\"\n                name=\"payment_type\"\n                onChange={(e) => onChange(e)}\n                id=\"payment_type\"\n                autoComplete=\"payment_type\"\n              >\n                <FormControlLabel\n                  value=\"cash\"\n                  control={<Radio />}\n                  label=\"Cash\"\n                />\n                <FormControlLabel value=\"cc\" control={<Radio />} label=\"CC\" />\n                <FormControlLabel\n                  value=\"wire\"\n                  control={<Radio />}\n                  label=\"Wire\"\n                />\n                <FormControlLabel\n                  value=\"check\"\n                  control={<Radio />}\n                  label=\"Check\"\n                />\n              </RadioGroup>\n            </FormControl>\n            <TextField\n              size=\"small\"\n              id=\"date\"\n              label=\"date\"\n              type=\"date\"\n              InputLabelProps={{\n                shrink: true,\n              }}\n            />\n            <FormControlLabel\n              value=\"retainer\"\n              control={<Checkbox />}\n              label=\"Retainer\"\n            />\n            <FormControlLabel\n              value=\"payment\"\n              control={<Checkbox />}\n              label=\"Payment\"\n            />\n            <LocalizationProvider dateAdapter={AdapterDateFns}>\n              <Typography sx={{ mt: 2, mb: 1 }}> Date Range </Typography>\n              <DateRangePicker\n                calendars={1}\n                value={dateRange}\n                onChange={(newValue) => {\n                  setDateRange(newValue);\n                }}\n                renderInput={(startProps, endProps) => (\n                  <Fragment>\n                    <TextField size=\"small\" {...startProps} />\n                    <Box sx={{ mx: 2 }}> to </Box>\n                    <TextField size=\"small\" {...endProps} />\n                  </Fragment>\n                )}\n              />\n            </LocalizationProvider>\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"menu\"\n              label=\"menu\"\n              type=\"text\"\n              onChange={(e) => onChange(e)}\n              id=\"menu\"\n              autoComplete=\"menu\"\n            />\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"bank_account\"\n              label=\"bank_account\"\n              type=\"text\"\n              onChange={(e) => onChange(e)}\n              id=\"bank_account\"\n              autoComplete=\"bank_account\"\n            />\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"payment_method\"\n              label=\"payment_method\"\n              type=\"text\"\n              onChange={(e) => onChange(e)}\n              id=\"payment_method\"\n              autoComplete=\"payment_method\"\n            />\n            <FormControl component=\"fieldset\">\n              <RadioGroup\n                row\n                aria-label=\"isPlan\"\n                defaultValue={isPlan}\n                name=\"isPlan\"\n                onChange={(e) => setIsPlan(e)}\n                id=\"isPlan\"\n                autoComplete=\"isPlan\"\n              >\n                <FormControlLabel\n                  value={false}\n                  control={<Radio />}\n                  label=\"Invoice Payment\"\n                />\n                <FormControlLabel\n                  value={true}\n                  control={<Radio />}\n                  label=\"Payment Plan\"\n                />\n              </RadioGroup>\n            </FormControl>\n          </Box>\n        </Grid>\n        <Grid item xs={12}>\n          <TableContainer>\n            {isPlan ? <PaymentPlan /> : <InvoicePayment />}\n          </TableContainer>\n        </Grid>\n      </Grid>\n    </Fragment>\n  );\n};\n\nexport default Payment;\n","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Category/ManageCategory.jsx",["373"],"/** @format */\n\nimport React, { Fragment, useState } from \"react\";\n\nimport { Typography, Grid } from \"@mui/material\";\n\nimport SubCategory from \"./SubCategory\";\nimport Category from \"./Category\";\nimport Classification from \"./Classification\";\n\nconst ManageCategory = () => {\n  return (\n    <Fragment>\n      <Grid container>\n        <Grid item xs={8}>\n          <Typography component=\"h3\" variant=\"h5\">\n            Manage Category, Sub-category, Classification\n          </Typography>\n        </Grid>\n\n        <Grid item xs={12}>\n          <Grid container spacing={5} mt={1}>\n            <Grid item xs={4}>\n              <Category />\n            </Grid>\n            <Grid item xs={4}>\n              <SubCategory />\n            </Grid>\n            <Grid item xs={4}>\n              <Classification />\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n    </Fragment>\n  );\n};\n\nexport default ManageCategory;\n","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Category/Category.jsx",["374","375","376"],"/** @format */\nimport React, { Fragment, useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport {\n  Button,\n  Box,\n  List,\n  ListItem,\n  ListItemText,\n  Typography,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  TextField,\n} from \"@mui/material\";\n\nimport ClearIcon from \"@mui/icons-material/Clear\";\nimport { ActionAlerts } from \"../../utils/ActionAlerts\";\n\nimport { CONFIG } from \"../../api/MatterApi\";\n\nconst catHandler = (id) => {\n  console.log(id);\n};\n\nconst Category = () => {\n  const [category, setCategory] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const [formData, setFormData] = useState({\n    name: \"\",\n  });\n\n  const { name } = formData;\n\n  const onChange = (e) =>\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n\n  const [open, setOpen] = useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const FetchData = () => {\n    axios\n      .get(`${process.env.REACT_APP_API_URL}/api/category/`, CONFIG)\n      .then((res) => {\n        console.log(res.data);\n        setLoading(false);\n        setStatus(res.statusText);\n        setCategory(res.data);\n      })\n      .catch((err) => {\n        console.log(err);\n        setLoading(false);\n        setError(err.message);\n      });\n  };\n  useEffect(() => {\n    FetchData();\n  }, []);\n  const handleDelete = (id) => {\n    axios\n      .delete(`${process.env.REACT_APP_API_URL}/api/category/${id}/`, CONFIG)\n      .then((res) => {\n        FetchData();\n        return (\n          <ActionAlerts\n            value={{ status: res.statusText, message: \"Success\" }}\n          />\n        );\n      });\n  };\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const body = JSON.stringify({ name });\n    axios\n      .post(`${process.env.REACT_APP_API_URL}/api/category/`, body, CONFIG)\n      .then((res) => {\n        FetchData();\n        return (\n          <ActionAlerts\n            value={{ status: res.statusText, message: \"Success\" }}\n          />\n        );\n      })\n      .catch((err) => {\n        FetchData();\n        return (\n          <ActionAlerts\n            value={{ status: err.statusText, message: \"Success\" }}\n          />\n        );\n      });\n  };\n  return (\n    <Fragment>\n      <Button\n        variant=\"contained\"\n        onClick={handleClickOpen}\n        fullWidth\n        sx={{\n          borderRadius: \"0.5rem\",\n        }}\n      >\n        + New category\n      </Button>\n      <Dialog\n        component=\"form\"\n        Validate\n        onSubmit={(e) => handleSubmit(e)}\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">{\"Add New Category\"}</DialogTitle>\n        <DialogContent>\n          <TextField\n            required\n            fullWidth\n            size=\"small\"\n            margin=\"normal\"\n            variant=\"outlined\"\n            name=\"name\"\n            label=\"Category Name\"\n            type=\"text\"\n            value={name}\n            onChange={(e) => onChange(e)}\n            id=\"name\"\n            autoComplete=\"name\"\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose}>Close</Button>\n          <Button type=\"submit\" autoFocus>\n            Add\n          </Button>\n        </DialogActions>\n      </Dialog>\n      {!loading ? (\n        category.map((data) => (\n          <Box mt={1}>\n            <List>\n              <ListItem disablePadding>\n                <ListItemText>{data.name}</ListItemText>\n                <Button\n                  variant=\"contained\"\n                  value={data.id}\n                  onClick={() => handleDelete(data.id)}\n                  sx={{\n                    borderRadius: \"0.5rem\",\n                    float: \"right\",\n                  }}\n                >\n                  <ClearIcon />\n                </Button>\n              </ListItem>\n            </List>\n          </Box>\n        ))\n      ) : (\n        <Typography>Loading ...</Typography>\n      )}\n    </Fragment>\n  );\n};\n\nexport default Category;\n","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Category/SubCategory.jsx",["377","378","379","380","381"],"/** @format */\n\nimport React, { Fragment, useState, useEffect, useCallback } from \"react\";\nimport axios from \"axios\";\nimport {\n  Button,\n  Box,\n  List,\n  ListItem,\n  ListItemText,\n  Typography,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  TextField,\n} from \"@mui/material\";\n\nimport ClearIcon from \"@mui/icons-material/Clear\";\nimport { ActionAlerts } from \"../../utils/ActionAlerts\";\nimport { CONFIG } from \"../../api/MatterApi\";\n\nconst SubCategory = () => {\n  const [subCategory, setSubCategory] = useState([]);\n\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const [formData, setFormData] = useState({\n    name: \"\",\n  });\n\n  const { name } = formData;\n\n  const onChange = (e) =>\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n\n  const [open, setOpen] = useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const FetchData = () => {\n    axios\n      .get(`${process.env.REACT_APP_API_URL}/api/sub-category/`, CONFIG)\n      .then((res) => {\n        console.log(res.data);\n        setLoading(false);\n        setStatus(res.statusText);\n        setSubCategory(res.data);\n      })\n      .catch((err) => {\n        console.log(err);\n        setLoading(false);\n        setStatus(err.statusText);\n      });\n  };\n  useEffect(() => {\n    FetchData();\n  }, []);\n  const handleDelete = (id) => {\n    axios\n      .delete(\n        `${process.env.REACT_APP_API_URL}/api/sub-category/${id}/`,\n        CONFIG,\n      )\n      .then((res) => {\n        FetchData();\n        setStatus(res.statusText);\n      })\n      .catch((err) => setStatus(err.statusText));\n  };\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const body = JSON.stringify({ name });\n    axios\n      .post(`${process.env.REACT_APP_API_URL}/api/sub-category/`, body, CONFIG)\n      .then((res) => {\n        FetchData();\n      })\n      .catch((err) => {\n        FetchData();\n      });\n  };\n  return (\n    <Fragment>\n      <Button\n        variant=\"contained\"\n        onClick={handleClickOpen}\n        fullWidth\n        sx={{\n          borderRadius: \"0.5rem\",\n        }}\n      >\n        + New Sub-Category\n      </Button>\n      <Dialog\n        component=\"form\"\n        Validate\n        onSubmit={(e) => handleSubmit(e)}\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">\n          {\"Add New Sub-Category\"}\n        </DialogTitle>\n        <DialogContent>\n          <TextField\n            required\n            fullWidth\n            size=\"small\"\n            margin=\"normal\"\n            variant=\"outlined\"\n            name=\"name\"\n            label=\"Sub-Category Name\"\n            type=\"text\"\n            value={name}\n            onChange={(e) => onChange(e)}\n            id=\"name\"\n            autoComplete=\"name\"\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose}>Close</Button>\n          <Button type=\"submit\" autoFocus>\n            Add\n          </Button>\n        </DialogActions>\n      </Dialog>\n      {!loading ? (\n        subCategory.map((data) => (\n          <Box mt={1}>\n            <List>\n              <ListItem disablePadding>\n                <ListItemText>{data.name}</ListItemText>\n                <Button\n                  variant=\"contained\"\n                  value={data.id}\n                  onClick={() => handleDelete(data.id)}\n                  sx={{\n                    borderRadius: \"0.5rem\",\n                    float: \"right\",\n                  }}\n                >\n                  <ClearIcon />\n                </Button>\n              </ListItem>\n            </List>\n          </Box>\n        ))\n      ) : (\n        <Typography>Loading ...</Typography>\n      )}\n    </Fragment>\n  );\n};\n\nexport default SubCategory;\n","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Category/Classification.jsx",["382"],"/** @format */\n\nimport React, { Fragment, useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport {\n  Button,\n  Box,\n  List,\n  ListItem,\n  ListItemText,\n  Typography,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  DialogContentText,\n  TextField,\n} from \"@mui/material\";\n\nimport ClearIcon from \"@mui/icons-material/Clear\";\nimport { ActionAlerts } from \"../../utils/ActionAlerts\";\nimport { CONFIG } from \"../../api/MatterApi\";\n\nconst Classification = () => {\n  const [classification, setClassification] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [status, setStatus] = useState(\"\");\n  const [formData, setFormData] = useState({\n    name: \"\",\n  });\n\n  const { name } = formData;\n\n  const onChange = (e) =>\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n\n  const [open, setOpen] = useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const FetchData = () => {\n    axios\n      .get(`${process.env.REACT_APP_API_URL}/api/classification/`, CONFIG)\n      .then((res) => {\n        console.log(res.data);\n        setLoading(false);\n        setStatus(res.statusText);\n        setClassification(res.data);\n      })\n      .catch((err) => {\n        console.log(err);\n        setLoading(false);\n        setStatus(err.statusText);\n      });\n  };\n  useEffect(() => {\n    FetchData();\n  }, []);\n  const handleDelete = (id) => {\n    axios\n      .delete(\n        `${process.env.REACT_APP_API_URL}/api/classification/${id}/`,\n        CONFIG,\n      )\n      .then((res) => {\n        FetchData();\n        setStatus(res.statusText);\n        return <ActionAlerts value={{ status: status }} />;\n      });\n  };\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const body = JSON.stringify({ name });\n    axios\n      .post(\n        `${process.env.REACT_APP_API_URL}/api/classification/`,\n        body,\n        CONFIG,\n      )\n      .then((res) => {\n        FetchData();\n        return <ActionAlerts value={{ status: res.statusText }} />;\n      })\n      .catch((err) => {\n        FetchData();\n        return <ActionAlerts value={{ status: err.statusText }} />;\n      });\n  };\n  return (\n    <Fragment>\n      <Button\n        variant=\"contained\"\n        onClick={handleClickOpen}\n        fullWidth\n        sx={{\n          borderRadius: \"0.5rem\",\n        }}\n      >\n        + New Classification\n      </Button>\n      <Dialog\n        component=\"form\"\n        Validate\n        onSubmit={(e) => handleSubmit(e)}\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">\n          {\"Add New Classification\"}\n        </DialogTitle>\n        <DialogContent>\n          <TextField\n            required\n            fullWidth\n            size=\"small\"\n            margin=\"normal\"\n            variant=\"outlined\"\n            name=\"name\"\n            label=\"Classification Name\"\n            type=\"text\"\n            value={name}\n            onChange={(e) => onChange(e)}\n            id=\"name\"\n            autoComplete=\"name\"\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose}>Close</Button>\n          <Button type=\"submit\" autoFocus>\n            Add\n          </Button>\n        </DialogActions>\n      </Dialog>\n      {!loading ? (\n        classification.map((data) => (\n          <Box mt={1}>\n            <List>\n              <ListItem disablePadding>\n                <ListItemText>{data.name}</ListItemText>\n                <Button\n                  variant=\"contained\"\n                  value={data.id}\n                  onClick={() => handleDelete(data.id)}\n                  sx={{\n                    borderRadius: \"0.5rem\",\n                    float: \"right\",\n                  }}\n                >\n                  <ClearIcon />\n                </Button>\n              </ListItem>\n            </List>\n          </Box>\n        ))\n      ) : (\n        <Typography>Loading ...</Typography>\n      )}\n    </Fragment>\n  );\n};\n\nexport default Classification;\n","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/utils/ActionAlerts.js",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/utils/ApiController.js",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/User/CreateUser.jsx",["383"],"/** @format */\n\nimport React, { Fragment, useState } from \"react\";\nimport {\n  TextField,\n  Box,\n  Grid,\n  Switch,\n  Button,\n  Typography,\n  Divider,\n  FormControlLabel,\n} from \"@mui/material\";\nimport axios from \"axios\";\nimport { LinkButton } from \"../../styles/styles\";\n\nimport ClearIcon from \"@mui/icons-material/Clear\";\nimport { ActionAlerts } from \"../../utils/ActionAlerts\";\nimport { useToggle } from \"../../context/useToggle\";\nimport { CONFIG } from \"../../api/MatterApi\";\n\nconst CreateUser = () => {\n  const [approvel, setApprovel] = useToggle(false);\n  const [userData, setUserData] = useState({\n    f_name: \"\",\n    m_name: \"\",\n    l_name: \"\",\n    c_email: \"\",\n    rate: 0.0,\n    role: \"\",\n    time_zone: \"\",\n    group: \"\",\n    job_title: \"\",\n    bar_no: 0,\n    street: \"\",\n    suite: \"\",\n    city: \"\",\n    state: \"\",\n    zip: 0,\n    ext: 0,\n    mobile: 0,\n    home: 0,\n    work_no: 0,\n    p_email: \"\",\n    phone_ext: 0,\n  });\n\n  const {\n    f_name,\n    m_name,\n    l_name,\n    c_email,\n    rate,\n    role,\n    time_zone,\n    group,\n    job_title,\n    bar_no,\n    street,\n    suite,\n    city,\n    state,\n    zip,\n    ext,\n    mobile,\n    home,\n    work_no,\n    p_email,\n    phone_ext,\n  } = userData;\n  const onChange = (e) =>\n    setUserData({ ...userData, [e.target.name]: e.target.value });\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    const body = JSON.stringify({\n      f_name,\n      m_name,\n      l_name,\n      c_email,\n      rate,\n      role,\n      time_zone,\n      group,\n      job_title,\n      bar_no,\n      street,\n      suite,\n      city,\n      state,\n      zip,\n      ext,\n      mobile,\n      home,\n      work_no,\n      p_email,\n      phone_ext,\n    });\n    axios\n      .post(`${process.env.REACT_APP_API_URL}/api/create-member/`, body, CONFIG)\n      .then((res) => {\n        return (\n          <ActionAlerts\n            value={{ status: res.statusText, message: \"Success\" }}\n          />\n        );\n      })\n      .catch((err) => {\n        return (\n          <ActionAlerts\n            value={{ status: err.statusText, message: \"Success\" }}\n          />\n        );\n      });\n  };\n  return (\n    <Fragment>\n      <Box p={3} sx={{ float: \"right\" }}>\n        <LinkButton to=\"/users\">Manage User</LinkButton>\n        <LinkButton to=\"/user-group\">Manage Group</LinkButton>\n        <LinkButton to=\"/user-role\">Manage Role</LinkButton>\n      </Box>\n\n      <Box\n        component=\"form\"\n        Validate\n        sx={{\n          \"& .MuiTextField-root\": { m: 1, width: \"15rem\" },\n        }}\n        onSubmit={(e) => onSubmit(e)}\n      >\n        <Typography component=\"h3\" variant=\"h4\">\n          Create User\n        </Typography>\n        <Grid container spacing={2} mt={2}>\n          <Grid item xs={12}>\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"f_name\"\n              label=\"f_name\"\n              type=\"text\"\n              onChange={(e) => onChange(e)}\n              id=\"f_name\"\n              autoComplete=\"f_name\"\n            />\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"m_name\"\n              label=\"m_name\"\n              type=\"text\"\n              onChange={(e) => onChange(e)}\n              id=\"m_name\"\n              autoComplete=\"m_name\"\n            />\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"l_name\"\n              label=\"l_name\"\n              type=\"text\"\n              onChange={(e) => onChange(e)}\n              id=\"l_name\"\n              autoComplete=\"l_name\"\n            />\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"c_email\"\n              label=\"c_email\"\n              type=\"text\"\n              onChange={(e) => onChange(e)}\n              id=\"c_email\"\n              autoComplete=\"c_email\"\n            />\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"rate\"\n              label=\"rate\"\n              type=\"number\"\n              onChange={(e) => onChange(e)}\n              id=\"rate\"\n              autoComplete=\"rate\"\n            />\n            <FormControlLabel\n              label=\"Round Entries (Round [up/down] to nearnest 0.00 fraction of the hour\"\n              control={\n                <Switch\n                  checked={approvel}\n                  onChange={() => setApprovel(approvel)}\n                />\n              }\n              sx={{ width: \"35rem\" }}\n            />\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"role\"\n              label=\"role\"\n              type=\"text\"\n              onChange={(e) => onChange(e)}\n              id=\"role\"\n              autoComplete=\"role\"\n            />\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"time_zone\"\n              label=\"time_zone\"\n              type=\"text\"\n              onChange={(e) => onChange(e)}\n              id=\"time_zone\"\n              autoComplete=\"time_zone\"\n            />\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"group\"\n              label=\"group\"\n              type=\"text\"\n              onChange={(e) => onChange(e)}\n              id=\"group\"\n              autoComplete=\"group\"\n            />\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"job_title\"\n              label=\"job_title\"\n              type=\"text\"\n              onChange={(e) => onChange(e)}\n              id=\"job_title\"\n              autoComplete=\"job_title\"\n            />\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"bar_no\"\n              label=\"bar_no\"\n              type=\"number\"\n              onChange={(e) => onChange(e)}\n              id=\"bar_no\"\n              autoComplete=\"bar_no\"\n            />\n          </Grid>\n          <Grid item mt={2}>\n            <Divider textAlign=\"left\">\n              <Typography component=\"h3\" variant=\"h5\">\n                Contact Info\n              </Typography>\n            </Divider>\n            <Box>\n              <TextField\n                size=\"small\"\n                margin=\"normal\"\n                variant=\"outlined\"\n                name=\"street\"\n                label=\"street\"\n                type=\"text\"\n                onChange={(e) => onChange(e)}\n                id=\"street\"\n                autoComplete=\"street\"\n              />\n              <TextField\n                size=\"small\"\n                margin=\"normal\"\n                variant=\"outlined\"\n                name=\"suite\"\n                label=\"suite\"\n                type=\"text\"\n                onChange={(e) => onChange(e)}\n                id=\"suite\"\n                autoComplete=\"suite\"\n              />\n              <TextField\n                size=\"small\"\n                margin=\"normal\"\n                variant=\"outlined\"\n                name=\"city\"\n                label=\"city\"\n                type=\"text\"\n                onChange={(e) => onChange(e)}\n                id=\"city\"\n                autoComplete=\"city\"\n              />\n              <TextField\n                size=\"small\"\n                margin=\"normal\"\n                variant=\"outlined\"\n                name=\"state\"\n                label=\"state\"\n                type=\"text\"\n                onChange={(e) => onChange(e)}\n                id=\"state\"\n                autoComplete=\"state\"\n              />\n              <TextField\n                size=\"small\"\n                margin=\"normal\"\n                variant=\"outlined\"\n                name=\"zip\"\n                label=\"zip\"\n                type=\"number\"\n                onChange={(e) => onChange(e)}\n                id=\"zip\"\n                autoComplete=\"zip\"\n              />\n              <TextField\n                size=\"small\"\n                margin=\"normal\"\n                variant=\"outlined\"\n                name=\"ext\"\n                label=\"ext\"\n                type=\"number\"\n                onChange={(e) => onChange(e)}\n                id=\"ext\"\n                autoComplete=\"ext\"\n              />\n              <TextField\n                size=\"small\"\n                margin=\"normal\"\n                variant=\"outlined\"\n                name=\"mobile\"\n                label=\"mobile\"\n                type=\"phone\"\n                onChange={(e) => onChange(e)}\n                id=\"mobile\"\n                autoComplete=\"mobile\"\n              />\n              <Button\n                variant=\"contained\"\n                sx={{ background: \"#5cb85c\", marginTop: \"0.5rem\" }}\n              >\n                Set Password Automaticly\n              </Button>\n              <TextField\n                size=\"small\"\n                margin=\"normal\"\n                variant=\"outlined\"\n                name=\"home\"\n                label=\"home\"\n                type=\"phone\"\n                onChange={(e) => onChange(e)}\n                id=\"home\"\n                autoComplete=\"home\"\n              />\n              <TextField\n                size=\"small\"\n                margin=\"normal\"\n                variant=\"outlined\"\n                name=\"work_no\"\n                label=\"work_no\"\n                type=\"phone\"\n                onChange={(e) => onChange(e)}\n                id=\"work_no\"\n                autoComplete=\"work_no\"\n              />\n              <TextField\n                size=\"small\"\n                margin=\"normal\"\n                variant=\"outlined\"\n                name=\"p_email\"\n                label=\"p_email\"\n                type=\"email\"\n                onChange={(e) => onChange(e)}\n                id=\"p_email\"\n                autoComplete=\"p_email\"\n              />\n              <TextField\n                size=\"small\"\n                margin=\"normal\"\n                variant=\"outlined\"\n                name=\"phone_ext\"\n                label=\"phone_ext\"\n                type=\"number\"\n                onChange={(e) => onChange(e)}\n                id=\"phone_ext\"\n                autoComplete=\"phone_ext\"\n              />\n            </Box>\n          </Grid>\n          <Grid item xs={12}>\n            <Box\n              sx={{\n                \"& .MuiButton-root\": { m: 1 },\n                float: \"right\",\n              }}\n            >\n              <Button variant=\"contained\" type=\"submit\">\n                Create Member\n              </Button>\n            </Box>\n          </Grid>\n        </Grid>\n      </Box>\n    </Fragment>\n  );\n};\n\nexport default CreateUser;\n","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Legder/Time.jsx",["384"],"/** @format */\n\nimport React, { Fragment, useState } from \"react\";\nimport {\n  TextField,\n  Box,\n  Grid,\n  Switch,\n  Button,\n  Typography,\n  RadioGroup,\n  FormLabel,\n  FormControl,\n  FormControlLabel,\n  Radio,\n} from \"@mui/material\";\nimport axios from \"axios\";\nimport { CONFIG } from \"../../api/MatterApi\";\nimport AdapterDateFns from \"@mui/lab/AdapterDateFns\";\nimport SaveIcon from \"@mui/icons-material/Save\";\nimport { LocalizationProvider, TimePicker, DatePicker } from \"@mui/lab\";\nimport { useToggle } from \"../../context/useToggle\";\nimport { ActionAlerts, GetTime, GetDate } from \"../../utils/ActionAlerts\";\n\nconst Time = () => {\n  const [pickTime, setPickTime] = useState(new Date(\"2021-12-01T21:00:00\"));\n  const [pickDate, setPickDate] = useState(new Date(\"2021-12-01T21:11:54\"));\n  const [timeToggle, setTimeToggle] = useToggle(false);\n  const [billable, setBillable] = useToggle(false);\n\n  // const [bill, setBill] = useToggle(false);\n  const [timeData, setTimeData] = useState({\n    contact: 0,\n    matter_name: 0,\n    category: \"\",\n    sub_category: \"\",\n    hard: false,\n    soft: false,\n    unit: 0,\n    qty: 0,\n    rate: 0,\n    file: \"\",\n    detail: \"\",\n    bill_by: 0,\n    note: \"\",\n  });\n\n  const {\n    contact,\n    matter_name,\n    category,\n    sub_category,\n    hard,\n    soft,\n    unit,\n    qty,\n    rate,\n    file,\n    detail,\n    bill_by,\n\n    note,\n  } = timeData;\n  const onChange = (e) =>\n    setTimeData({ ...timeData, [e.target.name]: e.target.value });\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    let time = GetTime(pickTime);\n    let date = GetDate(pickDate);\n\n    const body = JSON.stringify({\n      contact,\n      matter_name,\n      category,\n      sub_category,\n      hard,\n      soft,\n      unit,\n      qty,\n      rate,\n      time,\n      date,\n      detail,\n      bill_by,\n      billable,\n      note,\n    });\n    axios\n      .post(`${process.env.REACT_APP_API_URL}/api/add-time/`, body, CONFIG)\n      .then((res) => {\n        <ActionAlerts value={{ status: res.statusText, message: \"Success\" }} />;\n      })\n      .catch((err) => {\n        <ActionAlerts value={{ status: err.statusText, message: \"Failed\" }} />;\n      });\n    console.log(body);\n  };\n  return (\n    <Fragment>\n      <Box\n        component=\"form\"\n        Validate\n        sx={{\n          \"& .MuiTextField-root\": { m: 1, width: \"15rem\" },\n        }}\n        onSubmit={(e) => onSubmit(e)}\n      >\n        <Typography component=\"h3\" variant=\"h4\">\n          Time\n        </Typography>\n        <Grid container spacing={2} mt={2}>\n          <Grid item xs={12}>\n            <Grid container p={3}>\n              <Grid item xs={6}>\n                <FormControlLabel\n                  size=\"large\"\n                  label=\"Time\"\n                  labelPlacement=\"start\"\n                  control={\n                    <Switch\n                      size=\"large\"\n                      checked={timeToggle}\n                      onChange={(e) => setTimeToggle(e)}\n                    />\n                  }\n                />\n                {timeToggle ? null : (\n                  <Box>\n                    <FormControl component=\"fieldset\">\n                      <FormLabel component=\"legend\">Expense</FormLabel>\n                      <RadioGroup\n                        row\n                        aria-label=\"expense\"\n                        defaultValue=\"\"\n                        name=\"expense\"\n                        id=\"expense\"\n                      >\n                        <FormControlLabel\n                          value=\"hard\"\n                          control={<Radio />}\n                          label=\"Hard\"\n                        />\n                        <FormControlLabel\n                          value=\"soft\"\n                          control={<Radio />}\n                          label=\"Soft\"\n                        />\n                      </RadioGroup>\n                    </FormControl>\n                  </Box>\n                )}\n              </Grid>\n              <Grid item xs={6}>\n                <TextField\n                  size=\"small\"\n                  margin=\"normal\"\n                  variant=\"outlined\"\n                  name=\"matter\"\n                  label=\"matter\"\n                  type=\"number\"\n                  onChange={(e) => onChange(e)}\n                  id=\"matter\"\n                  autoComplete=\"matter\"\n                  disabled\n                />\n                <TextField\n                  size=\"small\"\n                  margin=\"normal\"\n                  variant=\"outlined\"\n                  name=\"contact\"\n                  label=\"contact\"\n                  type=\"number\"\n                  onChange={(e) => onChange(e)}\n                  id=\"contact\"\n                  autoComplete=\"contact\"\n                  disabled\n                />\n              </Grid>\n            </Grid>\n\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"category\"\n              label=\"category\"\n              type=\"text\"\n              onChange={(e) => onChange(e)}\n              id=\"category\"\n              autoComplete=\"category\"\n            />\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"sub_category\"\n              label=\"sub_category\"\n              type=\"text\"\n              onChange={(e) => onChange(e)}\n              id=\"sub_category\"\n              autoComplete=\"sub_category\"\n            />\n            {timeToggle ? (\n              <TextField\n                size=\"small\"\n                margin=\"normal\"\n                variant=\"outlined\"\n                name=\"rate\"\n                label=\"rate\"\n                type=\"number\"\n                onChange={(e) => onChange(e)}\n                id=\"rate\"\n                autoComplete=\"rate\"\n              />\n            ) : (\n              <Fragment>\n                <TextField\n                  size=\"small\"\n                  margin=\"normal\"\n                  variant=\"outlined\"\n                  name=\"unit\"\n                  label=\"unit\"\n                  type=\"number\"\n                  onChange={(e) => onChange(e)}\n                  id=\"unit\"\n                  autoComplete=\"unit\"\n                />\n                <TextField\n                  size=\"small\"\n                  margin=\"normal\"\n                  variant=\"outlined\"\n                  name=\"qty\"\n                  label=\"Qty\"\n                  type=\"number\"\n                  onChange={(e) => onChange(e)}\n                  id=\"qty\"\n                  autoComplete=\"qty\"\n                />\n                <Box m={1}>\n                  <Typography component=\"lable\"> Receipt(s) </Typography>\n\n                  <Button variant=\"contained\" disabled>\n                    + Attach File\n                  </Button>\n                </Box>\n              </Fragment>\n            )}\n\n            <LocalizationProvider dateAdapter={AdapterDateFns}>\n              <TimePicker\n                label=\"Pick Time\"\n                name=\"picktime\"\n                id=\"picktime\"\n                value={pickTime}\n                onChange={(e) => {\n                  setPickTime(e);\n                }}\n                renderInput={(params) => <TextField size=\"small\" {...params} />}\n              />\n            </LocalizationProvider>\n            <LocalizationProvider dateAdapter={AdapterDateFns}>\n              <DatePicker\n                inputFormat=\"yyyy-MM-dd\"\n                mask=\"____-__-__\"\n                label=\"Pick Date\"\n                value={pickDate}\n                name=\"pickdate\"\n                id=\"pickdate\"\n                onChange={(e) => setPickDate(e)}\n                renderInput={(params) => <TextField size=\"small\" {...params} />}\n              />\n            </LocalizationProvider>\n\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"detail\"\n              label=\"detail\"\n              type=\"text\"\n              onChange={(e) => onChange(e)}\n              id=\"detail\"\n              autoComplete=\"detail\"\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"bill_by\"\n              label=\"bill_by\"\n              type=\"number\"\n              onChange={(e) => onChange(e)}\n              id=\"bill_by\"\n              autoComplete=\"bill_by\"\n            />\n            <FormControlLabel\n              size=\"large\"\n              label=\"Billable\"\n              labelPlacement=\"start\"\n              control={\n                <Switch\n                  size=\"large\"\n                  checked={billable}\n                  onChange={() => setBillable(billable)}\n                />\n              }\n            />\n            <br />\n            <TextField\n              fullWidth\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"note\"\n              rows={4}\n              label=\"note\"\n              type=\"text\"\n              onChange={(e) => onChange(e)}\n              id=\"note\"\n              autoComplete=\"note\"\n            />\n          </Grid>\n        </Grid>\n        <Button\n          variant=\"contained\"\n          type=\"submit\"\n          sx={{ float: \"right\" }}\n          endIcon={<SaveIcon />}\n        >\n          Save\n        </Button>\n      </Box>\n    </Fragment>\n  );\n};\n\nexport default Time;\n","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Legder/LedgerTImeList.jsx",["385","386","387","388"],"/** @format */\n\nimport React, { Fragment, useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport {\n  Table,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TableBody,\n  Typography,\n  Checkbox,\n  Box,\n  Button,\n} from \"@mui/material\";\nimport { CONFIG } from \"../../api/MatterApi\";\nimport { LinkButton } from \"../../styles/styles\";\nimport { ActionAlerts } from \"../../utils/ActionAlerts\";\nimport NumberFormat from \"react-number-format\";\n\nconst LedgerTImeList = () => {\n  const [ledgerData, setLedgerData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const FetchData = () => {\n    axios\n      .get(`${process.env.REACT_APP_API_URL}/api/add-time/`, CONFIG)\n      .then((res) => {\n        setLoading(false);\n        setStatus(res.statusText);\n        setLedgerData(res.data);\n      })\n      .catch((err) => {\n        setLoading(false);\n        setStatus(err.statusText);\n      });\n  };\n  useEffect(() => {\n    FetchData();\n  }, []);\n\n  return (\n    <Fragment>\n      <Box>\n        <Typography component=\"h4\" variant=\"h5\" mb={2}>\n          Ledgers Time list\n        </Typography>\n        <Button\n          variant=\"contained\"\n          sx={{ marginRight: \"1rem\", float: \"right\" }}\n        >\n          Print\n        </Button>\n        <Button\n          variant=\"contained\"\n          sx={{ marginRight: \"1rem\", float: \"right\" }}\n        >\n          Export\n        </Button>\n        <LinkButton to=\"/time\" sx={{ float: \"right\" }}>\n          + Add Time\n        </LinkButton>\n        <LinkButton to=\"/time-list\" sx={{ float: \"right\" }}>\n          + Time List\n        </LinkButton>\n        <TableContainer>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell></TableCell>\n                <TableCell>Cateagory</TableCell>\n                <TableCell>Sub-Category</TableCell>\n                <TableCell>Detail</TableCell>\n                <TableCell>Date</TableCell>\n                <TableCell>Qty</TableCell>\n                <TableCell>Status</TableCell>\n                <TableCell>Total</TableCell>\n                <TableCell>BillBy</TableCell>\n              </TableRow>\n            </TableHead>\n            {loading\n              ? null\n              : ledgerData?.map((data) => {\n                  return (\n                    <TableBody id={data.id}>\n                      <TableCell>\n                        <Checkbox />\n                      </TableCell>\n                      <TableCell>{data.category}</TableCell>\n                      <TableCell>{data.sub_category}</TableCell>\n                      <TableCell>{data.detail}</TableCell>\n                      <TableCell>{data.date}</TableCell>\n                      <TableCell>{data.qty}</TableCell>\n                      <TableCell>\n                        {data.billable ? \"Billable\" : \"Paid\"}\n                      </TableCell>\n                      <TableCell>\n                        <NumberFormat\n                          value={data.qty * 25}\n                          displayType={\"text\"}\n                          thousandSeparator={true}\n                          prefix=\"$\"\n                        />\n                      </TableCell>\n                      <TableCell>{data.bill_by}</TableCell>\n                    </TableBody>\n                  );\n                })}\n          </Table>\n        </TableContainer>\n      </Box>\n    </Fragment>\n  );\n};\n\nexport default LedgerTImeList;\n","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Legder/LedgerActivity.jsx",["389","390","391","392","393"],"/** @format */\n\nimport React, { Fragment, useState, useEffect } from \"react\";\nimport {\n  Table,\n  Grid,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TableBody,\n  Typography,\n  Checkbox,\n  Box,\n} from \"@mui/material\";\nimport axios from \"axios\";\nimport { CONFIG } from \"../../api/MatterApi\";\nimport { ActionAlerts } from \"../../utils/ActionAlerts\";\nimport { LinkButton } from \"../../styles/styles\";\n\nconst LedgerActivity = () => {\n  const [activityData, setActivityData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const FetchData = () => {\n    axios\n      .get(`${process.env.REACT_APP_API_URL}/api/add-time/`, CONFIG)\n      .then((res) => {\n        setLoading(false);\n        setStatus(res.statusText);\n        setActivityData(res.data);\n      })\n      .catch((err) => {\n        setLoading(false);\n        setStatus(err.statusText);\n      });\n  };\n  useEffect(() => {\n    FetchData();\n  }, []);\n  return (\n    <Fragment>\n      <Box>\n        <Typography component=\"h4\" variant=\"h5\" mb={2}>\n          Ledger Activity\n        </Typography>\n        <Box p={3}>\n          <LinkButton to=\"/ledgers\" sx={{ float: \"right\" }}>\n            Ledger Dashboard\n          </LinkButton>\n          <LinkButton to=\"/ledger-list\" sx={{ float: \"right\" }}>\n            Ledger List\n          </LinkButton>\n          <LinkButton to=\"/ledger-documents\" sx={{ float: \"right\" }}>\n            Documents\n          </LinkButton>\n        </Box>\n\n        <TableContainer>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell></TableCell>\n                <TableCell>Date</TableCell>\n                <TableCell>Files</TableCell>\n                <TableCell>Cateagory</TableCell>\n                <TableCell>Sub-Category</TableCell>\n                <TableCell>Notes</TableCell>\n                <TableCell>Source</TableCell>\n                <TableCell>User</TableCell>\n                <TableCell>In/Out</TableCell>\n              </TableRow>\n            </TableHead>\n            {loading\n              ? null\n              : activityData?.map((data) => {\n                  return (\n                    <TableBody id={data.id}>\n                      <TableCell>\n                        <Checkbox />\n                      </TableCell>\n                      <TableCell>{data.date}</TableCell>\n                      <TableCell>x</TableCell>\n                      <TableCell>{data.category}</TableCell>\n                      <TableCell>{data.sub_category}</TableCell>\n                      <TableCell>{data.note}</TableCell>\n                      <TableCell>\n                        {data.billable ? \"email\" : \"workflow\"}\n                      </TableCell>\n                      <TableCell>{data.bill_by}</TableCell>\n                      <TableCell>{data.billable ? \"In\" : \"Out\"}</TableCell>\n                    </TableBody>\n                  );\n                })}\n          </Table>\n        </TableContainer>\n      </Box>\n    </Fragment>\n  );\n};\n\nexport default LedgerActivity;\n","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Legder/LegderDashbard.jsx",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Legder/LedgerCards.jsx",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Legder/Fillters.jsx",["394","395"],"/** @format */\n\nimport React, { Fragment, useState } from \"react\";\nimport {\n  Box,\n  Switch,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Typography,\n  TextField,\n  FormControlLabel,\n} from \"@mui/material\";\n\nimport { LocalizationProvider, DateRangePicker } from \"@mui/lab\";\nimport AdapterDateFns from \"@mui/lab/AdapterDateFns\";\n\nconst Fillters = () => {\n  const [dateRange, setDateRange] = useState([null, null]);\n  const [billedby, setBilledby] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const [filter, setFilter] = useState(\"\");\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n  };\n  return (\n    <Fragment>\n      <Box\n        component=\"form\"\n        Validate\n        sx={{\n          \"& .MuiTextField-root\": { m: 1, width: \"15rem\" },\n        }}\n        onSubmit={(e) => onSubmit(e)}\n      >\n        <FormControl sx={{ width: \"8rem\", m: 2 }}>\n          <InputLabel id=\"demo-simple-select-label\">Filter By</InputLabel>\n          <Select\n            size=\"small\"\n            labelId=\"demo-simple-select-label\"\n            id=\"demo-simple-select\"\n            value={filter}\n            label=\"Filter By\"\n            onChange={(e) => setFilter(e.target.value)}\n          >\n            <MenuItem value={10}>Ten</MenuItem>\n            <MenuItem value={20}>Twenty</MenuItem>\n            <MenuItem value={30}>Thirty</MenuItem>\n          </Select>\n        </FormControl>\n        <FormControl sx={{ width: \"8rem\", m: 2 }}>\n          <InputLabel id=\"demo-simple-select-label\">Billed by</InputLabel>\n          <Select\n            size=\"small\"\n            labelId=\"demo-simple-select-label\"\n            id=\"demo-simple-select\"\n            value={billedby}\n            label=\"Billed By\"\n            onChange={(e) => setBilledby(e.target.value)}\n          >\n            <MenuItem value={10}>Ten</MenuItem>\n            <MenuItem value={20}>Twenty</MenuItem>\n            <MenuItem value={30}>Thirty</MenuItem>\n          </Select>\n        </FormControl>\n        <FormControl sx={{ width: \"8rem\", m: 2 }}>\n          <InputLabel id=\"demo-simple-select-label\">Status</InputLabel>\n          <Select\n            size=\"small\"\n            labelId=\"demo-simple-select-label\"\n            id=\"demo-simple-select\"\n            value={status}\n            label=\"Age\"\n            onChange={(e) => setStatus(e.target.value)}\n          >\n            <MenuItem value={10}>Ten</MenuItem>\n            <MenuItem value={20}>Twenty</MenuItem>\n            <MenuItem value={30}>Thirty</MenuItem>\n          </Select>\n        </FormControl>\n        <LocalizationProvider dateAdapter={AdapterDateFns}>\n          <Typography sx={{ mt: 2, mb: 1 }}> Date Range </Typography>\n          <DateRangePicker\n            calendars={1}\n            value={dateRange}\n            onChange={(newValue) => {\n              setDateRange(newValue);\n            }}\n            renderInput={(startProps, endProps) => (\n              <Fragment>\n                <TextField size=\"small\" {...startProps} />\n                <Box sx={{ mx: 2 }}> to </Box>\n                <TextField size=\"small\" {...endProps} />\n              </Fragment>\n            )}\n          />\n        </LocalizationProvider>\n      </Box>\n    </Fragment>\n  );\n};\n\nexport default Fillters;\n","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Tasks/CreateTask.jsx",["396","397","398","399","400","401"],"/** @format */\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport {\n  TextField,\n  Switch,\n  FormControl,\n  Select,\n  MenuItem,\n  InputLabel,\n  FormControlLabel,\n  Box,\n  Grid,\n  Button,\n  Typography,\n} from \"@mui/material\";\n\nimport { LocalizationProvider, DatePicker } from \"@mui/lab\";\nimport AdapterDateFns from \"@mui/lab/AdapterDateFns\";\nimport axios from \"axios\";\nimport SaveIcon from \"@mui/icons-material/Save\";\nimport { useToggle } from \"../../context/useToggle\";\nimport { CONFIG } from \"../../api/MatterApi\";\n\nimport { ActionAlerts, GetDate } from \"../../utils/ActionAlerts\";\n\nconst CreateTask = () => {\n  const [dueDate, setDueDate] = useState(new Date(\"2021-12-01T21:11:54\"));\n  const [bill, setBill] = useToggle(true);\n  const [matterData, setMatterData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [isPrivate, setIsPrivate] = useToggle(true);\n  const [file, setFile] = useState(\"\");\n  const [taskData, setTaskData] = useState({\n    matter_id: 0,\n    matter_contact: 0,\n    matter: \"\",\n    task: \"\",\n    filename: \"\",\n    assign_to: 0,\n    detail: \"\",\n  });\n\n  const {\n    matter_id,\n    matter_contact,\n    matter,\n    task,\n    filename,\n    assign_to,\n    detail,\n  } = taskData;\n\n  const onChange = (e) =>\n    setTaskData({ ...taskData, [e.target.name]: e.target.value });\n  const FetchData = () => {\n    axios\n      .get(`${process.env.REACT_APP_API_URL}/api/matter/`, CONFIG)\n      .then((res) => {\n        setLoading(false);\n        setMatterData(res.data);\n      })\n      .catch((err) => {\n        setLoading(false);\n      });\n  };\n  useEffect(() => {\n    FetchData();\n  }, []);\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    console.log(matter_id, matter_contact, matter, task);\n    let due_at = GetDate(dueDate);\n    let is_billable = bill;\n    let is_private = isPrivate;\n\n    const body = JSON.stringify({\n      matter_id,\n      matter_contact,\n      matter,\n      task,\n      file,\n      is_billable,\n      is_private,\n      due_at,\n      assign_to,\n      detail,\n    });\n    axios\n      .post(`${process.env.REACT_APP_API_URL}/api/new-task/`, body, CONFIG)\n      .then((res) => {\n        <ActionAlerts value={{ status: res.statusText, message: \"Success\" }} />;\n      })\n      .catch((err) => {\n        <ActionAlerts value={{ status: err.statusText, message: \"Failed\" }} />;\n      });\n    console.log(body);\n  };\n  return (\n    <Fragment>\n      <Box\n        component=\"form\"\n        Validate\n        sx={{\n          \"& .MuiTextField-root\": { m: 1 },\n          \"& .MuiSelect-root\": { m: 1 },\n        }}\n        onSubmit={(e) => onSubmit(e)}\n      >\n        <Typography component=\"h3\" variant=\"h4\">\n          Create New Task\n        </Typography>\n        <Grid container spacing={2} p={2}>\n          <Grid item xs={6}>\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"matter_id\"\n              label=\"matter_id\"\n              type=\"number\"\n              min=\"0\"\n              value={matter_id}\n              onChange={(e) => onChange(e)}\n              id=\"matter_id\"\n            />\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"matter\"\n              label=\"matter\"\n              type=\"text\"\n              min=\"0\"\n              value={matter}\n              onChange={(e) => onChange(e)}\n              id=\"matter\"\n            />\n            <TextField\n              fullWidth\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"task\"\n              label=\"Task\"\n              type=\"text\"\n              value={task}\n              onChange={(e) => onChange(e)}\n              id=\"task\"\n              autoComplete=\"task\"\n            />\n            <Box ml={2} mt={1}>\n              <FormControlLabel\n                fullWidth\n                size=\"large\"\n                label=\"Attach File \"\n                labelPlacement=\"start\"\n                control={\n                  <input\n                    type=\"file\"\n                    name=\"filename\"\n                    id=\"file\"\n                    onChange={(e) => onChange(e)}\n                  />\n                }\n              />\n              <TextField\n                size=\"small\"\n                margin=\"normal\"\n                variant=\"outlined\"\n                name=\"file\"\n                label=\"please chose any file\"\n                type=\"text\"\n                min=\"0\"\n                value={filename}\n                onChange={(e) => setFile(filename)}\n                id=\"file\"\n                disabled\n              />\n            </Box>\n          </Grid>\n          <Grid item xs={6}>\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"matter_contact\"\n              label=\"matter_contact\"\n              type=\"number\"\n              min=\"0\"\n              value={matter_contact}\n              onChange={(e) => onChange(e)}\n              id=\"matter_contact\"\n            />\n            <Box p={1}>\n              <FormControlLabel\n                fullWidth\n                size=\"large\"\n                label=\"Billable\"\n                labelPlacement=\"start\"\n                control={\n                  <Switch\n                    size=\"large\"\n                    checked={bill}\n                    onChange={() => setBill(bill)}\n                  />\n                }\n              />\n              <FormControlLabel\n                fullWidth\n                size=\"large\"\n                label=\"Private\"\n                labelPlacement=\"start\"\n                control={\n                  <Switch\n                    size=\"large\"\n                    checked={isPrivate}\n                    onChange={() => setIsPrivate(isPrivate)}\n                  />\n                }\n              />\n            </Box>\n            <LocalizationProvider dateAdapter={AdapterDateFns}>\n              <DatePicker\n                inputFormat=\"yyyy-MM-dd\"\n                mask=\"____-__-__\"\n                label=\"Due Date\"\n                value={dueDate}\n                name=\"dueDate\"\n                id=\"dueDate\"\n                onChange={(e) => setDueDate(e)}\n                renderInput={(params) => (\n                  <TextField fullWidth size=\"small\" {...params} />\n                )}\n              />\n            </LocalizationProvider>\n\n            <TextField\n              fullWidth\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"assign_to\"\n              label=\"Assign to\"\n              type=\"number\"\n              value={assign_to}\n              onChange={(e) => onChange(e)}\n              id=\"assign_to\"\n              autoComplete=\"assign_to\"\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <TextField\n              fullWidth\n              multiline\n              rows={5}\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"detail\"\n              label=\"Detail\"\n              type=\"text\"\n              value={detail}\n              onChange={(e) => onChange(e)}\n              id=\"detail\"\n            />\n\n            <Button\n              variant=\"contained\"\n              type=\"submit\"\n              sx={{ float: \"right\" }}\n              endIcon={<SaveIcon />}\n            >\n              Save\n            </Button>\n          </Grid>\n        </Grid>\n      </Box>\n    </Fragment>\n  );\n};\n\nexport default CreateTask;\n","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Tasks/ViewTasks.jsx",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/api/MatterApi.js",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Legder/LedgerDoc.jsx",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Job/Ssearch.jsx",["402"],"/** @format */\n\nimport React, { Fragment, useState } from \"react\";\nimport axios from \"axios\";\nimport {\n  TextField,\n  Box,\n  Grid,\n  Switch,\n  Typography,\n  FormControlLabel,\n} from \"@mui/material\";\n// import SaveIcon from \"@mui/icons-material/Save\";\n\n// import { LocalizationProvider, DateRangePicker, DatePicker } from \"@mui/lab\";\n// import AdapterDateFns from \"@mui/lab/AdapterDateFns\";\n\n// import { CreateMatter, CONFIG } from \"../../api/MatterApi\";\n\n// import { ActionAlerts, TotalDays, GetDate } from \"../../utils/ActionAlerts\";\nimport { LinkButton } from \"../../styles/styles\";\n\nconst Search = () => {\n  const [searchData, setSearchData] = useState({\n    state: \"\",\n    city: \"\",\n    practice_area: \"\",\n    law_school: \"\",\n    grad_year: 0,\n    bar_adm_year: 0,\n    longest_tenure: 0,\n    average_tenure: 0,\n    current_tenure: 0,\n    undergrad_study: \"\",\n    lamguages: \"\",\n    admitted_state: \"\",\n    relocate: false,\n  });\n\n  const {\n    state,\n    city,\n    practice_area,\n    law_school,\n    grad_year,\n    bar_adm_year,\n    longest_tenure,\n    average_tenure,\n    current_tenure,\n    undergrad_study,\n    lamguages,\n    admitted_state,\n    relocate,\n  } = searchData;\n\n  const onChange = (e) =>\n    setSearchData({ ...searchData, [e.target.name]: e.target.value });\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n  };\n\n  return (\n    <Fragment>\n      <Box\n        component=\"form\"\n        Validate\n        sx={{\n          \"& .MuiTextField-root\": { m: 1 },\n        }}\n        onSubmit={(e) => onSubmit(e)}\n      >\n        <Typography component=\"h3\" variant=\"h4\">\n          Job Search\n        </Typography>\n        <Box m={2}>\n          <LinkButton to=\"/job-result\" sx={{ float: \"right\" }}>\n            Search Result\n          </LinkButton>\n        </Box>\n        <Grid container spacing={2}>\n          <Grid item xs={4}>\n            <TextField\n              fullWidth\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"state\"\n              label=\"state\"\n              type=\"number\"\n              min=\"0\"\n              value={state}\n              onChange={(e) => onChange(e)}\n              id=\"state\"\n            />\n            <TextField\n              fullWidth\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"law_school\"\n              label=\"law_school\"\n              type=\"text\"\n              value={law_school}\n              onChange={(e) => onChange(e)}\n              id=\"law_school\"\n            />\n            <TextField\n              fullWidth\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"longest_tenure\"\n              label=\"longest_tenure\"\n              type=\"number\"\n              value={longest_tenure}\n              onChange={(e) => onChange(e)}\n              id=\"longest_tenure\"\n            />\n            <TextField\n              fullWidth\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"average_tenure\"\n              label=\"average_tenure\"\n              type=\"number\"\n              value={average_tenure}\n              onChange={(e) => onChange(e)}\n              id=\"average_tenure\"\n              autoComplete=\"average_tenure\"\n            />\n            <TextField\n              fullWidth\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"current_tenure\"\n              label=\"current_tenure\"\n              type=\"text\"\n              value={current_tenure}\n              onChange={(e) => onChange(e)}\n              id=\"current_tenure\"\n            />\n            <TextField\n              fullWidth\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"admitted_state\"\n              label=\"admitted_state\"\n              type=\"text\"\n              value={admitted_state}\n              onChange={(e) => onChange(e)}\n              id=\"admitted_state\"\n            />\n          </Grid>\n          <Grid item xs={4}>\n            <TextField\n              fullWidth\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"city\"\n              label=\"city\"\n              type=\"text\"\n              value={city}\n              onChange={(e) => onChange(e)}\n              id=\"city\"\n            />\n            <TextField\n              fullWidth\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"grad_year\"\n              label=\"grad_year\"\n              type=\"number\"\n              value={grad_year}\n              onChange={(e) => onChange(e)}\n              id=\"grad_year\"\n            />\n\n            <TextField\n              size=\"small\"\n              fullWidth\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"undergrad_study\"\n              label=\"undergrad_study\"\n              step=\"0.01\"\n              type=\"text\"\n              value={undergrad_study}\n              onChange={(e) => onChange(e)}\n              id=\"undergrad_study\"\n            />\n            <FormControlLabel\n              control={\n                <Switch\n                  name=\"relocate\"\n                  value={relocate}\n                  onChange={(e) => onChange(e)}\n                />\n              }\n              label=\"Relocate\"\n              labelPlacement=\"start\"\n            />\n          </Grid>\n          <Grid item xs={4}>\n            <TextField\n              size=\"small\"\n              fullWidth\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"practice_area\"\n              label=\"practice_area\"\n              type=\"text\"\n              value={practice_area}\n              onChange={(e) => onChange(e)}\n              id=\"practice_area\"\n              disabled\n            />\n            <TextField\n              size=\"small\"\n              fullWidth\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"bar_adm_year\"\n              label=\"bar_adm_year\"\n              type=\"number\"\n              value={bar_adm_year}\n              onChange={(e) => onChange(e)}\n              id=\"bar_adm_year\"\n              disabled\n            />\n\n            <TextField\n              size=\"small\"\n              fullWidth\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"lamguages\"\n              label=\"lamguages\"\n              type=\"text\"\n              value={lamguages}\n              onChange={(e) => onChange(e)}\n              id=\"lamguages\"\n            />\n            {/* <Button\n              variant=\"contained\"\n              type=\"submit\"\n              sx={{ float: \"right\" }}\n              endIcon={<SaveIcon />}\n            >\n              Apply\n            </Button> */}\n            <Box m={3}>\n              <LinkButton to=\"/job-result\" sx={{ float: \"right\" }}>\n                Apply\n              </LinkButton>\n            </Box>\n          </Grid>\n        </Grid>\n      </Box>\n    </Fragment>\n  );\n};\n\nexport default Search;\n","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Job/Result.jsx",["403","404"],"/** @format */\n\nimport React, { Fragment, useState } from \"react\";\nimport {\n  Table,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TableBody,\n  Typography,\n  Checkbox,\n  Box,\n} from \"@mui/material\";\n// import axios from \"axios\";\n// import { CONFIG } from \"../../api/MatterApi\";\n// import { ActionAlerts } from \"../../utils/ActionAlerts\";\nimport { LinkButton } from \"../../styles/styles\";\n\nconst Result = () => {\n  const [activityData, setActivityData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  // const [error, setError] = useState(\"\");\n  // const [status, setStatus] = useState(\"\");\n  //   const FetchData = () => {\n  //     axios\n  //       .get(`${process.env.REACT_APP_API_URL}/api/add-time/`, CONFIG)\n  //       .then((res) => {\n  //         setLoading(false);\n  //         setStatus(res.statusText);\n  //         setActivityData(res.data);\n  //       })\n  //       .catch((err) => {\n  //         setLoading(false);\n  //         setStatus(err.statusText);\n  //       });\n  //   };\n  //   useEffect(() => {\n  //     FetchData();\n  //   }, []);\n  return (\n    <Fragment>\n      <Box>\n        <Typography component=\"h4\" variant=\"h5\" mb={2}>\n          Search Result\n        </Typography>\n        <Box p={3}>\n          <LinkButton to=\"/jb-search\" sx={{ float: \"right\" }}>\n            Job search\n          </LinkButton>\n          <LinkButton to=\"/job-view\" sx={{ float: \"right\" }}>\n            Job View\n          </LinkButton>\n        </Box>\n\n        <TableContainer>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>Rate</TableCell>\n                <TableCell>Name</TableCell>\n                <TableCell>City</TableCell>\n                <TableCell>State</TableCell>\n                <TableCell>Active</TableCell>\n                <TableCell>Grage Year</TableCell>\n                <TableCell>Practice Area</TableCell>\n                <TableCell>Relocation</TableCell>\n                <TableCell>Practicing</TableCell>\n              </TableRow>\n            </TableHead>\n            {loading ? (\n              <TableBody>\n                <TableRow>\n                  <TableCell>74%</TableCell>\n                  <TableCell>Smith, John</TableCell>\n                  <TableCell>San Diego</TableCell>\n                  <TableCell>CA</TableCell>\n                  <TableCell>Yes</TableCell>\n                  <TableCell>2000</TableCell>\n                  <TableCell>Criminal</TableCell>\n                  <TableCell>No</TableCell>\n                  <TableCell>22y - 03M</TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell>72%</TableCell>\n                  <TableCell>Cassidy, Butch</TableCell>\n                  <TableCell>Los Angeles</TableCell>\n                  <TableCell>CA</TableCell>\n                  <TableCell>No</TableCell>\n                  <TableCell>2021</TableCell>\n                  <TableCell>Transctional</TableCell>\n                  <TableCell>No</TableCell>\n                  <TableCell>0y - 02M</TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell>50%</TableCell>\n                  <TableCell>Short, Mart</TableCell>\n                  <TableCell>Sacramento</TableCell>\n                  <TableCell>CA</TableCell>\n                  <TableCell>Yes</TableCell>\n                  <TableCell>2013</TableCell>\n                  <TableCell>Civil</TableCell>\n                  <TableCell>Yes</TableCell>\n                  <TableCell>06y - 11M</TableCell>\n                </TableRow>\n              </TableBody>\n            ) : (\n              activityData?.map((data) => {\n                return (\n                  <TableBody id={data.id}>\n                    <TableCell>\n                      <Checkbox />\n                    </TableCell>\n                    <TableCell>{data.date}</TableCell>\n                    <TableCell>x</TableCell>\n                    <TableCell>{data.category}</TableCell>\n                    <TableCell>{data.sub_category}</TableCell>\n                    <TableCell>{data.note}</TableCell>\n                    <TableCell>\n                      {data.billable ? \"email\" : \"workflow\"}\n                    </TableCell>\n                    <TableCell>{data.bill_by}</TableCell>\n                    <TableCell>{data.billable ? \"In\" : \"Out\"}</TableCell>\n                  </TableBody>\n                );\n              })\n            )}\n          </Table>\n        </TableContainer>\n      </Box>\n    </Fragment>\n  );\n};\n\nexport default Result;\n","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Job/JobView.jsx",["405","406","407","408","409","410"],"/** @format */\n\nimport React, { Fragment, useState } from \"react\";\n\nimport {\n  TextField,\n  Box,\n  Grid,\n  Switch,\n  Button,\n  Typography,\n  FormControlLabel,\n  FormGroup,\n  Checkbox,\n} from \"@mui/material\";\nimport SaveIcon from \"@mui/icons-material/Save\";\n\nimport { LocalizationProvider, TimePicker, DatePicker } from \"@mui/lab\";\nimport AdapterDateFns from \"@mui/lab/AdapterDateFns\";\n\nimport { LinkButton } from \"../../styles/styles\";\n\nconst JobView = () => {\n  const [pickTime, setPickTime] = useState(new Date(\"2021-12-01T21:00:00\"));\n  const [pickDate, setPickDate] = useState(new Date(\"2021-12-01T21:11:54\"));\n  const [jobData, setJobData] = useState({\n    name: \"\",\n    state: \"\",\n    city: \"\",\n    email: \"\",\n    mobile: 0,\n    home: \"\",\n    law_school: \"\",\n    grad_year: 0,\n    bar_adm_year: 0,\n    practice_area: \"\",\n    mail_add: \"\",\n    relocate: false,\n    date: \"\",\n    time: \"\",\n    link: \"\",\n    notes: \"\",\n    file: \"\",\n  });\n\n  const {\n    name,\n    state,\n    city,\n    email,\n    mobile,\n    home,\n    law_school,\n    grad_year,\n    bar_adm_year,\n    practice_area,\n    mail_add,\n    relocate,\n    date,\n    time,\n    link,\n    notes,\n    file,\n  } = jobData;\n\n  const onChange = (e) =>\n    setJobData({ ...jobData, [e.target.name]: e.target.value });\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n  };\n\n  return (\n    <Fragment>\n      <Box\n        component=\"form\"\n        Validate\n        sx={{\n          \"& .MuiTextField-root\": { m: 1 },\n        }}\n        onSubmit={(e) => onSubmit(e)}\n      >\n        <Typography component=\"h3\" variant=\"h4\">\n          Job View\n        </Typography>\n        <Box p={3}>\n          <LinkButton to=\"/jb-search\" sx={{ float: \"right\" }}>\n            Job search\n          </LinkButton>\n          <LinkButton to=\"/job-view\" sx={{ float: \"right\" }}>\n            Job Result\n          </LinkButton>\n        </Box>\n        <Grid container spacing={2}>\n          <Grid item xs={12}>\n            <FormGroup aria-label=\"position\" row>\n              <FormControlLabel\n                control={<Checkbox />}\n                label=\"Save\"\n                labelPlacement=\"start\"\n              />\n              <FormControlLabel\n                control={<Checkbox />}\n                label=\"Contacted\"\n                labelPlacement=\"start\"\n              />\n              <Typography component=\"label\" m={1}>\n                Interested :\n              </Typography>\n              <FormControlLabel\n                control={<Checkbox />}\n                label=\"Yes\"\n                labelPlacement=\"start\"\n              />\n              <FormControlLabel\n                control={<Checkbox />}\n                label=\"No\"\n                labelPlacement=\"start\"\n              />\n              <FormControlLabel\n                control={<Checkbox />}\n                label=\"Interviewed\"\n                labelPlacement=\"start\"\n              />\n              <FormControlLabel\n                control={<Checkbox />}\n                label=\"Accept\"\n                labelPlacement=\"start\"\n              />\n              <FormControlLabel\n                control={<Checkbox />}\n                label=\"Reject\"\n                labelPlacement=\"start\"\n              />\n              <Box ml={3}>\n                <Typography component=\"h4\" variant=\"h5\">\n                  Overall Score: 74%\n                </Typography>\n              </Box>\n            </FormGroup>\n          </Grid>\n          <Grid item xs={4}>\n            <TextField\n              fullWidth\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"name\"\n              label=\"name\"\n              type=\"text\"\n              value={name}\n              onChange={(e) => onChange(e)}\n              id=\"name\"\n            />\n            <TextField\n              fullWidth\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"city\"\n              label=\"city\"\n              type=\"text\"\n              value={city}\n              onChange={(e) => onChange(e)}\n              id=\"city\"\n            />\n            <TextField\n              fullWidth\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"state\"\n              label=\"state\"\n              type=\"text\"\n              value={state}\n              onChange={(e) => onChange(e)}\n              id=\"state\"\n            />\n            <TextField\n              fullWidth\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"email\"\n              label=\"email\"\n              type=\"email\"\n              value={email}\n              onChange={(e) => onChange(e)}\n              id=\"email\"\n            />\n          </Grid>\n          <Grid item xs={4}>\n            <TextField\n              fullWidth\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"mobile\"\n              label=\"mobile\"\n              type=\"phone\"\n              value={mobile}\n              onChange={(e) => onChange(e)}\n              id=\"mobile\"\n            />\n            <TextField\n              fullWidth\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"home\"\n              label=\"home\"\n              type=\"phone\"\n              value={home}\n              onChange={(e) => onChange(e)}\n              id=\"home\"\n            />\n            <TextField\n              fullWidth\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"law_school\"\n              label=\"law_school\"\n              type=\"text\"\n              value={law_school}\n              onChange={(e) => onChange(e)}\n              id=\"law_school\"\n            />\n\n            <TextField\n              fullWidth\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"grad_year\"\n              label=\"grad_year\"\n              type=\"number\"\n              value={grad_year}\n              onChange={(e) => onChange(e)}\n              id=\"grad_year\"\n              autoComplete=\"grad_year\"\n            />\n          </Grid>\n          <Grid item xs={4}>\n            <TextField\n              size=\"small\"\n              fullWidth\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"bar_adm_year\"\n              label=\"bar_adm_year\"\n              type=\"number\"\n              value={bar_adm_year}\n              onChange={(e) => onChange(e)}\n              id=\"bar_adm_year\"\n            />\n            <TextField\n              size=\"small\"\n              fullWidth\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"mail_add\"\n              label=\"mail_add\"\n              type=\"text\"\n              value={mail_add}\n              onChange={(e) => onChange(e)}\n              id=\"mail_add\"\n            />\n            <FormControlLabel\n              control={\n                <Switch\n                  name=\"relocate\"\n                  value={relocate}\n                  onChange={(e) => onChange(e)}\n                />\n              }\n              label=\"Relocate\"\n              labelPlacement=\"start\"\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <Grid container spacing={2}>\n              <Grid item xs={4}>\n                <Box m={1}>\n                  <Typography component=\"lable\"> Writing Sample </Typography>\n\n                  <Button variant=\"contained\" disabled>\n                    + Attach File\n                  </Button>\n                </Box>\n                <LocalizationProvider dateAdapter={AdapterDateFns}>\n                  <TimePicker\n                    label=\"Pick Time\"\n                    name=\"picktime\"\n                    id=\"picktime\"\n                    value={pickTime}\n                    onChange={(e) => {\n                      setPickTime(e);\n                    }}\n                    renderInput={(params) => (\n                      <TextField size=\"small\" fullWidth {...params} />\n                    )}\n                  />\n                </LocalizationProvider>\n                <LocalizationProvider dateAdapter={AdapterDateFns}>\n                  <DatePicker\n                    inputFormat=\"yyyy-MM-dd\"\n                    mask=\"____-__-__\"\n                    label=\"Pick Date\"\n                    value={pickDate}\n                    name=\"pickdate\"\n                    id=\"pickdate\"\n                    onChange={(e) => setPickDate(e)}\n                    renderInput={(params) => (\n                      <TextField size=\"small\" fullWidth {...params} />\n                    )}\n                  />\n                </LocalizationProvider>\n\n                <TextField\n                  size=\"small\"\n                  fullWidth\n                  margin=\"normal\"\n                  variant=\"outlined\"\n                  name=\"link\"\n                  type=\"link\"\n                  defaultValue=\"2021-12-01\"\n                  value={link}\n                  onChange={(e) => onChange(e)}\n                  id=\"link\"\n                />\n              </Grid>\n              <Grid item xs={8}>\n                <TextField\n                  fullWidth\n                  multiline\n                  rows={8}\n                  size=\"small\"\n                  margin=\"normal\"\n                  variant=\"outlined\"\n                  name=\"notes\"\n                  type=\"text\"\n                  value=\"Notes ...\"\n                  id=\"notes\"\n                />\n              </Grid>\n            </Grid>\n            {/* <Button\n              variant=\"contained\"\n              type=\"submit\"\n              sx={{ float: \"right\" }}\n              endIcon={<SaveIcon />}\n            >\n              Apply\n            </Button> */}\n            <Box m={3} sx={{ float: \"right\" }}>\n              <LinkButton to=\"/job-result\">Apply</LinkButton>\n            </Box>\n          </Grid>\n        </Grid>\n      </Box>\n    </Fragment>\n  );\n};\n\nexport default JobView;\n","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Template/Templates.jsx",["411"],"/** @format */\n\nimport React, { Fragment } from \"react\";\nimport { Button, Grid, Box, List, ListItem, ListItemText } from \"@mui/material\";\nimport {\n  LinkButton,\n  Search,\n  SearchIconWrapper,\n  StyledInputBase,\n} from \"../../styles/styles\";\nimport SearchIcon from \"@mui/icons-material/Search\";\n\nconst Templates = () => {\n  return (\n    <Fragment>\n      <Grid container mt={1}>\n        <Grid item xs={12} m={2}>\n          <Button variant=\"contained\" size=\"small\">\n            Merge Fields.XLS\n          </Button>\n          <Box sx={{ float: \"right\" }}>\n            <Button\n              variant=\"contained\"\n              size=\"small\"\n              sx={{ marginLeft: \"1rem\" }}\n            >\n              New Doc\n            </Button>\n            <Button\n              variant=\"contained\"\n              size=\"small\"\n              sx={{ marginLeft: \"1rem\" }}\n            >\n              New PDF\n            </Button>\n            <Button\n              variant=\"contained\"\n              size=\"small\"\n              sx={{ marginLeft: \"1rem\" }}\n            >\n              New Email\n            </Button>\n            <Button\n              variant=\"contained\"\n              size=\"small\"\n              sx={{ marginLeft: \"1rem\" }}\n            >\n              Edit\n            </Button>\n            <Button\n              variant=\"contained\"\n              size=\"small\"\n              sx={{ marginLeft: \"1rem\" }}\n            >\n              Save\n            </Button>\n            <Button\n              variant=\"contained\"\n              size=\"small\"\n              sx={{ marginLeft: \"1rem\" }}\n            >\n              Close\n            </Button>\n          </Box>\n        </Grid>\n        <Grid item xs={3}>\n          <Box\n            sx={{\n              height: \"80%\",\n              width: \"80%\",\n              borderRadius: \"2rem\",\n            }}\n          >\n            <Button variant=\"contained\" fullWidth>\n              Word Template\n            </Button>\n            <Box mt={2}>\n              <Search style={{ width: \"100%\" }}>\n                <SearchIconWrapper>\n                  <SearchIcon />\n                </SearchIconWrapper>\n                <StyledInputBase\n                  placeholder=\"Search…\"\n                  inputProps={{ \"aria-label\": \"search\" }}\n                />\n              </Search>\n            </Box>\n            <Box mt={1}>\n              <List>\n                <ListItem>\n                  <ListItemText>001 - Report Money</ListItemText>\n                </ListItem>\n                <ListItem>\n                  <ListItemText>002 - Report Time</ListItemText>\n                </ListItem>\n                <ListItem>\n                  <ListItemText>003 - Report Billed hours</ListItemText>\n                </ListItem>\n              </List>\n            </Box>\n          </Box>\n        </Grid>\n        <Grid item xs={3}>\n          <Box\n            sx={{\n              height: \"80%\",\n              width: \"80%\",\n              borderRadius: \"2rem\",\n            }}\n          >\n            <Button variant=\"contained\" fullWidth>\n              PDF Template\n            </Button>\n            <Box mt={2}>\n              <Search style={{ width: \"100%\" }}>\n                <SearchIconWrapper>\n                  <SearchIcon />\n                </SearchIconWrapper>\n                <StyledInputBase\n                  placeholder=\"Search…\"\n                  inputProps={{ \"aria-label\": \"search\" }}\n                />\n              </Search>\n            </Box>\n            <Box mt={1}>\n              <List>\n                <ListItem>\n                  <ListItemText>P001 - Write of Execution</ListItemText>\n                </ListItem>\n                <ListItem>\n                  <ListItemText>P002 - Memo of Cost</ListItemText>\n                </ListItem>\n                <ListItem>\n                  <ListItemText>P003 - Settlement Letter</ListItemText>\n                </ListItem>\n              </List>\n            </Box>\n          </Box>\n        </Grid>\n        <Grid item xs={3}>\n          <Box\n            sx={{\n              height: \"80%\",\n              width: \"80%\",\n              borderRadius: \"2rem\",\n            }}\n          >\n            <Button variant=\"contained\" fullWidth>\n              Email Template\n            </Button>\n            <Box mt={2}>\n              <Search style={{ width: \"100%\" }}>\n                <SearchIconWrapper>\n                  <SearchIcon />\n                </SearchIconWrapper>\n                <StyledInputBase\n                  placeholder=\"Search…\"\n                  inputProps={{ \"aria-label\": \"search\" }}\n                />\n              </Search>\n            </Box>\n            <Box mt={1}>\n              <List>\n                <ListItem>\n                  <ListItemText>001 - Invoice Email</ListItemText>\n                </ListItem>\n                <ListItem>\n                  <ListItemText>002 - New Client</ListItemText>\n                </ListItem>\n                <ListItem>\n                  <ListItemText>003 - Firing Client</ListItemText>\n                </ListItem>\n              </List>\n            </Box>\n          </Box>\n        </Grid>\n        <Grid item xs={3}>\n          <Box\n            sx={{\n              height: \"80%\",\n              padding: \"15rem 2rem 5rem 2rem\",\n              width: \"80%\",\n              backgroundColor: \"darkGray\",\n              borderRadius: \"2rem\",\n            }}\n          >\n            Templates can be opened here to edit them. user can add/ remove\n            merge fields directly to the document or PDF\n          </Box>\n        </Grid>\n      </Grid>\n    </Fragment>\n  );\n};\n\nexport default Templates;\n","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/User/ManageUser.jsx",["412","413","414","415","416","417"],"/** @format */\n\nimport React, { Fragment, useState, useEffect } from \"react\";\nimport {\n  Table,\n  Grid,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TableBody,\n  Typography,\n  Checkbox,\n  Box,\n} from \"@mui/material\";\nimport axios from \"axios\";\nimport { CONFIG } from \"../../api/MatterApi\";\nimport { ActionAlerts } from \"../../utils/ActionAlerts\";\nimport { LinkButton } from \"../../styles/styles\";\n\nconst ManageUser = () => {\n  const [activityData, setActivityData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const FetchData = () => {\n    axios\n      .get(`${process.env.REACT_APP_API_URL}/api/create-member/`, CONFIG)\n      .then((res) => {\n        setLoading(false);\n        setStatus(res.statusText);\n        setActivityData(res.data);\n      })\n      .catch((err) => {\n        setLoading(false);\n        setStatus(err.statusText);\n      });\n  };\n  useEffect(() => {\n    FetchData();\n  }, []);\n  return (\n    <Fragment>\n      <Box>\n        <Typography component=\"h4\" variant=\"h5\" mb={2}>\n          Manage Users\n        </Typography>\n        <Box p={3} sx={{ float: \"right\" }}>\n          <LinkButton to=\"/create-user\">Create User</LinkButton>\n          <LinkButton to=\"/user-group\">Manage User Group</LinkButton>\n          <LinkButton to=\"/user-role\">Manage User Role</LinkButton>\n        </Box>\n\n        <TableContainer>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>First Name</TableCell>\n                <TableCell>Last Name</TableCell>\n                <TableCell>Email</TableCell>\n                <TableCell>Role</TableCell>\n                <TableCell>Group</TableCell>\n                <TableCell>Last Login</TableCell>\n                <TableCell>Status</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {loading\n                ? null\n                : activityData?.map((data) => {\n                    return (\n                      <TableRow>\n                        <TableCell>{data.f_name}</TableCell>\n                        <TableCell>{data.l_name}</TableCell>\n                        <TableCell>{data.p_email}</TableCell>\n                        <TableCell>{data.role}</TableCell>\n                        <TableCell>{data.group}</TableCell>\n                        <TableCell>-</TableCell>\n                        <TableCell>inactive</TableCell>\n                      </TableRow>\n                    );\n                  })}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </Box>\n    </Fragment>\n  );\n};\n\nexport default ManageUser;\n","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/User/ManageUserGroup.jsx",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/User/UserRole.jsx",["418","419"],"/** @format */\nimport React, { Fragment, useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport {\n  Button,\n  Box,\n  List,\n  Table,\n  Grid,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TableBody,\n  ListItem,\n  ListItemText,\n  Typography,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  TextField,\n} from \"@mui/material\";\n\nimport ClearIcon from \"@mui/icons-material/Clear\";\nimport { ActionAlerts } from \"../../utils/ActionAlerts\";\nimport { LinkButton } from \"../../styles/styles\";\n\nimport { CONFIG } from \"../../api/MatterApi\";\n\nconst UserRole = () => {\n  const [category, setCategory] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const [formData, setFormData] = useState({\n    name: \"\",\n  });\n\n  const { name } = formData;\n\n  const onChange = (e) =>\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n\n  const [open, setOpen] = useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n  const [userData, setUserData] = useState([]);\n  const [loadingUser, setLoadingUser] = useState(true);\n  const FetchUserData = () => {\n    axios\n      .get(`${process.env.REACT_APP_API_URL}/api/create-member/`, CONFIG)\n      .then((res) => {\n        setLoadingUser(false);\n\n        setUserData(res.data);\n      })\n      .catch((err) => {\n        setLoadingUser(false);\n      });\n  };\n  const FetchData = () => {\n    axios\n      .get(`${process.env.REACT_APP_API_URL}/api/roles/`, CONFIG)\n      .then((res) => {\n        console.log(res.data);\n        setLoading(false);\n        setStatus(res.statusText);\n        setCategory(res.data);\n      })\n      .catch((err) => {\n        console.log(err);\n        setLoading(false);\n        setError(err.message);\n      });\n  };\n  useEffect(() => {\n    FetchData();\n    FetchUserData();\n  }, []);\n  const handleDelete = (id) => {\n    axios\n      .delete(`${process.env.REACT_APP_API_URL}/api/roles/${id}/`, CONFIG)\n      .then((res) => {\n        FetchData();\n        return (\n          <ActionAlerts\n            value={{ status: res.statusText, message: \"Success\" }}\n          />\n        );\n      });\n  };\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const body = JSON.stringify({ name });\n    axios\n      .post(`${process.env.REACT_APP_API_URL}/api/roles/`, body, CONFIG)\n      .then((res) => {\n        FetchData();\n        return (\n          <ActionAlerts\n            value={{ status: res.statusText, message: \"Success\" }}\n          />\n        );\n      })\n      .catch((err) => {\n        FetchData();\n        return (\n          <ActionAlerts\n            value={{ status: err.statusText, message: \"Success\" }}\n          />\n        );\n      });\n  };\n  return (\n    <Fragment>\n      <Grid container>\n        <Grid item xs={12}>\n          <Box p={3} sx={{ float: \"right\" }}>\n            <LinkButton to=\"/users\">Manage User</LinkButton>\n            <LinkButton to=\"/create-user\">Create User</LinkButton>\n            <LinkButton to=\"/user-group\">Manage Group</LinkButton>\n          </Box>\n        </Grid>\n        <Grid item xs={3}>\n          <Button\n            variant=\"contained\"\n            onClick={handleClickOpen}\n            fullWidth\n            sx={{\n              borderRadius: \"0.5rem\",\n            }}\n          >\n            + New Role\n          </Button>\n          <Dialog\n            component=\"form\"\n            Validate\n            onSubmit={(e) => handleSubmit(e)}\n            open={open}\n            onClose={handleClose}\n            aria-labelledby=\"alert-dialog-title\"\n            aria-describedby=\"alert-dialog-description\"\n          >\n            <DialogTitle id=\"alert-dialog-title\">{\"Add New Role\"}</DialogTitle>\n            <DialogContent>\n              <TextField\n                required\n                fullWidth\n                size=\"small\"\n                margin=\"normal\"\n                variant=\"outlined\"\n                name=\"name\"\n                label=\"Role Name\"\n                type=\"text\"\n                value={name}\n                onChange={(e) => onChange(e)}\n                id=\"name\"\n                autoComplete=\"name\"\n              />\n            </DialogContent>\n            <DialogActions>\n              <Button onClick={handleClose}>Close</Button>\n              <Button type=\"submit\" autoFocus>\n                Add\n              </Button>\n            </DialogActions>\n          </Dialog>\n          {!loading ? (\n            category.map((data) => (\n              <Box mt={1}>\n                <List>\n                  <ListItem disablePadding>\n                    <ListItemText>{data.name}</ListItemText>\n                    <Button\n                      variant=\"contained\"\n                      value={data.id}\n                      onClick={() => handleDelete(data.id)}\n                      sx={{\n                        borderRadius: \"0.5rem\",\n                        float: \"right\",\n                      }}\n                    >\n                      <ClearIcon />\n                    </Button>\n                  </ListItem>\n                </List>\n              </Box>\n            ))\n          ) : (\n            <Typography>Loading ...</Typography>\n          )}\n        </Grid>\n        <Grid item xs={8}>\n          <TableContainer>\n            <Table>\n              <TableHead>\n                <TableRow>\n                  <TableCell>First Name</TableCell>\n                  <TableCell>Last Name</TableCell>\n                  <TableCell>Role</TableCell>\n                  <TableCell>Group</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {loadingUser\n                  ? null\n                  : userData?.map((data) => {\n                      return (\n                        <TableRow>\n                          <TableCell>{data.f_name}</TableCell>\n                          <TableCell>{data.l_name}</TableCell>\n                          <TableCell>{data.role}</TableCell>\n                          <TableCell>{data.group}</TableCell>\n                        </TableRow>\n                      );\n                    })}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </Grid>\n      </Grid>\n    </Fragment>\n  );\n};\n\nexport default UserRole;\n","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Legder/TimeList.jsx",["420","421","422","423","424","425"],"/** @format */\n\nimport React, { Fragment, useState, useEffect } from \"react\";\nimport {\n  Table,\n  Grid,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TableBody,\n  Typography,\n  Checkbox,\n  Box,\n} from \"@mui/material\";\nimport axios from \"axios\";\nimport { CONFIG } from \"../../api/MatterApi\";\nimport { ActionAlerts } from \"../../utils/ActionAlerts\";\nimport { LinkButton } from \"../../styles/styles\";\n\nconst TimeList = () => {\n  const [timeData, setTimeData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const FetchData = () => {\n    axios\n      .get(`${process.env.REACT_APP_API_URL}/api/add-time/`, CONFIG)\n      .then((res) => {\n        setLoading(false);\n        setStatus(res.statusText);\n        setTimeData(res.data);\n      })\n      .catch((err) => {\n        setLoading(false);\n        setStatus(err.statusText);\n      });\n  };\n  useEffect(() => {\n    FetchData();\n  }, []);\n  return (\n    <Fragment>\n      <Box>\n        <LinkButton to=\"/ledgers\" sx={{ float: \"right\" }}>\n          Ledger Dashboard\n        </LinkButton>\n        <Box p={3}>\n          <LinkButton to=\"/time\" sx={{ float: \"right\" }}>\n            Ledger Dashbaord\n          </LinkButton>\n          <LinkButton to=\"/time\" sx={{ float: \"right\" }}>\n            Add Time\n          </LinkButton>\n          <LinkButton to=\"/ledger-list\" sx={{ float: \"right\" }}>\n            Ledger List\n          </LinkButton>\n          <LinkButton to=\"/ledger-documents\" sx={{ float: \"right\" }}>\n            Documents\n          </LinkButton>\n        </Box>\n\n        <TableContainer>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>Add</TableCell>\n\n                <TableCell>Matter #</TableCell>\n                <TableCell>Matter Name</TableCell>\n                <TableCell>Date</TableCell>\n                <TableCell>Billable Time</TableCell>\n                <TableCell>Amount</TableCell>\n                <TableCell>Category</TableCell>\n                <TableCell>Activity</TableCell>\n              </TableRow>\n            </TableHead>\n            {loading\n              ? null\n              : timeData?.map((data) => {\n                  return (\n                    <TableBody id={data.id}>\n                      <TableCell>\n                        <Checkbox />\n                      </TableCell>\n                      <TableCell>{data.matter_name}</TableCell>\n\n                      <TableCell>{data.conatact}</TableCell>\n                      <TableCell>{data.date}</TableCell>\n                      <TableCell>{data.time}</TableCell>\n                      <TableCell>{data.rate}</TableCell>\n                      <TableCell>{data.category}</TableCell>\n                      <TableCell>{data.sub_category}</TableCell>\n                    </TableBody>\n                  );\n                })}\n          </Table>\n        </TableContainer>\n      </Box>\n    </Fragment>\n  );\n};\n\nexport default TimeList;\n","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Profile/Company.jsx",["426"],"/** @format */\n\nimport React, { Fragment, useState } from \"react\";\nimport {\n  TextField,\n  Box,\n  Grid,\n  Switch,\n  Button,\n  Typography,\n  Divider,\n  FormControlLabel,\n} from \"@mui/material\";\nimport axios from \"axios\";\nimport { LinkButton } from \"../../styles/styles\";\n\nimport ClearIcon from \"@mui/icons-material/Clear\";\nimport { ActionAlerts } from \"../../utils/ActionAlerts\";\nimport { useToggle } from \"../../context/useToggle\";\nimport { CONFIG } from \"../../api/MatterApi\";\n\nconst Company = () => {\n  const [approvel, setApprovel] = useToggle(false);\n  const [userData, setUserData] = useState({\n    f_name: \"\",\n    m_name: \"\",\n    l_name: \"\",\n    c_email: \"\",\n    rate: 0.0,\n    role: \"\",\n    time_zone: \"\",\n    group: \"\",\n    job_title: \"\",\n    bar_no: 0,\n    street: \"\",\n    suite: \"\",\n    city: \"\",\n    state: \"\",\n    zip: 0,\n    ext: 0,\n    mobile: 0,\n    home: 0,\n    work_no: 0,\n\n    phone_ext: 0,\n  });\n\n  const {\n    f_name,\n    m_name,\n    l_name,\n    c_email,\n    rate,\n    role,\n    time_zone,\n    group,\n    job_title,\n    bar_no,\n    street,\n    suite,\n    city,\n    state,\n    zip,\n    ext,\n    mobile,\n    home,\n    work_no,\n    p_email,\n    phone_ext,\n  } = userData;\n  const onChange = (e) =>\n    setUserData({ ...userData, [e.target.name]: e.target.value });\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    const body = JSON.stringify({\n      f_name,\n      m_name,\n      l_name,\n      c_email,\n      rate,\n      role,\n      time_zone,\n      group,\n      job_title,\n      bar_no,\n      street,\n      suite,\n      city,\n      state,\n      zip,\n      ext,\n      mobile,\n      home,\n      work_no,\n      p_email,\n      phone_ext,\n    });\n    axios\n      .post(`${process.env.REACT_APP_API_URL}/api/create-member/`, body, CONFIG)\n      .then((res) => {\n        return (\n          <ActionAlerts\n            value={{ status: res.statusText, message: \"Success\" }}\n          />\n        );\n      })\n      .catch((err) => {\n        return (\n          <ActionAlerts\n            value={{ status: err.statusText, message: \"Success\" }}\n          />\n        );\n      });\n  };\n  return (\n    <Fragment>\n      <Box p={3} sx={{ float: \"right\" }}>\n        <LinkButton to=\"/users\">Manage User</LinkButton>\n        <LinkButton to=\"/user-group\">Manage Group</LinkButton>\n        <LinkButton to=\"/user-role\">Manage Role</LinkButton>\n      </Box>\n\n      <Box\n        component=\"form\"\n        Validate\n        sx={{\n          \"& .MuiTextField-root\": { m: 1, width: \"15rem\" },\n        }}\n        onSubmit={(e) => onSubmit(e)}\n      >\n        <Typography component=\"h3\" variant=\"h4\">\n          Create User\n        </Typography>\n        <Grid container spacing={2} mt={2}>\n          <Grid item xs={12}>\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"f_name\"\n              label=\"f_name\"\n              type=\"text\"\n              onChange={(e) => onChange(e)}\n              id=\"f_name\"\n              autoComplete=\"f_name\"\n            />\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"m_name\"\n              label=\"m_name\"\n              type=\"text\"\n              onChange={(e) => onChange(e)}\n              id=\"m_name\"\n              autoComplete=\"m_name\"\n            />\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"l_name\"\n              label=\"l_name\"\n              type=\"text\"\n              onChange={(e) => onChange(e)}\n              id=\"l_name\"\n              autoComplete=\"l_name\"\n            />\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"c_email\"\n              label=\"c_email\"\n              type=\"text\"\n              onChange={(e) => onChange(e)}\n              id=\"c_email\"\n              autoComplete=\"c_email\"\n            />\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"rate\"\n              label=\"rate\"\n              type=\"number\"\n              onChange={(e) => onChange(e)}\n              id=\"rate\"\n              autoComplete=\"rate\"\n            />\n            <FormControlLabel\n              label=\"Round Entries (Round [up/down] to nearnest 0.00 fraction of the hour\"\n              control={\n                <Switch\n                  checked={approvel}\n                  onChange={() => setApprovel(approvel)}\n                />\n              }\n              sx={{ width: \"35rem\" }}\n            />\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"role\"\n              label=\"role\"\n              type=\"text\"\n              onChange={(e) => onChange(e)}\n              id=\"role\"\n              autoComplete=\"role\"\n            />\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"time_zone\"\n              label=\"time_zone\"\n              type=\"text\"\n              onChange={(e) => onChange(e)}\n              id=\"time_zone\"\n              autoComplete=\"time_zone\"\n            />\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"group\"\n              label=\"group\"\n              type=\"text\"\n              onChange={(e) => onChange(e)}\n              id=\"group\"\n              autoComplete=\"group\"\n            />\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"job_title\"\n              label=\"job_title\"\n              type=\"text\"\n              onChange={(e) => onChange(e)}\n              id=\"job_title\"\n              autoComplete=\"job_title\"\n            />\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"bar_no\"\n              label=\"bar_no\"\n              type=\"number\"\n              onChange={(e) => onChange(e)}\n              id=\"bar_no\"\n              autoComplete=\"bar_no\"\n            />\n          </Grid>\n          <Grid item mt={2}>\n            <Divider textAlign=\"left\">\n              <Typography component=\"h3\" variant=\"h5\">\n                Contact Info\n              </Typography>\n            </Divider>\n            <Box>\n              <TextField\n                size=\"small\"\n                margin=\"normal\"\n                variant=\"outlined\"\n                name=\"street\"\n                label=\"street\"\n                type=\"text\"\n                onChange={(e) => onChange(e)}\n                id=\"street\"\n                autoComplete=\"street\"\n              />\n              <TextField\n                size=\"small\"\n                margin=\"normal\"\n                variant=\"outlined\"\n                name=\"suite\"\n                label=\"suite\"\n                type=\"text\"\n                onChange={(e) => onChange(e)}\n                id=\"suite\"\n                autoComplete=\"suite\"\n              />\n              <TextField\n                size=\"small\"\n                margin=\"normal\"\n                variant=\"outlined\"\n                name=\"city\"\n                label=\"city\"\n                type=\"text\"\n                onChange={(e) => onChange(e)}\n                id=\"city\"\n                autoComplete=\"city\"\n              />\n              <TextField\n                size=\"small\"\n                margin=\"normal\"\n                variant=\"outlined\"\n                name=\"state\"\n                label=\"state\"\n                type=\"text\"\n                onChange={(e) => onChange(e)}\n                id=\"state\"\n                autoComplete=\"state\"\n              />\n              <TextField\n                size=\"small\"\n                margin=\"normal\"\n                variant=\"outlined\"\n                name=\"zip\"\n                label=\"zip\"\n                type=\"number\"\n                onChange={(e) => onChange(e)}\n                id=\"zip\"\n                autoComplete=\"zip\"\n              />\n              <TextField\n                size=\"small\"\n                margin=\"normal\"\n                variant=\"outlined\"\n                name=\"ext\"\n                label=\"ext\"\n                type=\"number\"\n                onChange={(e) => onChange(e)}\n                id=\"ext\"\n                autoComplete=\"ext\"\n              />\n              <TextField\n                size=\"small\"\n                margin=\"normal\"\n                variant=\"outlined\"\n                name=\"mobile\"\n                label=\"mobile\"\n                type=\"phone\"\n                onChange={(e) => onChange(e)}\n                id=\"mobile\"\n                autoComplete=\"mobile\"\n              />\n              <Button\n                variant=\"contained\"\n                sx={{ background: \"#5cb85c\", marginTop: \"0.5rem\" }}\n              >\n                Set Password Automaticly\n              </Button>\n              <TextField\n                size=\"small\"\n                margin=\"normal\"\n                variant=\"outlined\"\n                name=\"home\"\n                label=\"home\"\n                type=\"phone\"\n                onChange={(e) => onChange(e)}\n                id=\"home\"\n                autoComplete=\"home\"\n              />\n              <TextField\n                size=\"small\"\n                margin=\"normal\"\n                variant=\"outlined\"\n                name=\"work_no\"\n                label=\"work_no\"\n                type=\"phone\"\n                onChange={(e) => onChange(e)}\n                id=\"work_no\"\n                autoComplete=\"work_no\"\n              />\n              <TextField\n                size=\"small\"\n                margin=\"normal\"\n                variant=\"outlined\"\n                name=\"p_email\"\n                label=\"p_email\"\n                type=\"email\"\n                onChange={(e) => onChange(e)}\n                id=\"p_email\"\n                autoComplete=\"p_email\"\n              />\n              <TextField\n                size=\"small\"\n                margin=\"normal\"\n                variant=\"outlined\"\n                name=\"phone_ext\"\n                label=\"phone_ext\"\n                type=\"number\"\n                onChange={(e) => onChange(e)}\n                id=\"phone_ext\"\n                autoComplete=\"phone_ext\"\n              />\n            </Box>\n          </Grid>\n          <Grid item xs={12}>\n            <Box\n              sx={{\n                \"& .MuiButton-root\": { m: 1 },\n                float: \"right\",\n              }}\n            >\n              <Button variant=\"contained\" type=\"submit\">\n                Create Member\n              </Button>\n            </Box>\n          </Grid>\n        </Grid>\n      </Box>\n    </Fragment>\n  );\n};\n\nexport default Company;\n","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Contact/Contact.jsx",["427","428","429"],"/** @format */\n\nimport React, { Fragment, useState } from \"react\";\nimport { TextField, Box, Grid, Button, Typography } from \"@mui/material\";\nimport AdapterDateFns from \"@mui/lab/AdapterDateFns\";\nimport SaveIcon from \"@mui/icons-material/Save\";\nimport { LocalizationProvider, TimePicker, DatePicker } from \"@mui/lab\";\nimport { ActionAlerts, GetTime, GetDate } from \"../../utils/ActionAlerts\";\nimport axios from \"axios\";\nimport { CONFIG } from \"../../api/MatterApi\";\n\nconst Contact = () => {\n  const [contactData, setContactData] = useState({\n    // company info\n    company_name: \"\",\n    webiste: \"\",\n    ger_email: \"\",\n    billing_email: \"\",\n    // address\n    street: \"\",\n    suite: \"\",\n    city: \"\",\n    state: \"\",\n    zip: 0,\n    plus_4: 0,\n    note: \"\",\n\n    client_no: 0,\n    f_name: \"\",\n    l_name: \"\",\n    dob: \"\",\n    ssn: 0,\n    mobile_no: 0,\n    home_no: 0,\n    office_no: 0,\n    fax_no: 0,\n    other_no: 0,\n    email_1: \"\",\n    email_2: \"\",\n    email_3: \"\",\n    // other address\n    street2: \"\",\n    suite2: \"\",\n    city2: \"\",\n    state2: \"\",\n    zip2: 0,\n    plus_42: 0,\n\n    office: \"\",\n    team: \"\",\n    member: \"\",\n    assign_to: \"\",\n    contact: \"\",\n    relation: \"\",\n  });\n  const [pickDate, setPickDate] = useState(new Date(\"2021-12-01T21:00:00\"));\n\n  const {\n    company_name,\n    webiste,\n    ger_email,\n    billing_email,\n    street,\n    suite,\n    city,\n    state,\n    zip,\n    plus_4,\n    client_no,\n    f_name,\n    l_name,\n    dob,\n    ssn,\n    mobile_no,\n    home_no,\n    office_no,\n    fax_no,\n    other_no,\n    email_1,\n    email_2,\n    email_3,\n    street2,\n    suite2,\n    city2,\n    state2,\n    zip2,\n    plus_42,\n    office,\n    team,\n    member,\n    assign_to,\n    contact,\n    relation,\n  } = contactData;\n  const onChange = (e) =>\n    setContactData({ ...contactData, [e.target.name]: e.target.value });\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n\n    let date = GetDate(pickDate);\n\n    const body = JSON.stringify({\n      company_name,\n      webiste,\n      ger_email,\n      billing_email,\n      street,\n      suite,\n      city,\n      state,\n      zip,\n      plus_4,\n      client_no,\n      f_name,\n      l_name,\n      dob,\n      ssn,\n      mobile_no,\n      home_no,\n      office_no,\n      fax_no,\n      other_no,\n      email_1,\n      email_2,\n      email_3,\n      street2,\n      suite2,\n      city2,\n      state2,\n      zip2,\n      plus_42,\n      office,\n      team,\n      member,\n      assign_to,\n      contact,\n      relation,\n    });\n    axios\n      .post(`${process.env.REACT_APP_API_URL}/api/contact/`, body, CONFIG)\n      .then((res) => {\n        <ActionAlerts value={{ status: res.statusText, message: \"Success\" }} />;\n      })\n      .catch((err) => {\n        <ActionAlerts value={{ status: err.statusText, message: \"Failed\" }} />;\n      });\n    console.log(body);\n  };\n\n  return (\n    <Fragment>\n      <Box\n        component=\"form\"\n        Validate\n        sx={{\n          \"& .MuiTextField-root\": { m: 1 },\n        }}\n        onSubmit={(e) => onSubmit(e)}\n      >\n        <Grid container p={2}>\n          <Grid item xs={6}>\n            <Typography component=\"h4\" variant=\"h5\">\n              Company information\n            </Typography>\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"company_name\"\n              label=\"company_name\"\n              type=\"text\"\n              onChange={(e) => onChange(e)}\n              id=\"company_name\"\n              autoComplete=\"company_name\"\n            />\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"client_no\"\n              label=\"client_no\"\n              type=\"number\"\n              onChange={(e) => onChange(e)}\n              id=\"client_no\"\n              autoComplete=\"client_no\"\n            />\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"f_name\"\n              label=\"f_name\"\n              type=\"text\"\n              onChange={(e) => onChange(e)}\n              id=\"f_name\"\n              autoComplete=\"f_name\"\n            />\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"l_name\"\n              label=\"l_name\"\n              type=\"text\"\n              onChange={(e) => onChange(e)}\n              id=\"l_name\"\n              autoComplete=\"l_name\"\n            />\n            <LocalizationProvider dateAdapter={AdapterDateFns}>\n              <DatePicker\n                inputFormat=\"yyyy-MM-dd\"\n                mask=\"____-__-__\"\n                label=\"Pick Date\"\n                value={pickDate}\n                name=\"pickdate\"\n                id=\"pickdate\"\n                onChange={(e) => setPickDate(e)}\n                renderInput={(params) => <TextField size=\"small\" {...params} />}\n              />\n            </LocalizationProvider>\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"ssn\"\n              label=\"ssn\"\n              type=\"text\"\n              onChange={(e) => onChange(e)}\n              id=\"ssn\"\n              autoComplete=\"ssn\"\n            />\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"mobile_no\"\n              label=\"mobile_no\"\n              type=\"number\"\n              onChange={(e) => onChange(e)}\n              id=\"mobile_no\"\n              autoComplete=\"mobile_no\"\n            />\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"home_no\"\n              label=\"home_no\"\n              type=\"number\"\n              onChange={(e) => onChange(e)}\n              id=\"home_no\"\n              autoComplete=\"home_no\"\n            />\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"office_no\"\n              label=\"office_no\"\n              type=\"number\"\n              onChange={(e) => onChange(e)}\n              id=\"office_no\"\n              autoComplete=\"office_no\"\n            />\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"fax_no\"\n              label=\"fax_no\"\n              type=\"number\"\n              onChange={(e) => onChange(e)}\n              id=\"fax_no\"\n              autoComplete=\"fax_no\"\n            />\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"other_no\"\n              label=\"other_no\"\n              type=\"number\"\n              onChange={(e) => onChange(e)}\n              id=\"other_no\"\n              autoComplete=\"other_no\"\n            />\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"email_1\"\n              label=\"email_1\"\n              type=\"email\"\n              onChange={(e) => onChange(e)}\n              id=\"email_1\"\n              autoComplete=\"email_1\"\n            />\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"email_2\"\n              label=\"email_2\"\n              type=\"email\"\n              onChange={(e) => onChange(e)}\n              id=\"email_2\"\n              autoComplete=\"email_2\"\n            />\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"email_3\"\n              label=\"email_3\"\n              type=\"email\"\n              onChange={(e) => onChange(e)}\n              id=\"email_3\"\n              autoComplete=\"email_3\"\n            />\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"street\"\n              label=\"street\"\n              type=\"text\"\n              onChange={(e) => onChange(e)}\n              id=\"street\"\n              autoComplete=\"street\"\n            />\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"suite\"\n              label=\"suite\"\n              type=\"text\"\n              onChange={(e) => onChange(e)}\n              id=\"suite\"\n              autoComplete=\"suite\"\n            />\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"city\"\n              label=\"city\"\n              type=\"text\"\n              onChange={(e) => onChange(e)}\n              id=\"city\"\n              autoComplete=\"city\"\n            />\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"state\"\n              label=\"state\"\n              type=\"text\"\n              onChange={(e) => onChange(e)}\n              id=\"state\"\n              autoComplete=\"state\"\n            />\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"zip\"\n              label=\"zip\"\n              type=\"number\"\n              onChange={(e) => onChange(e)}\n              id=\"zip\"\n              autoComplete=\"zip\"\n            />\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"plus_4\"\n              label=\"plus_4\"\n              type=\"number\"\n              onChange={(e) => onChange(e)}\n              id=\"plus_4\"\n              autoComplete=\"plus_4\"\n            />\n            <TextField\n              fullWidth\n              size=\"small\"\n              multiline\n              rows={5}\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"note\"\n              label=\"note\"\n              type=\"text\"\n              onChange={(e) => onChange(e)}\n              id=\"note\"\n              autoComplete=\"note\"\n            />\n          </Grid>\n          <Grid item xs={6}>\n            <Typography component=\"h4\" variant=\"h6\">\n              Alternate Information\n            </Typography>\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"webiste\"\n              label=\"webiste\"\n              type=\"text\"\n              onChange={(e) => onChange(e)}\n              id=\"webiste\"\n              autoComplete=\"webiste\"\n            />\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"ger_email\"\n              label=\"ger_email\"\n              type=\"text\"\n              onChange={(e) => onChange(e)}\n              id=\"ger_email\"\n              autoComplete=\"ger_email\"\n            />\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"billing_email\"\n              label=\"billing_email\"\n              type=\"text\"\n              onChange={(e) => onChange(e)}\n              id=\"billing_email\"\n              autoComplete=\"billing_email\"\n            />\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"street\"\n              label=\"street\"\n              type=\"text\"\n              onChange={(e) => onChange(e)}\n              id=\"street\"\n              autoComplete=\"street\"\n            />\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"suite\"\n              label=\"suite\"\n              type=\"text\"\n              onChange={(e) => onChange(e)}\n              id=\"suite\"\n              autoComplete=\"suite\"\n            />\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"city\"\n              label=\"city\"\n              type=\"text\"\n              onChange={(e) => onChange(e)}\n              id=\"city\"\n              autoComplete=\"city\"\n            />\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"state\"\n              label=\"state\"\n              type=\"text\"\n              onChange={(e) => onChange(e)}\n              id=\"state\"\n              autoComplete=\"state\"\n            />\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"zip\"\n              label=\"zip\"\n              type=\"number\"\n              onChange={(e) => onChange(e)}\n              id=\"zip\"\n              autoComplete=\"zip\"\n            />\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"plus_4\"\n              label=\"plus_4\"\n              type=\"number\"\n              onChange={(e) => onChange(e)}\n              id=\"plus_4\"\n              autoComplete=\"plus_4\"\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <Grid container>\n              <Grid item xs={4}>\n                <Typography component=\"h4\" variant=\"h6\">\n                  Source\n                </Typography>\n                <TextField\n                  size=\"small\"\n                  margin=\"normal\"\n                  variant=\"outlined\"\n                  name=\"office\"\n                  label=\"office\"\n                  type=\"text\"\n                  onChange={(e) => onChange(e)}\n                  id=\"office\"\n                  autoComplete=\"office\"\n                />\n                <TextField\n                  size=\"small\"\n                  margin=\"normal\"\n                  variant=\"outlined\"\n                  name=\"team\"\n                  label=\"team\"\n                  type=\"text\"\n                  onChange={(e) => onChange(e)}\n                  id=\"team\"\n                  autoComplete=\"team\"\n                />\n                <TextField\n                  size=\"small\"\n                  margin=\"normal\"\n                  variant=\"outlined\"\n                  name=\"member\"\n                  label=\"member\"\n                  type=\"text\"\n                  onChange={(e) => onChange(e)}\n                  id=\"member\"\n                  autoComplete=\"member\"\n                />\n              </Grid>\n              <Grid item xs={4}>\n                <Typography component=\"h4\" variant=\"h6\">\n                  Assigned To\n                </Typography>\n                <TextField\n                  size=\"small\"\n                  margin=\"normal\"\n                  variant=\"outlined\"\n                  name=\"assign_to\"\n                  label=\"assign_to\"\n                  type=\"text\"\n                  onChange={(e) => onChange(e)}\n                  id=\"assign_to\"\n                  autoComplete=\"assign_to\"\n                />\n              </Grid>\n              <Grid item xs={4}>\n                <Typography component=\"h4\" variant=\"h6\">\n                  Linked Contacts\n                </Typography>\n                <TextField\n                  size=\"small\"\n                  margin=\"normal\"\n                  variant=\"outlined\"\n                  name=\"contact\"\n                  label=\"contact\"\n                  type=\"text\"\n                  onChange={(e) => onChange(e)}\n                  id=\"contact\"\n                  autoComplete=\"contact\"\n                />\n                <TextField\n                  size=\"small\"\n                  margin=\"normal\"\n                  variant=\"outlined\"\n                  name=\"relation\"\n                  label=\"relation\"\n                  type=\"text\"\n                  onChange={(e) => onChange(e)}\n                  id=\"relation\"\n                  autoComplete=\"relation\"\n                />\n              </Grid>\n            </Grid>\n            <Box sx={{ float: \"right\" }}>\n              <Button variant=\"contained\" type=\"submit\" endIcon={<SaveIcon />}>\n                Save\n              </Button>\n            </Box>\n          </Grid>\n        </Grid>\n      </Box>\n    </Fragment>\n  );\n};\n\nexport default Contact;\n",{"ruleId":"430","severity":1,"message":"431","line":12,"column":3,"nodeType":"432","messageId":"433","endLine":12,"endColumn":18},{"ruleId":"430","severity":1,"message":"434","line":8,"column":32,"nodeType":"432","messageId":"433","endLine":8,"endColumn":47},{"ruleId":"430","severity":1,"message":"435","line":11,"column":10,"nodeType":"432","messageId":"433","endLine":11,"endColumn":22},{"ruleId":"430","severity":1,"message":"436","line":19,"column":3,"nodeType":"432","messageId":"433","endLine":19,"endColumn":19},{"ruleId":"430","severity":1,"message":"437","line":23,"column":10,"nodeType":"432","messageId":"433","endLine":23,"endColumn":17},{"ruleId":"430","severity":1,"message":"438","line":27,"column":10,"nodeType":"432","messageId":"433","endLine":27,"endColumn":16},{"ruleId":"430","severity":1,"message":"439","line":5,"column":3,"nodeType":"432","messageId":"433","endLine":5,"endColumn":6},{"ruleId":"430","severity":1,"message":"440","line":14,"column":10,"nodeType":"432","messageId":"433","endLine":14,"endColumn":20},{"ruleId":"430","severity":1,"message":"437","line":18,"column":10,"nodeType":"432","messageId":"433","endLine":18,"endColumn":17},{"ruleId":"430","severity":1,"message":"438","line":24,"column":10,"nodeType":"432","messageId":"433","endLine":24,"endColumn":16},{"ruleId":"430","severity":1,"message":"440","line":20,"column":10,"nodeType":"432","messageId":"433","endLine":20,"endColumn":20},{"ruleId":"430","severity":1,"message":"441","line":22,"column":10,"nodeType":"432","messageId":"433","endLine":22,"endColumn":19},{"ruleId":"430","severity":1,"message":"442","line":25,"column":10,"nodeType":"432","messageId":"433","endLine":25,"endColumn":24},{"ruleId":"430","severity":1,"message":"443","line":18,"column":26,"nodeType":"432","messageId":"433","endLine":18,"endColumn":43},{"ruleId":"430","severity":1,"message":"444","line":19,"column":23,"nodeType":"432","messageId":"433","endLine":19,"endColumn":37},{"ruleId":"430","severity":1,"message":"445","line":20,"column":26,"nodeType":"432","messageId":"433","endLine":20,"endColumn":43},{"ruleId":"430","severity":1,"message":"446","line":13,"column":10,"nodeType":"432","messageId":"433","endLine":13,"endColumn":18},{"ruleId":"430","severity":1,"message":"447","line":20,"column":23,"nodeType":"432","messageId":"433","endLine":20,"endColumn":37},{"ruleId":"430","severity":1,"message":"443","line":23,"column":26,"nodeType":"432","messageId":"433","endLine":23,"endColumn":43},{"ruleId":"430","severity":1,"message":"444","line":24,"column":23,"nodeType":"432","messageId":"433","endLine":24,"endColumn":37},{"ruleId":"430","severity":1,"message":"448","line":5,"column":22,"nodeType":"432","messageId":"433","endLine":5,"endColumn":33},{"ruleId":"430","severity":1,"message":"439","line":4,"column":10,"nodeType":"432","messageId":"433","endLine":4,"endColumn":13},{"ruleId":"430","severity":1,"message":"449","line":15,"column":19,"nodeType":"432","messageId":"433","endLine":15,"endColumn":29},{"ruleId":"450","severity":1,"message":"451","line":51,"column":37,"nodeType":"452","messageId":"453","endLine":51,"endColumn":39},{"ruleId":"430","severity":1,"message":"454","line":22,"column":10,"nodeType":"432","messageId":"433","endLine":22,"endColumn":16},{"ruleId":"430","severity":1,"message":"449","line":59,"column":19,"nodeType":"432","messageId":"433","endLine":59,"endColumn":29},{"ruleId":"450","severity":1,"message":"451","line":283,"column":43,"nodeType":"452","messageId":"453","endLine":283,"endColumn":45},{"ruleId":"430","severity":1,"message":"455","line":52,"column":20,"nodeType":"432","messageId":"433","endLine":52,"endColumn":31},{"ruleId":"430","severity":1,"message":"456","line":30,"column":23,"nodeType":"432","messageId":"433","endLine":30,"endColumn":37},{"ruleId":"430","severity":1,"message":"457","line":104,"column":23,"nodeType":"432","messageId":"433","endLine":104,"endColumn":37},{"ruleId":"430","severity":1,"message":"458","line":3,"column":27,"nodeType":"432","messageId":"433","endLine":3,"endColumn":35},{"ruleId":"430","severity":1,"message":"459","line":23,"column":7,"nodeType":"432","messageId":"433","endLine":23,"endColumn":17},{"ruleId":"430","severity":1,"message":"460","line":30,"column":10,"nodeType":"432","messageId":"433","endLine":30,"endColumn":15},{"ruleId":"430","severity":1,"message":"438","line":31,"column":10,"nodeType":"432","messageId":"433","endLine":31,"endColumn":16},{"ruleId":"430","severity":1,"message":"461","line":3,"column":48,"nodeType":"432","messageId":"433","endLine":3,"endColumn":59},{"ruleId":"430","severity":1,"message":"462","line":20,"column":10,"nodeType":"432","messageId":"433","endLine":20,"endColumn":22},{"ruleId":"430","severity":1,"message":"460","line":27,"column":10,"nodeType":"432","messageId":"433","endLine":27,"endColumn":15},{"ruleId":"430","severity":1,"message":"463","line":27,"column":17,"nodeType":"432","messageId":"433","endLine":27,"endColumn":25},{"ruleId":"430","severity":1,"message":"438","line":28,"column":10,"nodeType":"432","messageId":"433","endLine":28,"endColumn":16},{"ruleId":"430","severity":1,"message":"464","line":16,"column":3,"nodeType":"432","messageId":"433","endLine":16,"endColumn":20},{"ruleId":"430","severity":1,"message":"465","line":17,"column":8,"nodeType":"432","messageId":"433","endLine":17,"endColumn":17},{"ruleId":"430","severity":1,"message":"466","line":58,"column":5,"nodeType":"432","messageId":"433","endLine":58,"endColumn":9},{"ruleId":"430","severity":1,"message":"462","line":19,"column":10,"nodeType":"432","messageId":"433","endLine":19,"endColumn":22},{"ruleId":"430","severity":1,"message":"460","line":25,"column":10,"nodeType":"432","messageId":"433","endLine":25,"endColumn":15},{"ruleId":"430","severity":1,"message":"463","line":25,"column":17,"nodeType":"432","messageId":"433","endLine":25,"endColumn":25},{"ruleId":"430","severity":1,"message":"438","line":26,"column":10,"nodeType":"432","messageId":"433","endLine":26,"endColumn":16},{"ruleId":"430","severity":1,"message":"467","line":6,"column":3,"nodeType":"432","messageId":"433","endLine":6,"endColumn":7},{"ruleId":"430","severity":1,"message":"462","line":18,"column":10,"nodeType":"432","messageId":"433","endLine":18,"endColumn":22},{"ruleId":"430","severity":1,"message":"460","line":24,"column":10,"nodeType":"432","messageId":"433","endLine":24,"endColumn":15},{"ruleId":"430","severity":1,"message":"463","line":24,"column":17,"nodeType":"432","messageId":"433","endLine":24,"endColumn":25},{"ruleId":"430","severity":1,"message":"438","line":25,"column":10,"nodeType":"432","messageId":"433","endLine":25,"endColumn":16},{"ruleId":"430","severity":1,"message":"468","line":6,"column":3,"nodeType":"432","messageId":"433","endLine":6,"endColumn":9},{"ruleId":"430","severity":1,"message":"469","line":13,"column":3,"nodeType":"432","messageId":"433","endLine":13,"endColumn":19},{"ruleId":"430","severity":1,"message":"470","line":6,"column":3,"nodeType":"432","messageId":"433","endLine":6,"endColumn":14},{"ruleId":"430","severity":1,"message":"471","line":7,"column":3,"nodeType":"432","messageId":"433","endLine":7,"endColumn":9},{"ruleId":"430","severity":1,"message":"472","line":8,"column":3,"nodeType":"432","messageId":"433","endLine":8,"endColumn":11},{"ruleId":"430","severity":1,"message":"473","line":9,"column":3,"nodeType":"432","messageId":"433","endLine":9,"endColumn":13},{"ruleId":"430","severity":1,"message":"474","line":29,"column":10,"nodeType":"432","messageId":"433","endLine":29,"endColumn":20},{"ruleId":"430","severity":1,"message":"475","line":30,"column":10,"nodeType":"432","messageId":"433","endLine":30,"endColumn":17},{"ruleId":"430","severity":1,"message":"476","line":4,"column":8,"nodeType":"432","messageId":"433","endLine":4,"endColumn":13},{"ruleId":"430","severity":1,"message":"477","line":21,"column":24,"nodeType":"432","messageId":"433","endLine":21,"endColumn":39},{"ruleId":"430","severity":1,"message":"478","line":22,"column":19,"nodeType":"432","messageId":"433","endLine":22,"endColumn":29},{"ruleId":"430","severity":1,"message":"479","line":16,"column":8,"nodeType":"432","messageId":"433","endLine":16,"endColumn":16},{"ruleId":"430","severity":1,"message":"480","line":56,"column":5,"nodeType":"432","messageId":"433","endLine":56,"endColumn":18},{"ruleId":"430","severity":1,"message":"481","line":59,"column":5,"nodeType":"432","messageId":"433","endLine":59,"endColumn":9},{"ruleId":"430","severity":1,"message":"482","line":60,"column":5,"nodeType":"432","messageId":"433","endLine":60,"endColumn":9},{"ruleId":"430","severity":1,"message":"483","line":62,"column":5,"nodeType":"432","messageId":"433","endLine":62,"endColumn":10},{"ruleId":"430","severity":1,"message":"466","line":63,"column":5,"nodeType":"432","messageId":"433","endLine":63,"endColumn":9},{"ruleId":"430","severity":1,"message":"440","line":6,"column":3,"nodeType":"432","messageId":"433","endLine":6,"endColumn":13},{"ruleId":"430","severity":1,"message":"467","line":6,"column":3,"nodeType":"432","messageId":"433","endLine":6,"endColumn":7},{"ruleId":"430","severity":1,"message":"484","line":13,"column":3,"nodeType":"432","messageId":"433","endLine":13,"endColumn":11},{"ruleId":"430","severity":1,"message":"462","line":18,"column":10,"nodeType":"432","messageId":"433","endLine":18,"endColumn":22},{"ruleId":"430","severity":1,"message":"460","line":24,"column":10,"nodeType":"432","messageId":"433","endLine":24,"endColumn":15},{"ruleId":"430","severity":1,"message":"463","line":24,"column":17,"nodeType":"432","messageId":"433","endLine":24,"endColumn":25},{"ruleId":"430","severity":1,"message":"438","line":25,"column":10,"nodeType":"432","messageId":"433","endLine":25,"endColumn":16},{"ruleId":"430","severity":1,"message":"460","line":34,"column":10,"nodeType":"432","messageId":"433","endLine":34,"endColumn":15},{"ruleId":"430","severity":1,"message":"438","line":35,"column":10,"nodeType":"432","messageId":"433","endLine":35,"endColumn":16},{"ruleId":"430","severity":1,"message":"467","line":6,"column":3,"nodeType":"432","messageId":"433","endLine":6,"endColumn":7},{"ruleId":"430","severity":1,"message":"485","line":12,"column":3,"nodeType":"432","messageId":"433","endLine":12,"endColumn":13},{"ruleId":"430","severity":1,"message":"462","line":18,"column":10,"nodeType":"432","messageId":"433","endLine":18,"endColumn":22},{"ruleId":"430","severity":1,"message":"460","line":24,"column":10,"nodeType":"432","messageId":"433","endLine":24,"endColumn":15},{"ruleId":"430","severity":1,"message":"463","line":24,"column":17,"nodeType":"432","messageId":"433","endLine":24,"endColumn":25},{"ruleId":"430","severity":1,"message":"438","line":25,"column":10,"nodeType":"432","messageId":"433","endLine":25,"endColumn":16},{"ruleId":"430","severity":1,"message":"465","line":17,"column":8,"nodeType":"432","messageId":"433","endLine":17,"endColumn":17},{"ruleId":"430","severity":1,"message":"486","line":7,"column":32,"nodeType":"432","messageId":"433","endLine":7,"endColumn":42},{"ruleId":"430","severity":1,"message":"487","line":8,"column":24,"nodeType":"432","messageId":"433","endLine":8,"endColumn":31},{"ruleId":"430","severity":1,"message":"481","line":101,"column":9,"nodeType":"432","messageId":"433","endLine":101,"endColumn":13},"no-unused-vars","'HourglassBottom' is defined but never used.","Identifier","unusedVar","'DateRangePicker' is defined but never used.","'CreateMatter' is defined but never used.","'containerClasses' is defined but never used.","'GetDate' is defined but never used.","'status' is assigned a value but never used.","'Box' is defined but never used.","'LinkButton' is defined but never used.","'useToggle' is defined but never used.","'update_profile' is defined but never used.","'setCalendarToggle' is assigned a value but never used.","'setTasksToggle' is assigned a value but never used.","'setProgressToggle' is assigned a value but never used.","'cardData' is defined but never used.","'setCardsToggle' is assigned a value but never used.","'setProgress' is assigned a value but never used.","'setInvoice' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'styled' is defined but never used.","'setRedirect' is assigned a value but never used.","'setPaymentData' is assigned a value but never used.","'setInvoiceData' is assigned a value but never used.","'useState' is defined but never used.","'catHandler' is assigned a value but never used.","'error' is assigned a value but never used.","'useCallback' is defined but never used.","'ActionAlerts' is defined but never used.","'setError' is assigned a value but never used.","'DialogContentText' is defined but never used.","'ClearIcon' is defined but never used.","'file' is assigned a value but never used.","'Grid' is defined but never used.","'Switch' is defined but never used.","'FormControlLabel' is defined but never used.","'FormControl' is defined but never used.","'Select' is defined but never used.","'MenuItem' is defined but never used.","'InputLabel' is defined but never used.","'matterData' is assigned a value but never used.","'loading' is assigned a value but never used.","'axios' is defined but never used.","'setActivityData' is assigned a value but never used.","'setLoading' is assigned a value but never used.","'SaveIcon' is defined but never used.","'practice_area' is assigned a value but never used.","'date' is assigned a value but never used.","'time' is assigned a value but never used.","'notes' is assigned a value but never used.","'Checkbox' is defined but never used.","'Typography' is defined but never used.","'TimePicker' is defined but never used.","'GetTime' is defined but never used."]