{"ast":null,"code":"import _slicedToArray from\"/home/supersis03/Projects/Dextera/dextera-project/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";/** @format */import React,{useEffect,useState}from\"react\";import axios from\"axios\";import{Paper,Table,TableCell,TableContainer,TableHead,TableBody,TableRow,Typography,FormGroup,FormControlLabel,Checkbox,Box,containerClasses}from\"@mui/material\";import{CONFIG}from\"../../api/MatterApi\";import CircleIcon from\"@mui/icons-material/Circle\";import{GetDate}from\"../../utils/ActionAlerts\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var MatterList=function MatterList(){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),tasks=_useState2[0],setTasks=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),status=_useState4[0],setStatus=_useState4[1];var _useState5=useState(true),_useState6=_slicedToArray(_useState5,2),loading=_useState6[0],setLoading=_useState6[1];var _useState7=useState(false),_useState8=_slicedToArray(_useState7,2),redTask=_useState8[0],setRedTask=_useState8[1];var _useState9=useState(false),_useState10=_slicedToArray(_useState9,2),greenTask=_useState10[0],setGreenTask=_useState10[1];var _useState11=useState(false),_useState12=_slicedToArray(_useState11,2),yellowTask=_useState12[0],setYellowTask=_useState12[1];var _useState13=useState(true),_useState14=_slicedToArray(_useState13,2),myTask=_useState14[0],setMyTask=_useState14[1];var FetchData=function FetchData(){axios.get(\"\".concat(process.env.REACT_APP_API_URL,\"/api/tasks/\"),CONFIG).then(function(res){setLoading(false);setStatus(res.statusText);setTasks(res.data);}).catch(function(err){setLoading(false);setStatus(err.statusText);});};useEffect(function(){FetchData();},[]);return/*#__PURE__*/_jsxs(Box,{component:Paper,p:2,children:[/*#__PURE__*/_jsxs(FormGroup,{\"aria-label\":\"position\",row:true,children:[/*#__PURE__*/_jsx(FormControlLabel,{control:/*#__PURE__*/_jsx(Checkbox,{value:myTask,onChange:function onChange(){return setMyTask(!myTask);}}),label:\"My Tasks\"}),/*#__PURE__*/_jsx(FormControlLabel,{control:/*#__PURE__*/_jsx(Checkbox,{value:redTask,onChange:function onChange(){return setRedTask(!redTask);}}),label:\"Red Tasks\"}),/*#__PURE__*/_jsx(FormControlLabel,{control:/*#__PURE__*/_jsx(Checkbox,{value:greenTask,onChange:function onChange(){return setGreenTask(!greenTask);}}),label:\"Green Tasks\"}),/*#__PURE__*/_jsx(FormControlLabel,{control:/*#__PURE__*/_jsx(Checkbox,{value:yellowTask,onChange:function onChange(){return setYellowTask(!yellowTask);}}),label:\"Yellow Tasks\"})]}),/*#__PURE__*/_jsx(Typography,{component:\"h3\",children:\"All Matters Task's List\"}),/*#__PURE__*/_jsx(TableContainer,{children:/*#__PURE__*/_jsxs(Table,{children:[/*#__PURE__*/_jsx(TableHead,{children:/*#__PURE__*/_jsxs(TableRow,{children:[/*#__PURE__*/_jsx(TableCell,{}),/*#__PURE__*/_jsx(TableCell,{children:\"Matter Tasks\"}),/*#__PURE__*/_jsx(TableCell,{children:\"Matter Name\"}),/*#__PURE__*/_jsx(TableCell,{children:\"Last Action\"}),/*#__PURE__*/_jsx(TableCell,{children:\"Next Action\"}),/*#__PURE__*/_jsx(TableCell,{children:\"Assign To\"})]})}),/*#__PURE__*/_jsx(TableBody,{children:loading?null:tasks===null||tasks===void 0?void 0:tasks.map(function(data){return/*#__PURE__*/_jsxs(TableRow,{id:data.id,children:[/*#__PURE__*/_jsx(TableCell,{children:/*#__PURE__*/_jsx(Checkbox,{})}),/*#__PURE__*/_jsx(TableCell,{children:data.task_nature===\"urgent\"?/*#__PURE__*/_jsx(CircleIcon,{color:\"error\"}):/*#__PURE__*/_jsx(CircleIcon,{color:\"success\"})}),/*#__PURE__*/_jsx(TableCell,{children:data.matter}),/*#__PURE__*/_jsx(TableCell,{children:data.last_action?data.next_action:\"-\"}),/*#__PURE__*/_jsx(TableCell,{children:data.next_action?data.next_action:\"-\"}),/*#__PURE__*/_jsx(TableCell,{children:data.assign_to})]});})})]})})]});};export default MatterList;","map":{"version":3,"sources":["/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Matter/MatterList.jsx"],"names":["React","useEffect","useState","axios","Paper","Table","TableCell","TableContainer","TableHead","TableBody","TableRow","Typography","FormGroup","FormControlLabel","Checkbox","Box","containerClasses","CONFIG","CircleIcon","GetDate","MatterList","tasks","setTasks","status","setStatus","loading","setLoading","redTask","setRedTask","greenTask","setGreenTask","yellowTask","setYellowTask","myTask","setMyTask","FetchData","get","process","env","REACT_APP_API_URL","then","res","statusText","data","catch","err","map","id","task_nature","matter","last_action","next_action","assign_to"],"mappings":"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","sourcesContent":["/** @format */\n\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\nimport {\n  Paper,\n  Table,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableBody,\n  TableRow,\n  Typography,\n  FormGroup,\n  FormControlLabel,\n  Checkbox,\n  Box,\n  containerClasses,\n} from \"@mui/material\";\nimport { CONFIG } from \"../../api/MatterApi\";\nimport CircleIcon from \"@mui/icons-material/Circle\";\nimport { GetDate } from \"../../utils/ActionAlerts\";\n\nconst MatterList = () => {\n  const [tasks, setTasks] = useState([]);\n  const [status, setStatus] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n\n  const [redTask, setRedTask] = useState(false);\n  const [greenTask, setGreenTask] = useState(false);\n  const [yellowTask, setYellowTask] = useState(false);\n  const [myTask, setMyTask] = useState(true);\n\n  const FetchData = () => {\n    axios\n      .get(`${process.env.REACT_APP_API_URL}/api/tasks/`, CONFIG)\n      .then((res) => {\n        setLoading(false);\n        setStatus(res.statusText);\n        setTasks(res.data);\n      })\n      .catch((err) => {\n        setLoading(false);\n        setStatus(err.statusText);\n      });\n  };\n  useEffect(() => {\n    FetchData();\n  }, []);\n  return (\n    <Box component={Paper} p={2}>\n      <FormGroup aria-label=\"position\" row>\n        <FormControlLabel\n          control={\n            <Checkbox value={myTask} onChange={() => setMyTask(!myTask)} />\n          }\n          label=\"My Tasks\"\n        />\n        <FormControlLabel\n          control={\n            <Checkbox value={redTask} onChange={() => setRedTask(!redTask)} />\n          }\n          label=\"Red Tasks\"\n        />\n        <FormControlLabel\n          control={\n            <Checkbox\n              value={greenTask}\n              onChange={() => setGreenTask(!greenTask)}\n            />\n          }\n          label=\"Green Tasks\"\n        />\n        <FormControlLabel\n          control={\n            <Checkbox\n              value={yellowTask}\n              onChange={() => setYellowTask(!yellowTask)}\n            />\n          }\n          label=\"Yellow Tasks\"\n        />\n      </FormGroup>\n      <Typography component=\"h3\">All Matters Task's List</Typography>\n      <TableContainer>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell></TableCell>\n              <TableCell>Matter Tasks</TableCell>\n              <TableCell>Matter Name</TableCell>\n              <TableCell>Last Action</TableCell>\n              <TableCell>Next Action</TableCell>\n              <TableCell>Assign To</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {loading\n              ? null\n              : tasks?.map((data) => {\n                  return (\n                    <TableRow id={data.id}>\n                      <TableCell>\n                        <Checkbox />\n                      </TableCell>\n                      <TableCell>\n                        {data.task_nature === \"urgent\" ? (\n                          <CircleIcon color=\"error\" />\n                        ) : (\n                          <CircleIcon color=\"success\" />\n                        )}\n                      </TableCell>\n                      <TableCell>{data.matter}</TableCell>\n                      <TableCell>\n                        {data.last_action ? data.next_action : \"-\"}\n                      </TableCell>\n                      <TableCell>\n                        {data.next_action ? data.next_action : \"-\"}\n                      </TableCell>\n                      <TableCell>{data.assign_to}</TableCell>\n                    </TableRow>\n                  );\n                })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </Box>\n  );\n};\n\nexport default MatterList;\n"]},"metadata":{},"sourceType":"module"}