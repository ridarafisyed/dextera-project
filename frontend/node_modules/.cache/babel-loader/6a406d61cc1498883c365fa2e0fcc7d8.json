{"ast":null,"code":"/** @format */\nimport axios from \"axios\";\nimport { LOGIN_SUCCESS, LOGIN_FAIL, USER_LOADED_SUCCESS, USER_LOADED_FAIL, AUTHENTICATED_SUCCESS, AUTHENTICATED_FAIL, PASSWORD_RESET_SUCCESS, PASSWORD_RESET_FAIL, PASSWORD_RESET_CONFIRM_SUCCESS, PASSWORD_RESET_CONFIRM_FAIL, SIGNUP_SUCCESS, SIGNUP_FAIL, ACTIVATION_SUCCESS, ACTIVATION_FAIL, GOOGLE_AUTH_SUCCESS, GOOGLE_AUTH_FAIL, FACEBOOK_AUTH_SUCCESS, FACEBOOK_AUTH_FAIL, LOGOUT } from \"./types\";\nimport { create_profile, get_profile } from \"./profile\";\nexport const load_user = () => async dispatch => {\n  if (localStorage.getItem(\"access\")) {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${localStorage.getItem(\"access\")}`,\n        Accept: \"application/json\"\n      }\n    };\n\n    try {\n      const res = await axios.get(`${process.env.REACT_APP_API_URL}/auth/users/me/`, config);\n      dispatch({\n        type: USER_LOADED_SUCCESS,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: USER_LOADED_FAIL\n      });\n    }\n  } else {\n    dispatch({\n      type: USER_LOADED_FAIL\n    });\n  }\n};\nexport const checkAuthenticated = () => async dispatch => {\n  if (localStorage.getItem(\"access\")) {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    };\n    const body = JSON.stringify({\n      token: localStorage.getItem(\"access\")\n    });\n\n    try {\n      const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/jwt/verify/`, body, config);\n\n      if (res.data.code !== \"token_not_valid\") {\n        dispatch({\n          type: AUTHENTICATED_SUCCESS\n        });\n      } else {\n        dispatch({\n          type: AUTHENTICATED_FAIL\n        });\n      }\n    } catch (err) {\n      dispatch({\n        type: AUTHENTICATED_FAIL\n      });\n    }\n  } else {\n    dispatch({\n      type: AUTHENTICATED_FAIL\n    });\n  }\n};\nexport const login = (username, email, password) => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/jwt/create/`, body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(load_user());\n    dispatch(get_profile(username));\n  } catch (err) {\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n};\nexport const signup = (email, first_name, last_name, username, password, re_password, is_firm, is_client) => async dispatch => {\n  const is_lawyer = false;\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    first_name,\n    last_name,\n    username,\n    password,\n    re_password,\n    is_firm,\n    is_lawyer,\n    is_client\n  });\n\n  try {\n    const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/`, body, config);\n    dispatch({\n      type: SIGNUP_SUCCESS,\n      payload: res.data\n    });\n    dispatch(create_profile(username, email));\n  } catch (err) {\n    dispatch({\n      type: SIGNUP_FAIL\n    });\n  }\n};\nexport const verify = (uid, token) => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const body = JSON.stringify({\n    uid,\n    token\n  });\n\n  try {\n    await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/activation/`, body, config);\n    dispatch({\n      type: ACTIVATION_SUCCESS\n    });\n  } catch (err) {\n    dispatch({\n      type: ACTIVATION_FAIL\n    });\n  }\n};\nexport const reset_password = email => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const body = JSON.stringify({\n    email\n  });\n\n  try {\n    await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/reset_password/`, body, config);\n    dispatch({\n      type: PASSWORD_RESET_SUCCESS\n    });\n  } catch (err) {\n    dispatch({\n      type: PASSWORD_RESET_FAIL\n    });\n  }\n};\nexport const reset_password_confirm = (uid, token, new_password, re_new_password) => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const body = JSON.stringify({\n    uid,\n    token,\n    new_password,\n    re_new_password\n  });\n\n  try {\n    await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/reset_password_confirm/`, body, config);\n    dispatch({\n      type: PASSWORD_RESET_CONFIRM_SUCCESS\n    });\n  } catch (err) {\n    dispatch({\n      type: PASSWORD_RESET_CONFIRM_FAIL\n    });\n  }\n};\nexport const logout = () => dispatch => {\n  dispatch({\n    type: LOGOUT\n  });\n};\nexport const googleAuthenticate = (state, code) => async dispatch => {\n  if (state && code && !localStorage.getItem(\"access\")) {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n      }\n    };\n    const details = {\n      state: state,\n      code: code\n    };\n    const formBody = Object.keys(details).map(key => encodeURIComponent(key) + \"=\" + encodeURIComponent(details[key])).join(\"&\");\n\n    try {\n      const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/o/google-oauth2/?${formBody}`, config);\n      dispatch({\n        type: GOOGLE_AUTH_SUCCESS,\n        payload: res.data\n      });\n      dispatch(load_user());\n    } catch (err) {\n      dispatch({\n        type: GOOGLE_AUTH_FAIL\n      });\n    }\n  }\n};\nexport const facebookAuthenticate = (state, code) => async dispatch => {\n  if (state && code && !localStorage.getItem(\"access\")) {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n      }\n    };\n    const details = {\n      state: state,\n      code: code\n    };\n    const formBody = Object.keys(details).map(key => encodeURIComponent(key) + \"=\" + encodeURIComponent(details[key])).join(\"&\");\n\n    try {\n      const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/o/facebook/?${formBody}`, config);\n      dispatch({\n        type: FACEBOOK_AUTH_SUCCESS,\n        payload: res.data\n      });\n      dispatch(load_user());\n    } catch (err) {\n      dispatch({\n        type: FACEBOOK_AUTH_FAIL\n      });\n    }\n  }\n};","map":{"version":3,"sources":["/home/supersis03/Projects/Dextera/dextera-project/frontend/src/store/actions/auth.js"],"names":["axios","LOGIN_SUCCESS","LOGIN_FAIL","USER_LOADED_SUCCESS","USER_LOADED_FAIL","AUTHENTICATED_SUCCESS","AUTHENTICATED_FAIL","PASSWORD_RESET_SUCCESS","PASSWORD_RESET_FAIL","PASSWORD_RESET_CONFIRM_SUCCESS","PASSWORD_RESET_CONFIRM_FAIL","SIGNUP_SUCCESS","SIGNUP_FAIL","ACTIVATION_SUCCESS","ACTIVATION_FAIL","GOOGLE_AUTH_SUCCESS","GOOGLE_AUTH_FAIL","FACEBOOK_AUTH_SUCCESS","FACEBOOK_AUTH_FAIL","LOGOUT","create_profile","get_profile","load_user","dispatch","localStorage","getItem","config","headers","Authorization","Accept","res","get","process","env","REACT_APP_API_URL","type","payload","data","err","checkAuthenticated","body","JSON","stringify","token","post","code","login","username","email","password","signup","first_name","last_name","re_password","is_firm","is_client","is_lawyer","verify","uid","reset_password","reset_password_confirm","new_password","re_new_password","logout","googleAuthenticate","state","details","formBody","Object","keys","map","key","encodeURIComponent","join","facebookAuthenticate"],"mappings":"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","sourcesContent":["/** @format */\n\nimport axios from \"axios\";\nimport {\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  USER_LOADED_SUCCESS,\n  USER_LOADED_FAIL,\n  AUTHENTICATED_SUCCESS,\n  AUTHENTICATED_FAIL,\n  PASSWORD_RESET_SUCCESS,\n  PASSWORD_RESET_FAIL,\n  PASSWORD_RESET_CONFIRM_SUCCESS,\n  PASSWORD_RESET_CONFIRM_FAIL,\n  SIGNUP_SUCCESS,\n  SIGNUP_FAIL,\n  ACTIVATION_SUCCESS,\n  ACTIVATION_FAIL,\n  GOOGLE_AUTH_SUCCESS,\n  GOOGLE_AUTH_FAIL,\n  FACEBOOK_AUTH_SUCCESS,\n  FACEBOOK_AUTH_FAIL,\n  LOGOUT,\n} from \"./types\";\nimport { create_profile, get_profile } from \"./profile\";\n\nexport const load_user = () => async (dispatch) => {\n  if (localStorage.getItem(\"access\")) {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${localStorage.getItem(\"access\")}`,\n        Accept: \"application/json\",\n      },\n    };\n\n    try {\n      const res = await axios.get(\n        `${process.env.REACT_APP_API_URL}/auth/users/me/`,\n        config,\n      );\n\n      dispatch({\n        type: USER_LOADED_SUCCESS,\n        payload: res.data,\n      });\n    } catch (err) {\n      dispatch({\n        type: USER_LOADED_FAIL,\n      });\n    }\n  } else {\n    dispatch({\n      type: USER_LOADED_FAIL,\n    });\n  }\n};\n\nexport const checkAuthenticated = () => async (dispatch) => {\n  if (localStorage.getItem(\"access\")) {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n    };\n\n    const body = JSON.stringify({ token: localStorage.getItem(\"access\") });\n\n    try {\n      const res = await axios.post(\n        `${process.env.REACT_APP_API_URL}/auth/jwt/verify/`,\n        body,\n        config,\n      );\n\n      if (res.data.code !== \"token_not_valid\") {\n        dispatch({\n          type: AUTHENTICATED_SUCCESS,\n        });\n      } else {\n        dispatch({\n          type: AUTHENTICATED_FAIL,\n        });\n      }\n    } catch (err) {\n      dispatch({\n        type: AUTHENTICATED_FAIL,\n      });\n    }\n  } else {\n    dispatch({\n      type: AUTHENTICATED_FAIL,\n    });\n  }\n};\n\nexport const login = (username, email, password) => async (dispatch) => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n\n  const body = JSON.stringify({ email, password });\n\n  try {\n    const res = await axios.post(\n      `${process.env.REACT_APP_API_URL}/auth/jwt/create/`,\n      body,\n      config,\n    );\n\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data,\n    });\n    dispatch(load_user());\n    dispatch(get_profile(username));\n  } catch (err) {\n    dispatch({\n      type: LOGIN_FAIL,\n    });\n  }\n};\n\nexport const signup =\n  (\n    email,\n    first_name,\n    last_name,\n    username,\n    password,\n    re_password,\n    is_firm,\n    is_client,\n  ) =>\n  async (dispatch) => {\n    const is_lawyer = false;\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    };\n\n    const body = JSON.stringify({\n      email,\n      first_name,\n      last_name,\n      username,\n      password,\n      re_password,\n      is_firm,\n      is_lawyer,\n      is_client,\n    });\n\n    try {\n      const res = await axios.post(\n        `${process.env.REACT_APP_API_URL}/auth/users/`,\n        body,\n        config,\n      );\n      dispatch({\n        type: SIGNUP_SUCCESS,\n        payload: res.data,\n      });\n      dispatch(create_profile(username, email));\n    } catch (err) {\n      dispatch({\n        type: SIGNUP_FAIL,\n      });\n    }\n  };\n\nexport const verify = (uid, token) => async (dispatch) => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n\n  const body = JSON.stringify({ uid, token });\n\n  try {\n    await axios.post(\n      `${process.env.REACT_APP_API_URL}/auth/users/activation/`,\n      body,\n      config,\n    );\n\n    dispatch({\n      type: ACTIVATION_SUCCESS,\n    });\n  } catch (err) {\n    dispatch({\n      type: ACTIVATION_FAIL,\n    });\n  }\n};\n\nexport const reset_password = (email) => async (dispatch) => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n\n  const body = JSON.stringify({ email });\n\n  try {\n    await axios.post(\n      `${process.env.REACT_APP_API_URL}/auth/users/reset_password/`,\n      body,\n      config,\n    );\n\n    dispatch({\n      type: PASSWORD_RESET_SUCCESS,\n    });\n  } catch (err) {\n    dispatch({\n      type: PASSWORD_RESET_FAIL,\n    });\n  }\n};\n\nexport const reset_password_confirm =\n  (uid, token, new_password, re_new_password) => async (dispatch) => {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    };\n\n    const body = JSON.stringify({ uid, token, new_password, re_new_password });\n\n    try {\n      await axios.post(\n        `${process.env.REACT_APP_API_URL}/auth/users/reset_password_confirm/`,\n        body,\n        config,\n      );\n\n      dispatch({\n        type: PASSWORD_RESET_CONFIRM_SUCCESS,\n      });\n    } catch (err) {\n      dispatch({\n        type: PASSWORD_RESET_CONFIRM_FAIL,\n      });\n    }\n  };\n\nexport const logout = () => (dispatch) => {\n  dispatch({\n    type: LOGOUT,\n  });\n};\n\nexport const googleAuthenticate = (state, code) => async (dispatch) => {\n  if (state && code && !localStorage.getItem(\"access\")) {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n      },\n    };\n\n    const details = {\n      state: state,\n      code: code,\n    };\n\n    const formBody = Object.keys(details)\n      .map(\n        (key) =>\n          encodeURIComponent(key) + \"=\" + encodeURIComponent(details[key]),\n      )\n      .join(\"&\");\n\n    try {\n      const res = await axios.post(\n        `${process.env.REACT_APP_API_URL}/auth/o/google-oauth2/?${formBody}`,\n        config,\n      );\n\n      dispatch({\n        type: GOOGLE_AUTH_SUCCESS,\n        payload: res.data,\n      });\n\n      dispatch(load_user());\n    } catch (err) {\n      dispatch({\n        type: GOOGLE_AUTH_FAIL,\n      });\n    }\n  }\n};\n\nexport const facebookAuthenticate = (state, code) => async (dispatch) => {\n  if (state && code && !localStorage.getItem(\"access\")) {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n      },\n    };\n\n    const details = {\n      state: state,\n      code: code,\n    };\n\n    const formBody = Object.keys(details)\n      .map(\n        (key) =>\n          encodeURIComponent(key) + \"=\" + encodeURIComponent(details[key]),\n      )\n      .join(\"&\");\n\n    try {\n      const res = await axios.post(\n        `${process.env.REACT_APP_API_URL}/auth/o/facebook/?${formBody}`,\n        config,\n      );\n\n      dispatch({\n        type: FACEBOOK_AUTH_SUCCESS,\n        payload: res.data,\n      });\n\n      dispatch(load_user());\n    } catch (err) {\n      dispatch({\n        type: FACEBOOK_AUTH_FAIL,\n      });\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"module"}