{"ast":null,"code":"import _slicedToArray from\"/home/supersis03/Projects/Dextera/dextera-project/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";/** @format */import React,{useState}from\"react\";import{Paper,Table,TableCell,TableContainer,TableHead,TableRow,Typography,FormGroup,FormControlLabel,Checkbox,Box}from\"@mui/material\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var MatterList=function MatterList(){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),redTask=_useState2[0],setRedTask=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),greenTask=_useState4[0],setGreenTask=_useState4[1];var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),yellowTask=_useState6[0],setYellowTask=_useState6[1];var _useState7=useState(true),_useState8=_slicedToArray(_useState7,2),myTask=_useState8[0],setMyTask=_useState8[1];var _useState9=useState(null),_useState10=_slicedToArray(_useState9,2),matters=_useState10[0],setMatters=_useState10[1];// useEffect(() => {\n//   const config = {\n//     headers: {\n//       \"Content-Type\": \"application/json\",\n//       Accept: \"application/json\",\n//     },\n//   };\n//   const res = axios.get(\n//     `${process.env.REACT_APP_API_URL}/api/matter`,\n//     config,\n//   );\n//   setMatters(res.data);\n// }, []);\nreturn/*#__PURE__*/_jsxs(Box,{component:Paper,p:2,children:[/*#__PURE__*/_jsxs(FormGroup,{\"aria-label\":\"position\",row:true,children:[/*#__PURE__*/_jsx(FormControlLabel,{control:/*#__PURE__*/_jsx(Checkbox,{value:myTask,onChange:function onChange(){return setMyTask(!myTask);}}),label:\"My Tasks\"}),/*#__PURE__*/_jsx(FormControlLabel,{control:/*#__PURE__*/_jsx(Checkbox,{value:redTask,onChange:function onChange(){return setRedTask(!redTask);}}),label:\"Red Tasks\"}),/*#__PURE__*/_jsx(FormControlLabel,{control:/*#__PURE__*/_jsx(Checkbox,{value:greenTask,onChange:function onChange(){return setGreenTask(!greenTask);}}),label:\"Green Tasks\"}),/*#__PURE__*/_jsx(FormControlLabel,{control:/*#__PURE__*/_jsx(Checkbox,{value:yellowTask,onChange:function onChange(){return setYellowTask(!yellowTask);}}),label:\"Yellow Tasks\"})]}),/*#__PURE__*/_jsx(Typography,{component:\"h3\",children:\"All Matters Task's List\"}),/*#__PURE__*/_jsx(TableContainer,{children:/*#__PURE__*/_jsx(Table,{children:/*#__PURE__*/_jsxs(TableHead,{children:[/*#__PURE__*/_jsxs(TableRow,{children:[/*#__PURE__*/_jsx(TableCell,{children:\"Matter Tasks\"}),/*#__PURE__*/_jsx(TableCell,{children:\"Matter Name\"}),/*#__PURE__*/_jsx(TableCell,{children:\"Last Action\"}),/*#__PURE__*/_jsx(TableCell,{children:\"Next Action\"}),/*#__PURE__*/_jsx(TableCell,{children:\"Assign To\"})]}),matters===null||matters===void 0?void 0:matters.map(function(matter){/*#__PURE__*/_jsxs(TableRow,{id:matter.id,children:[/*#__PURE__*/_jsx(TableCell,{children:matter.type}),/*#__PURE__*/_jsx(TableCell,{children:matter.name}),/*#__PURE__*/_jsx(TableCell,{children:matter.lastAction}),/*#__PURE__*/_jsx(TableCell,{children:matter.nextAction}),/*#__PURE__*/_jsx(TableCell,{children:matter.assign_to})]});})]})})})]});};export default MatterList;","map":{"version":3,"sources":["/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Matter/MatterList.jsx"],"names":["React","useState","Paper","Table","TableCell","TableContainer","TableHead","TableRow","Typography","FormGroup","FormControlLabel","Checkbox","Box","MatterList","redTask","setRedTask","greenTask","setGreenTask","yellowTask","setYellowTask","myTask","setMyTask","matters","setMatters","map","matter","id","type","name","lastAction","nextAction","assign_to"],"mappings":"iLAAA,cAEA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CAEA,OACEC,KADF,CAEEC,KAFF,CAGEC,SAHF,CAIEC,cAJF,CAKEC,SALF,CAMEC,QANF,CAOEC,UAPF,CAQEC,SARF,CASEC,gBATF,CAUEC,QAVF,CAWEC,GAXF,KAYO,eAZP,C,wFAcA,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,EAAM,eACOZ,QAAQ,CAAC,KAAD,CADf,wCAChBa,OADgB,eACPC,UADO,8BAEWd,QAAQ,CAAC,KAAD,CAFnB,yCAEhBe,SAFgB,eAELC,YAFK,8BAGahB,QAAQ,CAAC,KAAD,CAHrB,yCAGhBiB,UAHgB,eAGJC,aAHI,8BAIKlB,QAAQ,CAAC,IAAD,CAJb,yCAIhBmB,MAJgB,eAIRC,SAJQ,8BAKOpB,QAAQ,CAAC,IAAD,CALf,0CAKhBqB,OALgB,gBAKPC,UALO,gBAOvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBACE,MAAC,GAAD,EAAK,SAAS,CAAErB,KAAhB,CAAuB,CAAC,CAAE,CAA1B,wBACE,MAAC,SAAD,EAAW,aAAW,UAAtB,CAAiC,GAAG,KAApC,wBACE,KAAC,gBAAD,EACE,OAAO,cACL,KAAC,QAAD,EAAU,KAAK,CAAEkB,MAAjB,CAAyB,QAAQ,CAAE,0BAAMC,CAAAA,SAAS,CAAC,CAACD,MAAF,CAAf,EAAnC,EAFJ,CAIE,KAAK,CAAC,UAJR,EADF,cAOE,KAAC,gBAAD,EACE,OAAO,cACL,KAAC,QAAD,EAAU,KAAK,CAAEN,OAAjB,CAA0B,QAAQ,CAAE,0BAAMC,CAAAA,UAAU,CAAC,CAACD,OAAF,CAAhB,EAApC,EAFJ,CAIE,KAAK,CAAC,WAJR,EAPF,cAaE,KAAC,gBAAD,EACE,OAAO,cACL,KAAC,QAAD,EACE,KAAK,CAAEE,SADT,CAEE,QAAQ,CAAE,0BAAMC,CAAAA,YAAY,CAAC,CAACD,SAAF,CAAlB,EAFZ,EAFJ,CAOE,KAAK,CAAC,aAPR,EAbF,cAsBE,KAAC,gBAAD,EACE,OAAO,cACL,KAAC,QAAD,EACE,KAAK,CAAEE,UADT,CAEE,QAAQ,CAAE,0BAAMC,CAAAA,aAAa,CAAC,CAACD,UAAF,CAAnB,EAFZ,EAFJ,CAOE,KAAK,CAAC,cAPR,EAtBF,GADF,cAiCE,KAAC,UAAD,EAAY,SAAS,CAAC,IAAtB,qCAjCF,cAkCE,KAAC,cAAD,wBACE,KAAC,KAAD,wBACE,MAAC,SAAD,yBACE,MAAC,QAAD,yBACE,KAAC,SAAD,2BADF,cAEE,KAAC,SAAD,0BAFF,cAGE,KAAC,SAAD,0BAHF,cAIE,KAAC,SAAD,0BAJF,cAKE,KAAC,SAAD,wBALF,GADF,CAQGI,OARH,SAQGA,OARH,iBAQGA,OAAO,CAAEE,GAAT,CAAa,SAACC,MAAD,CAAY,CACxB,mBAAC,QAAD,EAAU,EAAE,CAAEA,MAAM,CAACC,EAArB,wBACE,KAAC,SAAD,WAAYD,MAAM,CAACE,IAAnB,EADF,cAEE,KAAC,SAAD,WAAYF,MAAM,CAACG,IAAnB,EAFF,cAGE,KAAC,SAAD,WAAYH,MAAM,CAACI,UAAnB,EAHF,cAIE,KAAC,SAAD,WAAYJ,MAAM,CAACK,UAAnB,EAJF,cAKE,KAAC,SAAD,WAAYL,MAAM,CAACM,SAAnB,EALF,IAOD,CARA,CARH,GADF,EADF,EAlCF,GADF,CA2DD,CA/ED,CAiFA,cAAelB,CAAAA,UAAf","sourcesContent":["/** @format */\n\nimport React, { useState } from \"react\";\n\nimport {\n  Paper,\n  Table,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Typography,\n  FormGroup,\n  FormControlLabel,\n  Checkbox,\n  Box,\n} from \"@mui/material\";\n\nconst MatterList = () => {\n  const [redTask, setRedTask] = useState(false);\n  const [greenTask, setGreenTask] = useState(false);\n  const [yellowTask, setYellowTask] = useState(false);\n  const [myTask, setMyTask] = useState(true);\n  const [matters, setMatters] = useState(null);\n\n  // useEffect(() => {\n  //   const config = {\n  //     headers: {\n  //       \"Content-Type\": \"application/json\",\n  //       Accept: \"application/json\",\n  //     },\n  //   };\n  //   const res = axios.get(\n  //     `${process.env.REACT_APP_API_URL}/api/matter`,\n  //     config,\n  //   );\n  //   setMatters(res.data);\n  // }, []);\n  return (\n    <Box component={Paper} p={2}>\n      <FormGroup aria-label=\"position\" row>\n        <FormControlLabel\n          control={\n            <Checkbox value={myTask} onChange={() => setMyTask(!myTask)} />\n          }\n          label=\"My Tasks\"\n        />\n        <FormControlLabel\n          control={\n            <Checkbox value={redTask} onChange={() => setRedTask(!redTask)} />\n          }\n          label=\"Red Tasks\"\n        />\n        <FormControlLabel\n          control={\n            <Checkbox\n              value={greenTask}\n              onChange={() => setGreenTask(!greenTask)}\n            />\n          }\n          label=\"Green Tasks\"\n        />\n        <FormControlLabel\n          control={\n            <Checkbox\n              value={yellowTask}\n              onChange={() => setYellowTask(!yellowTask)}\n            />\n          }\n          label=\"Yellow Tasks\"\n        />\n      </FormGroup>\n      <Typography component=\"h3\">All Matters Task's List</Typography>\n      <TableContainer>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>Matter Tasks</TableCell>\n              <TableCell>Matter Name</TableCell>\n              <TableCell>Last Action</TableCell>\n              <TableCell>Next Action</TableCell>\n              <TableCell>Assign To</TableCell>\n            </TableRow>\n            {matters?.map((matter) => {\n              <TableRow id={matter.id}>\n                <TableCell>{matter.type}</TableCell>\n                <TableCell>{matter.name}</TableCell>\n                <TableCell>{matter.lastAction}</TableCell>\n                <TableCell>{matter.nextAction}</TableCell>\n                <TableCell>{matter.assign_to}</TableCell>\n              </TableRow>;\n            })}\n          </TableHead>\n        </Table>\n      </TableContainer>\n    </Box>\n  );\n};\n\nexport default MatterList;\n"]},"metadata":{},"sourceType":"module"}