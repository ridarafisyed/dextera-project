[{"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/index.js":"1","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/hocs/Layout.js":"2","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/context/User/index.js":"3","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/hocs/Theme.js":"4","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Sidebar/Sidebar.jsx":"5","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Navbars/Navbar.jsx":"6","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/context/User/reducer.js":"7","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/context/useToggle.jsx":"8","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/styles/styles.jsx":"9","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Matter/NewMatter.jsx":"10","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Matter/MatterDetail.jsx":"11","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/containers/Matters/MatterDashboard.jsx":"12","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Matter/Calendar.jsx":"13","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/containers/Matters/Matters.jsx":"14","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Matter/Filters.jsx":"15","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Matter/Cards.jsx":"16","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Matter/MatterList.jsx":"17","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Matter/MatterListLong.jsx":"18","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Matter/MatterCards.jsx":"19","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/App.js":"20","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/containers/Home.js":"21","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/utils/PrivateRoute.js":"22","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Profile/Profile.js":"23","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/containers/Auth/Activate.js":"24","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/containers/Auth/Login.js":"25","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/containers/Auth/ResetPassword.js":"26","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/containers/Auth/ResetPasswordConfirm.js":"27","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/containers/Auth/Signup.js":"28","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/containers/Dashboards/DashBoard.js":"29","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/containers/Dashboards/UserRoles/ClientDashboard.jsx":"30","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/containers/Dashboards/UserRoles/AdminDashboard.jsx":"31","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/containers/Dashboards/UserRoles/LawyerDashboard.jsx":"32","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/containers/Dashboards/UserRoles/FirmDashboard.jsx":"33","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Dashboard/ProgressBar.jsx":"34","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Dashboard/Tasks.jsx":"35","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Dashboard/Calender.jsx":"36","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Dashboard/Cards.jsx":"37","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/data/data.jsx":"38","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/store/actions/auth.js":"39","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/store/actions/types.js":"40","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/store/actions/profile.js":"41","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/store/store.js":"42","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/store/reducers/index.js":"43","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/store/reducers/auth.js":"44","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/containers/Invoice/Invoice.jsx":"45","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Invoice/InvoiceList.jsx":"46","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Invoice/Filters.jsx":"47","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Invoice/CreateInvoice.jsx":"48","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Navbars/NavbarSec.jsx":"49","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Invoice/Payment.jsx":"50","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Category/ManageCategory.jsx":"51","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Category/Category.jsx":"52","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Category/SubCategory.jsx":"53","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Category/Classification.jsx":"54","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/utils/ActionAlerts.js":"55","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/utils/ApiController.js":"56","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/User/CreateUser.jsx":"57","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Legder/Time.jsx":"58","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Legder/LedgerTImeList.jsx":"59","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Legder/LedgerActivity.jsx":"60","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Legder/LegderDashbard.jsx":"61","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Legder/LedgerCards.jsx":"62","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Legder/Fillters.jsx":"63","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Tasks/CreateTask.jsx":"64","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Tasks/ViewTasks.jsx":"65","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/api/MatterApi.js":"66","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Legder/LedgerDoc.jsx":"67"},{"size":214,"mtime":1638446938932,"results":"68","hashOfConfig":"69"},{"size":1443,"mtime":1639067613732,"results":"70","hashOfConfig":"69"},{"size":431,"mtime":1637560398977,"results":"71","hashOfConfig":"69"},{"size":377,"mtime":1636440502354,"results":"72","hashOfConfig":"69"},{"size":4666,"mtime":1639497965213,"results":"73","hashOfConfig":"69"},{"size":3383,"mtime":1639026692464,"results":"74","hashOfConfig":"69"},{"size":276,"mtime":1637560343515,"results":"75","hashOfConfig":"69"},{"size":449,"mtime":1638367042591,"results":"76","hashOfConfig":"69"},{"size":2168,"mtime":1639125075738,"results":"77","hashOfConfig":"69"},{"size":11968,"mtime":1639504504237,"results":"78","hashOfConfig":"69"},{"size":6086,"mtime":1639488645340,"results":"79","hashOfConfig":"69"},{"size":631,"mtime":1638446275072,"results":"80","hashOfConfig":"69"},{"size":1212,"mtime":1639494724335,"results":"81","hashOfConfig":"69"},{"size":687,"mtime":1639026628103,"results":"82","hashOfConfig":"69"},{"size":4066,"mtime":1638446047108,"results":"83","hashOfConfig":"69"},{"size":2094,"mtime":1639561652550,"results":"84","hashOfConfig":"69"},{"size":3741,"mtime":1639560606049,"results":"85","hashOfConfig":"69"},{"size":4695,"mtime":1639561610878,"results":"86","hashOfConfig":"69"},{"size":4296,"mtime":1638618151732,"results":"87","hashOfConfig":"69"},{"size":3935,"mtime":1639551888263,"results":"88","hashOfConfig":"69"},{"size":740,"mtime":1638446649748,"results":"89","hashOfConfig":"69"},{"size":463,"mtime":1636993968666,"results":"90","hashOfConfig":"69"},{"size":16754,"mtime":1639285819613,"results":"91","hashOfConfig":"69"},{"size":1154,"mtime":1638449245127,"results":"92","hashOfConfig":"69"},{"size":4621,"mtime":1638449350138,"results":"93","hashOfConfig":"69"},{"size":3104,"mtime":1638449370642,"results":"94","hashOfConfig":"69"},{"size":3386,"mtime":1638449371454,"results":"95","hashOfConfig":"69"},{"size":7122,"mtime":1638449362722,"results":"96","hashOfConfig":"69"},{"size":1269,"mtime":1638446773047,"results":"97","hashOfConfig":"69"},{"size":1338,"mtime":1638447365711,"results":"98","hashOfConfig":"69"},{"size":6005,"mtime":1638447115464,"results":"99","hashOfConfig":"69"},{"size":6006,"mtime":1638447337226,"results":"100","hashOfConfig":"69"},{"size":1660,"mtime":1639495392178,"results":"101","hashOfConfig":"69"},{"size":564,"mtime":1638444685113,"results":"102","hashOfConfig":"69"},{"size":2380,"mtime":1639495720771,"results":"103","hashOfConfig":"69"},{"size":833,"mtime":1639495704995,"results":"104","hashOfConfig":"69"},{"size":2099,"mtime":1639495768657,"results":"105","hashOfConfig":"69"},{"size":272,"mtime":1639495189671,"results":"106","hashOfConfig":"69"},{"size":6785,"mtime":1637997850711,"results":"107","hashOfConfig":"69"},{"size":1435,"mtime":1637672498618,"results":"108","hashOfConfig":"69"},{"size":2734,"mtime":1639038887437,"results":"109","hashOfConfig":"69"},{"size":400,"mtime":1638449247211,"results":"110","hashOfConfig":"69"},{"size":115,"mtime":1636871801359,"results":"111","hashOfConfig":"69"},{"size":2685,"mtime":1638449250535,"results":"112","hashOfConfig":"69"},{"size":243,"mtime":1638690803067,"results":"113","hashOfConfig":"69"},{"size":2342,"mtime":1638692842104,"results":"114","hashOfConfig":"69"},{"size":4240,"mtime":1639037130155,"results":"115","hashOfConfig":"69"},{"size":12590,"mtime":1639555247842,"results":"116","hashOfConfig":"69"},{"size":3052,"mtime":1639026719824,"results":"117","hashOfConfig":"69"},{"size":9398,"mtime":1639026458023,"results":"118","hashOfConfig":"69"},{"size":921,"mtime":1639488431925,"results":"119","hashOfConfig":"69"},{"size":4318,"mtime":1639504469601,"results":"120","hashOfConfig":"69"},{"size":4060,"mtime":1639504455845,"results":"121","hashOfConfig":"69"},{"size":4235,"mtime":1639504468825,"results":"122","hashOfConfig":"69"},{"size":999,"mtime":1639549888810,"results":"123","hashOfConfig":"69"},{"size":15,"mtime":1639033883915,"results":"124","hashOfConfig":"69"},{"size":9728,"mtime":1639488671069,"results":"125","hashOfConfig":"69"},{"size":9506,"mtime":1639551270676,"results":"126","hashOfConfig":"69"},{"size":3407,"mtime":1639555113017,"results":"127","hashOfConfig":"69"},{"size":3100,"mtime":1639558291504,"results":"128","hashOfConfig":"69"},{"size":1119,"mtime":1639554951606,"results":"129","hashOfConfig":"69"},{"size":7573,"mtime":1639545046996,"results":"130","hashOfConfig":"69"},{"size":3225,"mtime":1639115469392,"results":"131","hashOfConfig":"69"},{"size":7594,"mtime":1639544456771,"results":"132","hashOfConfig":"69"},{"size":146,"mtime":1639287010273,"results":"133","hashOfConfig":"69"},{"size":1162,"mtime":1639498013513,"results":"134","hashOfConfig":"69"},{"size":2259,"mtime":1639554943458,"results":"135","hashOfConfig":"69"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},"yzhj4x",{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"138"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"172","messages":"173","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"138"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"138"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"138"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"138"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"138"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"138"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"138"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"138"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244","usedDeprecatedRules":"138"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"138"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"138"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253","usedDeprecatedRules":"138"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"138"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"138"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"268","usedDeprecatedRules":"138"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"271","usedDeprecatedRules":"138"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"274","messages":"275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"280","usedDeprecatedRules":"138"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"283","usedDeprecatedRules":"138"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/index.js",[],["290","291"],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/hocs/Layout.js",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/context/User/index.js",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/hocs/Theme.js",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Sidebar/Sidebar.jsx",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Navbars/Navbar.jsx",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/context/User/reducer.js",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/context/useToggle.jsx",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/styles/styles.jsx",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Matter/NewMatter.jsx",["292","293"],"/** @format */\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { TextField, Box, Grid, Button, Typography } from \"@mui/material\";\nimport SaveIcon from \"@mui/icons-material/Save\";\n\nimport { LocalizationProvider, DateRangePicker, DatePicker } from \"@mui/lab\";\nimport AdapterDateFns from \"@mui/lab/AdapterDateFns\";\n\nimport { CreateMatter, CONFIG } from \"../../api/MatterApi\";\n\nimport { ActionAlerts, TotalDays, GetDate } from \"../../utils/ActionAlerts\";\n\nconst NewMatter = () => {\n  // const matter_number = Math.floor(Math.random() * 10000000);\n  const mask = \"____-__-__\";\n  const matter_number = 23568;\n  const [openDate, setOpenDate] = useState(new Date(\"2021-12-01T21:11:54\"));\n  const [whenDate, setWhenDate] = useState(new Date(\"2021-12-01T21:11:54\"));\n  const [closeDate, setCloseDate] = useState(new Date(\"2021-12-01T21:11:54\"));\n  const [totalDays, setTotalDays] = useState(0);\n  const [matterData, setMatterData] = useState({\n    contact: 0,\n    matter_name: \"\",\n    matter_type: \"\",\n    matter_source: \"\",\n    matter_status: \"\",\n    assign_to: 0,\n    assign_by: 0,\n    billing_rate: 0,\n    alerts: \"\",\n\n    jurisdiction: \"\",\n    status_limitaion: null,\n    opposing_counsel: \"\",\n    where: \"\",\n    involved: \"\",\n    witnesses: \"\",\n    narrative: \"\",\n  });\n\n  const {\n    contact,\n    matter_name,\n    matter_type,\n    matter_source,\n    matter_status,\n    assign_to,\n    assign_by,\n    billing_rate,\n    alerts,\n\n    jurisdiction,\n    status_limitaion,\n    opposing_counsel,\n    where,\n    involved,\n    witnesses,\n    narrative,\n  } = matterData;\n\n  const onChange = (e) =>\n    setMatterData({ ...matterData, [e.target.name]: e.target.value });\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    let open_date = GetDate(openDate);\n    let close_date = GetDate(closeDate);\n    let when = GetDate(whenDate);\n    let total_days = totalDays;\n    const body = JSON.stringify({\n      contact,\n      matter_name,\n      matter_type,\n      matter_source,\n      matter_status,\n      assign_to,\n      assign_by,\n      billing_rate,\n      alerts,\n      open_date,\n      close_date,\n      total_days,\n      jurisdiction,\n      status_limitaion,\n      opposing_counsel,\n      where,\n      when,\n      involved,\n      witnesses,\n      narrative,\n    });\n    axios\n      .post(`${process.env.REACT_APP_API_URL}/api/new-matter/`, body, CONFIG)\n      .then((res) => {\n        <ActionAlerts value={{ status: res.statusText, message: \"Success\" }} />;\n      })\n      .catch((err) => {\n        <ActionAlerts value={{ status: err.statusText, message: \"Failed\" }} />;\n      });\n    console.log(body);\n  };\n  useEffect(() => {\n    let days = TotalDays(openDate, closeDate);\n    setTotalDays(days);\n  }, [openDate, closeDate]);\n\n  return (\n    <Fragment>\n      <Box\n        component=\"form\"\n        Validate\n        sx={{\n          \"& .MuiTextField-root\": { m: 1 },\n        }}\n        onSubmit={(e) => onSubmit(e)}\n      >\n        <Typography component=\"h3\" variant=\"h4\">\n          Create New Matter\n        </Typography>\n        <Grid container spacing={2}>\n          <Grid item xs={8}>\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"contact\"\n              label=\"contact\"\n              type=\"number\"\n              min=\"0\"\n              value={contact}\n              onChange={(e) => onChange(e)}\n              id=\"contact\"\n              sx={{\n                width: \"97%\",\n              }}\n            />\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"matter_number\"\n              label=\"matter_number\"\n              type=\"text\"\n              value={matter_number}\n              // onChange={(e) => onChange(e)}\n              id=\"matter_number\"\n              disabled\n              sx={{\n                width: \"48%\",\n              }}\n            />\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"matter_name\"\n              label=\"matter_name\"\n              type=\"text\"\n              value={matter_name}\n              onChange={(e) => onChange(e)}\n              id=\"matter_name\"\n              sx={{\n                width: \"47%\",\n              }}\n            />\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"alerts\"\n              label=\"alerts\"\n              type=\"text\"\n              value={alerts}\n              onChange={(e) => onChange(e)}\n              id=\"alerts\"\n              autoComplete=\"alerts\"\n              sx={{\n                width: \"97%\",\n              }}\n            />\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"matter_type\"\n              label=\"matter_type\"\n              type=\"text\"\n              value={matter_type}\n              onChange={(e) => onChange(e)}\n              id=\"matter_type\"\n              sx={{\n                width: \"48%\",\n              }}\n            />\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"matter_source\"\n              label=\"matter_source\"\n              type=\"text\"\n              value={matter_source}\n              onChange={(e) => onChange(e)}\n              id=\"matter_source\"\n              sx={{\n                width: \"47%\",\n              }}\n            />\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"matter_status\"\n              label=\"matter_status\"\n              type=\"text\"\n              value={matter_status}\n              onChange={(e) => onChange(e)}\n              id=\"matter_status\"\n              sx={{\n                width: \"48%\",\n              }}\n            />\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"assign_to\"\n              label=\"assign_to\"\n              type=\"number\"\n              value={assign_to}\n              onChange={(e) => onChange(e)}\n              id=\"assign_to\"\n              sx={{\n                width: \"47%\",\n              }}\n            />\n          </Grid>\n          <Grid item xs={4}>\n            <TextField\n              size=\"small\"\n              fullWidth\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"billing_rate\"\n              label=\"billing_rate\"\n              step=\"0.01\"\n              type=\"number\"\n              value={billing_rate}\n              onChange={(e) => onChange(e)}\n              id=\"billing_rate\"\n            />\n            <LocalizationProvider dateAdapter={AdapterDateFns}>\n              <DatePicker\n                inputFormat=\"yyyy-MM-dd\"\n                mask={mask}\n                label=\"Open Date\"\n                value={openDate}\n                name=\"open\"\n                id=\"open\"\n                onChange={(e) => setOpenDate(e)}\n                renderInput={(params) => (\n                  <TextField fullWidth size=\"small\" {...params} />\n                )}\n              />\n            </LocalizationProvider>\n            <LocalizationProvider dateAdapter={AdapterDateFns}>\n              <DatePicker\n                inputFormat=\"yyyy-MM-dd\"\n                mask={mask}\n                label=\"Close Date\"\n                value={closeDate}\n                name=\"closed\"\n                id=\"closed\"\n                onChange={(e) => setCloseDate(e)}\n                renderInput={(params) => (\n                  <TextField fullWidth size=\"small\" {...params} />\n                )}\n              />\n            </LocalizationProvider>\n            <TextField\n              size=\"small\"\n              fullWidth\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"total_days\"\n              label=\"total_days\"\n              type=\"number\"\n              value={totalDays}\n              onChange={(e) => setTotalDays(TotalDays(openDate, closeDate))}\n              id=\"total_days\"\n              disabled\n            />\n          </Grid>\n\n          <Grid item xs={4}>\n            <br />\n            <Typography component=\"h5\" variant=\"h6\">\n              Legal Concerns\n            </Typography>\n            <br />\n            <TextField\n              size=\"small\"\n              fullWidth\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"jurisdiction\"\n              label=\"jurisdiction\"\n              type=\"text\"\n              value={jurisdiction}\n              onChange={(e) => onChange(e)}\n              id=\"jurisdiction\"\n            />\n            <TextField\n              size=\"small\"\n              fullWidth\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"status_limitaion\"\n              label=\"status_limitaion\"\n              type=\"text\"\n              value={status_limitaion}\n              onChange={(e) => onChange(e)}\n              id=\"status_limitaion\"\n            />\n            <TextField\n              size=\"small\"\n              fullWidth\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"opposing_counsel\"\n              label=\"opposing_counsel\"\n              type=\"text\"\n              value={opposing_counsel}\n              onChange={(e) => onChange(e)}\n              id=\"opposing_counsel\"\n            />\n          </Grid>\n          <Grid item xs={4}>\n            <Typography component=\"h5\" variant=\"h6\" sx={{ fontSize: \"1rem\" }}>\n              Event Detail\n            </Typography>\n            <TextField\n              size=\"small\"\n              fullWidth\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"where\"\n              label=\"where\"\n              type=\"text\"\n              value={where}\n              onChange={(e) => onChange(e)}\n              id=\"where\"\n            />\n            <LocalizationProvider dateAdapter={AdapterDateFns}>\n              <DatePicker\n                inputFormat=\"yyyy-MM-dd\"\n                mask={mask}\n                label=\"When\"\n                value={whenDate}\n                name=\"when\"\n                id=\"when\"\n                onChange={(e) => setWhenDate(e)}\n                renderInput={(params) => (\n                  <TextField fullWidth size=\"small\" {...params} />\n                )}\n              />\n            </LocalizationProvider>\n            <TextField\n              size=\"small\"\n              fullWidth\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"involved\"\n              label=\"Who was involved\"\n              type=\"text\"\n              value={involved}\n              onChange={(e) => onChange(e)}\n              id=\"involved\"\n            />\n            <TextField\n              size=\"small\"\n              fullWidth\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"witnesses\"\n              label=\"witnesses\"\n              type=\"text\"\n              value={witnesses}\n              onChange={(e) => onChange(e)}\n              id=\"witnesses\"\n            />\n          </Grid>\n          <Grid item xs={4}>\n            <TextField\n              size=\"small\"\n              fullWidth\n              label=\"Customer Narrative of the Event\"\n              multiline\n              type=\"text\"\n              rows={10}\n              value={narrative}\n              onChange={(e) => onChange(e)}\n              defaultValue=\"Narrative\"\n              name=\"narrative\"\n              id=\"narrative\"\n            />\n          </Grid>\n        </Grid>\n        <Button\n          variant=\"contained\"\n          type=\"submit\"\n          sx={{ float: \"right\" }}\n          endIcon={<SaveIcon />}\n        >\n          Save\n        </Button>\n      </Box>\n    </Fragment>\n  );\n};\n\nexport default NewMatter;\n","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Matter/MatterDetail.jsx",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/containers/Matters/MatterDashboard.jsx",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Matter/Calendar.jsx",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/containers/Matters/Matters.jsx",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Matter/Filters.jsx",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Matter/Cards.jsx",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Matter/MatterList.jsx",["294","295","296"],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Matter/MatterListLong.jsx",["297","298","299","300"],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Matter/MatterCards.jsx",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/App.js",["301"],"/** @format */\n\nimport React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport { Provider } from \"react-redux\";\nimport store from \"./store/store\";\n\nimport Layout from \"./hocs/Layout\";\nimport PrivateRoutes from \"./utils/PrivateRoute\";\n\nimport { UserProvider } from \"./context/User\";\n\nimport Home from \"./containers/Home\";\n\n// Authentication links\nimport Login from \"./containers/Auth/Login\";\nimport Signup from \"./containers/Auth/Signup\";\nimport Activate from \"./containers/Auth/Activate\";\nimport ResetPassword from \"./containers/Auth/ResetPassword\";\nimport ResetPasswordConfirm from \"./containers/Auth/ResetPasswordConfirm\";\n\nimport Profile from \"./components/Profile/Profile\";\n\nimport DashBoard from \"./containers/Dashboards/DashBoard\";\n\nimport MatterDashboard from \"./containers/Matters/MatterDashboard\";\nimport Matters from \"./containers/Matters/Matters\";\nimport MatterDetail from \"./components/Matter/MatterDetail\";\nimport NewMatter from \"./components/Matter/NewMatter\";\n\nimport Invoice from \"./containers/Invoice/Invoice\";\nimport CreateInvoice from \"./components/Invoice/CreateInvoice\";\n\nimport Payment from \"./components/Invoice/Payment\";\nimport ManageCategory from \"./components/Category/ManageCategory\";\nimport CreateUser from \"./components/User/CreateUser\";\nimport Time from \"./components/Legder/Time\";\nimport LedgerTImeList from \"./components/Legder/LedgerTImeList\";\nimport LedgerActivity from \"./components/Legder/LedgerActivity\";\nimport LegderDashbard from \"./components/Legder/LegderDashbard\";\nimport CreateTask from \"./components/Tasks/CreateTask\";\nimport ViewTasks from \"./components/Tasks/ViewTasks\";\nimport LedgerDoc from \"./components/Legder/LedgerDoc\";\nconst App = () => (\n  <Provider store={store}>\n    <UserProvider>\n      <Router>\n        <Layout>\n          <Switch>\n            <Route exact path=\"/\" component={Home} />\n\n            {/* loging regierter routes */}\n            <Route path=\"/login\" component={Login} />\n            <Route path=\"/signup\" component={Signup} />\n            {/* authentication routes  */}\n            <Route path=\"/reset-password\" component={ResetPassword} />\n            <Route\n              path=\"/password/reset/confirm/:uid/:token\"\n              component={ResetPasswordConfirm}\n            />\n            <Route path=\"/activate/:uid/:token\" component={Activate} />\n            {/* private route after login  */}\n            <Route path=\"/dashboard\" component={DashBoard} />\n            <Route path=\"/profile\" component={Profile} />\n\n            <Route path=\"/matter-dashboard\" component={MatterDashboard} />\n            {/* <PrivateRoutes path=\"/matters\" component={Matters} />\n            <PrivateRoutes path=\"/matter-detail\" component={MatterDetail} />\n            <PrivateRoutes path=\"/create-matter\" component={NewMatter} /> */}\n\n            <Route path=\"/matters\" component={Matters} />\n            <Route path=\"/matter-detail\" component={MatterDetail} />\n            <Route path=\"/create-matter\" component={NewMatter} />\n\n            <Route path=\"/invoices\" component={Invoice} />\n            <Route path=\"/create-invoice\" component={CreateInvoice} />\n            <Route path=\"/recive-invoice\" component={Payment} />\n            <Route path=\"/create-user\" component={CreateUser} />\n\n            <Route path=\"/manage-categories\" component={ManageCategory} />\n            <Route path=\"/ledger-documents\" component={LedgerDoc} />\n            <Route path=\"/time\" component={Time} />\n            <Route path=\"/ledgers\" component={LegderDashbard} />\n            <Route path=\"/ledger-list\" component={LedgerTImeList} />\n            <Route path=\"/activity-list\" component={LedgerActivity} />\n\n            <Route path=\"/create-task\" component={CreateTask} />\n            <Route path=\"/view-tasks\" component={ViewTasks} />\n          </Switch>\n        </Layout>\n      </Router>\n    </UserProvider>\n  </Provider>\n);\n\nexport default App;\n","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/containers/Home.js",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/utils/PrivateRoute.js",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Profile/Profile.js",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/containers/Auth/Activate.js",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/containers/Auth/Login.js",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/containers/Auth/ResetPassword.js",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/containers/Auth/ResetPasswordConfirm.js",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/containers/Auth/Signup.js",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/containers/Dashboards/DashBoard.js",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/containers/Dashboards/UserRoles/ClientDashboard.jsx",["302","303","304"],"/** @format */\n\nimport React from \"react\";\n// import axios from 'axios';\n\nimport { connect } from \"react-redux\";\n\nimport { Paper, Grid } from \"@mui/material\";\n\nimport { useToggle } from \"../../../context/useToggle\";\n\nimport Calender from \"../../../components/Dashboard/Calender\";\nimport ProgressBar from \"../../../components/Dashboard/ProgressBar\";\n\nimport Tasks from \"../../../components/Dashboard/Tasks\";\n\nconst ClientDashboard = () => {\n  const [calendarToggle, setCalendarToggle] = useToggle(true);\n  const [tasksToggle, setTasksToggle] = useToggle(true);\n  const [progressToggle, setProgressToggle] = useToggle(true);\n\n  return (\n    <>\n      <Paper elevation={3} sx={{ minHeight: \"84vh\" }}>\n        <Grid container>\n          {calendarToggle ? (\n            <Grid item xs={4}>\n              <Calender />\n            </Grid>\n          ) : null}\n          {tasksToggle ? (\n            <Grid item mt={3} p={2} xs={8}>\n              <Tasks />\n            </Grid>\n          ) : null}\n          {progressToggle ? (\n            <Grid item xs={12}>\n              <ProgressBar />\n            </Grid>\n          ) : null}\n        </Grid>\n      </Paper>\n    </>\n  );\n};\nconst mapStateToProps = (state) => ({\n  // isAuthenticated: state.auth.isAuthenticated\n  user: state.auth.user,\n});\nexport default connect(mapStateToProps)(ClientDashboard);\n","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/containers/Dashboards/UserRoles/AdminDashboard.jsx",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/containers/Dashboards/UserRoles/LawyerDashboard.jsx",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/containers/Dashboards/UserRoles/FirmDashboard.jsx",["305","306","307","308"],"/** @format */\n\nimport React from \"react\";\n// import axios from 'axios';\n\nimport { connect } from \"react-redux\";\nimport { Paper, Grid } from \"@mui/material\";\n\nimport Calender from \"../../../components/Dashboard/Calender\";\nimport Tasks from \"../../../components/Dashboard/Tasks\";\nimport Cards from \"../../../components/Dashboard/Cards\";\n\nimport { cardData } from \"../../../data/data\";\n\nimport { useToggle } from \"../../../context/useToggle\";\n\nconst FirmDashboard = () => {\n  // const [revToggle, setRevToggle] = useToggle(true);\n  // const [empToggle, setEmpToggle] = useToggle(true);\n  const [cardsToggle, setCardsToggle] = useToggle(true);\n  // const [sidebarToggle, setSidebarToggle] = useToggle(true);\n\n  const [calendarToggle, setCalendarToggle] = useToggle(true);\n  const [tasksToggle, setTasksToggle] = useToggle(true);\n  // const [progressToggle, setProgressToggle] = useToggle(true);\n\n  return (\n    <>\n      {/*main dashboard section for display  */}\n      <Paper elevation={3} sx={{ minHeight: \"84vh\" }}>\n        <Grid container px={2}>\n          {cardsToggle ? (\n            <Grid item xs={12} mt={2}>\n              <Cards />\n            </Grid>\n          ) : null}\n          {calendarToggle ? (\n            <Grid item xs={4}>\n              <Calender />\n            </Grid>\n          ) : null}\n          {tasksToggle ? (\n            <Grid item mt={3} p={2} xs={8}>\n              <Tasks />\n            </Grid>\n          ) : null}\n        </Grid>\n      </Paper>\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  // isAuthenticated: state.auth.isAuthenticated\n  user: state.auth.user,\n});\nexport default connect(mapStateToProps)(FirmDashboard);\n","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Dashboard/ProgressBar.jsx",["309"],"import React,{useState} from 'react'\nimport { LinearProgress, Box , Grid, Typography} from '@mui/material';\n\nconst ProgressBar = () => {\n    const [progress, setProgress] = useState(69);\n    return (\n        <Box paddingLeft={3} paddingRight={3}>\n        <Grid container >\n          <Grid item xs={1}>\n            <Typography>{progress}%</Typography>\n          </Grid>\n          <Grid item xs={11}mt={2}>\n            <LinearProgress variant=\"determinate\" value = {progress} />\n          </Grid>\n          </Grid>\n        </Box>\n    )\n}\n\nexport default ProgressBar\n","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Dashboard/Tasks.jsx",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Dashboard/Calender.jsx",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Dashboard/Cards.jsx",["310"],"/** @format */\n\nimport React from \"react\";\nimport { Box, Card, CardContent, Typography, Grid } from \"@mui/material\";\nimport NumberFormat from \"react-number-format\";\n\nconst Cards = () => {\n  return (\n    <>\n      <Grid container m={2} spacing={1}>\n        <Grid item xs={4}>\n          <Card>\n            <CardContent>\n              <Typography\n                sx={{ fontSize: 14 }}\n                color=\"text.secondary\"\n                gutterBottom\n              >\n                Revenue In\n              </Typography>\n              <Typography variant=\"h3\" component=\"h4\">\n                <NumberFormat\n                  value={23345}\n                  displayType={\"text\"}\n                  thousandSeparator={true}\n                  prefix=\"$\"\n                />\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={4}>\n          <Card>\n            <CardContent>\n              <Typography\n                sx={{ fontSize: 14 }}\n                color=\"text.secondary\"\n                gutterBottom\n              >\n                Revenue out\n              </Typography>\n              <Typography variant=\"h3\" component=\"h4\">\n                <NumberFormat\n                  value={13345}\n                  displayType={\"text\"}\n                  thousandSeparator={true}\n                  prefix=\"$\"\n                />\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={4}>\n          <Card>\n            <CardContent>\n              <Typography\n                sx={{ fontSize: 14 }}\n                color=\"text.secondary\"\n                gutterBottom\n              >\n                New Matters\n              </Typography>\n              <Typography variant=\"h3\" component=\"h4\">\n                <NumberFormat\n                  value={3425}\n                  displayType={\"text\"}\n                  thousandSeparator={true}\n                />\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n    </>\n  );\n};\n\nexport default Cards;\n","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/data/data.jsx",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/store/actions/auth.js",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/store/actions/types.js",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/store/actions/profile.js",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/store/store.js",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/store/reducers/index.js",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/store/reducers/auth.js",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/containers/Invoice/Invoice.jsx",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Invoice/InvoiceList.jsx",["311","312"],"/** @format */\n\nimport React, { Fragment, useState } from \"react\";\nimport {\n  Table,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TableCell,\n  Checkbox,\n} from \"@mui/material\";\nimport Filters from \"./Filters\";\n\nconst InvoiceList = () => {\n  const [invoice, setInvoice] = useState(null);\n\n  // useEffect(() => {\n  //   const config = {\n  //     headers: {\n  //       \"Content-Type\": \"application/json\",\n  //       Accept: \"application/json\",\n  //     },\n  //   };\n  //   const res = axios.get(\n  //     `${process.env.REACT_APP_API_URL}/api/invoices`,\n  //     config,\n  //   );\n  //   setInvoice(res.data);\n  // }, []);\n\n  return (\n    <Fragment>\n      <Filters />\n      <TableContainer>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>Invoice</TableCell>\n              <TableCell>Created</TableCell>\n              <TableCell>Due</TableCell>\n              <TableCell>Tax</TableCell>\n              <TableCell>Interest</TableCell>\n              <TableCell>Discount</TableCell>\n              <TableCell>Total</TableCell>\n              <TableCell>Balance</TableCell>\n              <TableCell>Last Payment</TableCell>\n              <TableCell>Approval Date</TableCell>\n              <TableCell>Approval by</TableCell>\n              <TableCell>Created by</TableCell>\n            </TableRow>\n            {invoice?.map((invoice) => {\n              <TableRow id={invoice.id}>\n                <TableCell>\n                  <Checkbox />\n                </TableCell>\n                <TableCell>{invoice.id}</TableCell>\n                <TableCell>{invoice.created}</TableCell>\n                <TableCell>{invoice.due}</TableCell>\n                <TableCell>{invoice.tax}</TableCell>\n                <TableCell>{invoice.interest}</TableCell>\n                <TableCell>{invoice.discount}</TableCell>\n                <TableCell>{invoice.total}</TableCell>\n                <TableCell>{invoice.balance}</TableCell>\n                <TableCell>{invoice.last_payment}</TableCell>\n                <TableCell>{invoice.approvel_date}</TableCell>\n                <TableCell>{invoice.approvel.by}</TableCell>\n                <TableCell>{invoice.created_by}</TableCell>\n              </TableRow>;\n            })}\n          </TableHead>\n        </Table>\n      </TableContainer>\n    </Fragment>\n  );\n};\n\nexport default InvoiceList;\n","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Invoice/Filters.jsx",["313"],"/** @format */\n\nimport React, { Fragment } from \"react\";\nimport {\n  Box,\n  Switch,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Typography,\n  FormControlLabel,\n} from \"@mui/material\";\nimport {\n  LinkButton,\n  Search,\n  SearchIconWrapper,\n  StyledInputBase,\n} from \"../../styles/styles\";\nimport SearchIcon from \"@mui/icons-material/Search\";\n\nimport { styled } from \"@mui/material/styles\";\n\nimport { useToggle } from \"../../context/useToggle\";\n\nconst Filters = () => {\n  const [paid, setPaid] = useToggle(false);\n\n  const [age, setAge] = React.useState(\"\");\n\n  const handleChange = (event) => {\n    setAge(event.target.value);\n  };\n\n  return (\n    <Fragment>\n      <Box\n        p={3}\n        sx={{\n          \"& .MuiTextField-root\": { m: 1 },\n        }}\n      >\n        <LinkButton to=\"/create-invoice\">Create Invoice</LinkButton>\n        <LinkButton to=\"/recive-invoice\">Receive Money</LinkButton>\n        <FormControlLabel\n          label=\" Paid/ Unpaid\"\n          control={<Switch checked={paid} onChange={() => setPaid(paid)} />}\n        />\n        <Box mt={2}>\n          <Search>\n            <SearchIconWrapper>\n              <SearchIcon />\n            </SearchIconWrapper>\n            <StyledInputBase\n              placeholder=\"Search…\"\n              inputProps={{ \"aria-label\": \"search\" }}\n            />\n          </Search>\n        </Box>\n        <FormControl sx={{ width: \"8rem\", m: 2 }}>\n          <InputLabel id=\"demo-simple-select-label\">All Invoice</InputLabel>\n          <Select\n            size=\"small\"\n            labelId=\"demo-simple-select-label\"\n            id=\"demo-simple-select\"\n            value={age}\n            label=\"Age\"\n            onChange={handleChange}\n          >\n            <MenuItem value={10}>Ten</MenuItem>\n            <MenuItem value={20}>Twenty</MenuItem>\n            <MenuItem value={30}>Thirty</MenuItem>\n          </Select>\n        </FormControl>\n        <FormControl sx={{ width: \"8rem\", m: 2 }}>\n          <InputLabel id=\"demo-simple-select-label\">Bill Date</InputLabel>\n          <Select\n            size=\"small\"\n            labelId=\"demo-simple-select-label\"\n            id=\"demo-simple-select\"\n            value={age}\n            label=\"Age\"\n            onChange={handleChange}\n          >\n            <MenuItem value={10}>Ten</MenuItem>\n            <MenuItem value={20}>Twenty</MenuItem>\n            <MenuItem value={30}>Thirty</MenuItem>\n          </Select>\n        </FormControl>\n        <FormControl sx={{ width: \"8rem\", m: 2 }}>\n          <InputLabel id=\"demo-simple-select-label\">All Times</InputLabel>\n          <Select\n            size=\"small\"\n            labelId=\"demo-simple-select-label\"\n            id=\"demo-simple-select\"\n            value={age}\n            label=\"Age\"\n            onChange={handleChange}\n          >\n            <MenuItem value={10}>Ten</MenuItem>\n            <MenuItem value={20}>Twenty</MenuItem>\n            <MenuItem value={30}>Thirty</MenuItem>\n          </Select>\n        </FormControl>\n        <Typography component=\"span\" variant=\"h8\" sx={{ width: \"8rem\", m: 2 }}>\n          Status:\n        </Typography>\n\n        <FormControl sx={{ width: \"8rem\", m: 2 }}>\n          <InputLabel id=\"demo-simple-select-label\">Any </InputLabel>\n          <Select\n            size=\"small\"\n            labelId=\"demo-simple-select-label\"\n            id=\"demo-simple-select\"\n            value={age}\n            label=\"Age\"\n            onChange={handleChange}\n          >\n            <MenuItem value={10}>Ten</MenuItem>\n            <MenuItem value={20}>Twenty</MenuItem>\n            <MenuItem value={30}>Thirty</MenuItem>\n          </Select>\n        </FormControl>\n        <FormControl sx={{ width: \"8rem\", m: 2 }}>\n          <InputLabel id=\"demo-simple-select-label\">Dropd-own</InputLabel>\n          <Select\n            size=\"small\"\n            labelId=\"demo-simple-select-label\"\n            id=\"demo-simple-select\"\n            value={age}\n            label=\"Age\"\n            onChange={handleChange}\n          >\n            <MenuItem value={10}>Ten</MenuItem>\n            <MenuItem value={20}>Twenty</MenuItem>\n            <MenuItem value={30}>Thirty</MenuItem>\n          </Select>\n        </FormControl>\n      </Box>\n    </Fragment>\n  );\n};\n\nexport default Filters;\n","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Invoice/CreateInvoice.jsx",["314","315"],"/** @format */\n\nimport React, { Fragment, useState } from \"react\";\nimport {\n  Box,\n  Typography,\n  Grid,\n  TextField,\n  Table,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TableCell,\n  Checkbox,\n  FormControlLabel,\n  Switch,\n  Button,\n} from \"@mui/material\";\nimport SaveIcon from \"@mui/icons-material/Save\";\nimport { LocalizationProvider, DateRangePicker } from \"@mui/lab\";\nimport AdapterDateFns from \"@mui/lab/AdapterDateFns\";\nimport { LinkButton } from \"../../styles/styles\";\n\nimport { useToggle } from \"../../context/useToggle\";\n\nconst CreateInvoice = () => {\n  const [approvel, setApprovel] = useToggle(false);\n  const [invoiceData, setInvoiceData] = useState({\n    matter: \"\",\n    contact: \"\",\n    billable: false,\n    date_range: \"\",\n    create_date: \"\",\n    due_date: \"\",\n    template: \"\",\n    invoice_no: \"\",\n    discount: \"\",\n    submit: false,\n  });\n\n  // const {\n  //   matter,\n  //   contact,\n  //   billable,\n  //   date_range,\n  //   create_date,\n  //   due_date,\n  //   template,\n  //   invoice_no,\n  //   discount,\n  //   submit,\n  // } = invoiceData;\n  const onChange = (e) =>\n    setInvoiceData({ ...invoiceData, [e.target.name]: e.target.value });\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n  };\n  const [invoice, setInvoice] = useState(null);\n  // useEffect(() => {\n  //   const config = {\n  //     headers: {\n  //       \"Content-Type\": \"application/json\",\n  //       Accept: \"application/json\",\n  //     },\n  //   };\n  //   const res = axios.get(\n  //     `${process.env.REACT_APP_API_URL}/api/invoice`,\n  //     config,\n  //   );\n  //   setInvoice(res.data);\n  // }, []);\n\n  const [dateRange, setDateRange] = React.useState([null, null]);\n  return (\n    <Fragment>\n      <Typography component=\"h3\" variant=\"h4\">\n        Create New Invoice\n      </Typography>\n      <Box p={3}>\n        <LinkButton to=\"/invoices\" sx={{ float: \"right\" }}>\n          Invoice Dashboard\n        </LinkButton>\n      </Box>\n      <Box\n        component=\"form\"\n        Validate\n        sx={{\n          \"& .MuiTextField-root\": { m: 1, width: \"15rem\" },\n        }}\n        onSubmit={(e) => onSubmit(e)}\n      >\n        <Grid container spacing={2}>\n          <Grid item xs={12}>\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"matter\"\n              label=\"matter\"\n              type=\"text\"\n              onChange={(e) => onChange(e)}\n              id=\"matter\"\n              autoComplete=\"matter\"\n            />\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"contact\"\n              label=\"contact\"\n              type=\"text\"\n              onChange={(e) => onChange(e)}\n              id=\"contact\"\n              autoComplete=\"contact\"\n            />\n            <FormControlLabel\n              control={\n                <Checkbox\n                  name=\"billable\"\n                  value=\"billable\"\n                  onChange={(e) => onChange(e)}\n                  id=\"billable\"\n                />\n              }\n              label=\"Unbillable\"\n            />\n            <LocalizationProvider dateAdapter={AdapterDateFns}>\n              <Typography sx={{ mt: 2, mb: 1 }}> Date Range </Typography>\n              <DateRangePicker\n                calendars={1}\n                value={dateRange}\n                onChange={(newValue) => {\n                  setDateRange(newValue);\n                }}\n                renderInput={(startProps, endProps) => (\n                  <Fragment>\n                    <TextField size=\"small\" {...startProps} />\n                    <Box sx={{ mx: 2 }}> to </Box>\n                    <TextField size=\"small\" {...endProps} />\n                  </Fragment>\n                )}\n              />\n            </LocalizationProvider>\n            <TextField\n              size=\"small\"\n              id=\"create_date\"\n              label=\"create_date\"\n              type=\"date\"\n              InputLabelProps={{\n                shrink: true,\n              }}\n            />\n            <TextField\n              size=\"small\"\n              id=\"due_date\"\n              label=\"due_date\"\n              type=\"date\"\n              InputLabelProps={{\n                shrink: true,\n              }}\n            />\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"template\"\n              label=\"template\"\n              type=\"text\"\n              onChange={(e) => onChange(e)}\n              id=\"template\"\n              autoComplete=\"template\"\n            />\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"contact\"\n              label=\"contact\"\n              type=\"text\"\n              onChange={(e) => onChange(e)}\n              id=\"contact\"\n              autoComplete=\"contact\"\n            />\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"invoice_no\"\n              label=\"invoice_no\"\n              type=\"text\"\n              onChange={(e) => onChange(e)}\n              id=\"invoice_no\"\n              autoComplete=\"invoice_no\"\n            />\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"discount\"\n              label=\"discount\"\n              type=\"text\"\n              onChange={(e) => onChange(e)}\n              id=\"discount\"\n              autoComplete=\"discount\"\n            />\n            <FormControlLabel\n              label=\"Submit For Approvel\"\n              control={\n                <Switch\n                  checked={approvel}\n                  onChange={() => setApprovel(approvel)}\n                />\n              }\n            />\n          </Grid>\n          <Grid item xs={12} mt={2}>\n            <TableContainer>\n              <Table size=\"small\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell></TableCell>\n                    <TableCell>Sub-Category</TableCell>\n                    <TableCell>Description</TableCell>\n                    <TableCell>Date</TableCell>\n                    <TableCell>Hours</TableCell>\n                    <TableCell>Rate</TableCell>\n                    <TableCell>Sub</TableCell>\n                    <TableCell>Tax</TableCell>\n                    <TableCell>int</TableCell>\n                    <TableCell>Disc.</TableCell>\n                    <TableCell>Total</TableCell>\n                    <TableCell>Biller</TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell>\n                      <Checkbox />\n                    </TableCell>\n                    <TableCell></TableCell>\n                    <TableCell></TableCell>\n                    <TableCell></TableCell>\n                    <TableCell></TableCell>\n                    <TableCell></TableCell>\n                    <TableCell></TableCell>\n                    <TableCell></TableCell>\n                    <TableCell></TableCell>\n                    <TableCell></TableCell>\n                    <TableCell></TableCell>\n                    <TableCell></TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell>\n                      <Checkbox />\n                    </TableCell>\n                    <TableCell></TableCell>\n                    <TableCell></TableCell>\n                    <TableCell></TableCell>\n                    <TableCell></TableCell>\n                    <TableCell></TableCell>\n                    <TableCell></TableCell>\n                    <TableCell></TableCell>\n                    <TableCell></TableCell>\n                    <TableCell></TableCell>\n                    <TableCell></TableCell>\n                    <TableCell></TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell>\n                      <Checkbox />\n                    </TableCell>\n                    <TableCell></TableCell>\n                    <TableCell></TableCell>\n                    <TableCell></TableCell>\n                    <TableCell></TableCell>\n                    <TableCell></TableCell>\n                    <TableCell></TableCell>\n                    <TableCell></TableCell>\n                    <TableCell></TableCell>\n                    <TableCell></TableCell>\n                    <TableCell></TableCell>\n                    <TableCell></TableCell>\n                  </TableRow>\n                  {invoice?.map((invoice) => {\n                    <TableRow id={invoice.id}>\n                      <TableCell>\n                        <Checkbox />\n                      </TableCell>\n\n                      <TableCell>{invoice.sub_cat}</TableCell>\n                      <TableCell>{invoice.discription}</TableCell>\n                      <TableCell>{invoice.date}</TableCell>\n                      <TableCell>{invoice.hours}</TableCell>\n                      <TableCell>{invoice.rate}</TableCell>\n                      <TableCell>{invoice.sub}</TableCell>\n                      <TableCell>{invoice.tax}</TableCell>\n                      <TableCell>{invoice.int}</TableCell>\n                      <TableCell>{invoice.dics}</TableCell>\n                      <TableCell>{invoice.total}</TableCell>\n                      <TableCell>{invoice.biller}</TableCell>\n                    </TableRow>;\n                  })}\n                </TableHead>\n              </Table>\n            </TableContainer>\n          </Grid>\n          <Grid item mt={3}>\n            <FormControlLabel\n              control={\n                <Checkbox\n                  name=\"billable\"\n                  value=\"billable\"\n                  onChange={(e) => onChange(e)}\n                  id=\"billable\"\n                />\n              }\n              label=\"Notes\"\n            />\n            <FormControlLabel\n              control={\n                <Checkbox\n                  name=\"billable\"\n                  value=\"billable\"\n                  onChange={(e) => onChange(e)}\n                  id=\"Accept Online Payment\"\n                />\n              }\n              label=\"Unbillable\"\n            />\n            <FormControlLabel\n              control={\n                <Checkbox\n                  name=\"billable\"\n                  value=\"billable\"\n                  onChange={(e) => onChange(e)}\n                  id=\"billable\"\n                />\n              }\n              label=\"Terms & Conditions\"\n            />\n            <FormControlLabel\n              control={\n                <Checkbox\n                  name=\"billable\"\n                  value=\"billable\"\n                  onChange={(e) => onChange(e)}\n                  id=\"billable\"\n                />\n              }\n              label=\"Add interest (Compound / Simple)\"\n            />\n            <FormControlLabel\n              control={\n                <Checkbox\n                  name=\"billable\"\n                  value=\"billable\"\n                  onChange={(e) => onChange(e)}\n                  id=\"billable\"\n                />\n              }\n              label=\"Use Trust Balanace\"\n            />\n            <FormControlLabel\n              control={\n                <Checkbox\n                  name=\"billable\"\n                  value=\"billable\"\n                  onChange={(e) => onChange(e)}\n                  id=\"billable\"\n                />\n              }\n              label=\"Send Reminders Every\"\n            />\n            <TextField size=\"small\" sx={{ width: \"5rem\" }} />\n\n            <FormControlLabel\n              control={\n                <Checkbox\n                  name=\"billable\"\n                  value=\"billable\"\n                  onChange={(e) => onChange(e)}\n                  id=\"billable\"\n                />\n              }\n              label=\"Add all unpaid invoices\"\n            />\n            <FormControlLabel\n              control={\n                <Checkbox\n                  name=\"billable\"\n                  value=\"billable\"\n                  onChange={(e) => onChange(e)}\n                  id=\"billable\"\n                />\n              }\n              label=\"use Operating Balance\"\n            />\n            <br />\n            <Button\n              variant=\"contained\"\n              sx={{ float: \"right\" }}\n              endIcon={<SaveIcon />}\n            >\n              Send\n            </Button>\n          </Grid>\n        </Grid>\n      </Box>\n    </Fragment>\n  );\n};\n\nexport default CreateInvoice;\n","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Navbars/NavbarSec.jsx",["316"],"/** @format */\n/** @format */\n\nimport React, { Fragment, useState } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { logout } from \"../../store/actions/auth\";\n\n// styling imports\nimport {\n  Box,\n  Toolbar,\n  Typography,\n  IconButton,\n  Menu,\n  MenuItem,\n  Fade,\n  Divider,\n} from \"@mui/material\";\n\nimport { SecNavbar } from \"../../styles/styles\";\n\nimport {\n  Message,\n  EmailRounded,\n  CalendarToday,\n  CheckBox,\n  NotificationAdd,\n  Settings,\n} from \"@mui/icons-material/\";\n\nconst NavbarSec = () => {\n  const today = new Date();\n  const time = today.toLocaleTimeString();\n  // const [localuser, setLocalUser] = useState({\n  //   username: \"Guest\",\n  //   is_firm: true,\n  //   is_lawyer: false,\n  //   is_client: false,\n  // });\n\n  // useEffect(() => {\n  //   if (user) {\n  //     setLocalUser({\n  //       username: user.username,\n  //       is_firm: user.is_firm,\n  //       is_lawyer: user.is_lawyer,\n  //       is_client: user.is_client,\n  //     });\n  //   }\n  // }, [user]);\n  const [redirect, setRedirect] = useState(false);\n\n  const [settingAcnchorEl, setSettingAcnchorEl] = useState(null);\n\n  const openSetting = Boolean(settingAcnchorEl);\n\n  const handleClick = (event) => {\n    setSettingAcnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setSettingAcnchorEl(null);\n  };\n\n  return (\n    <Fragment>\n      <SecNavbar>\n        <Toolbar>\n          <Box component=\"div\" sx={{ flexGrow: 1 }}>\n            <Message /> <EmailRounded /> <CalendarToday /> <CheckBox />\n          </Box>\n          <NotificationAdd mr={2} />{\" \"}\n          <Typography component=\"h5\" variant=\"h6\" ml={2} mr={2}>\n            |\n          </Typography>\n          <Typography component=\"h5\" variant=\"h6\" mr={2}>\n            {time}\n          </Typography>\n          <IconButton\n            aria-label=\"more\"\n            id=\"long-button\"\n            aria-controls=\"long-menu\"\n            aria-expanded={openSetting ? \"true\" : undefined}\n            aria-haspopup=\"true\"\n            onClick={handleClick}\n            sx={{\n              color: \"white\",\n            }}\n          >\n            <Settings />\n          </IconButton>\n          <Menu\n            id=\"fade-menu\"\n            MenuListProps={{\n              \"aria-labelledby\": \"fade-button\",\n            }}\n            anchorEl={settingAcnchorEl}\n            open={openSetting}\n            onClose={handleClose}\n            TransitionComponent={Fade}\n          >\n            <MenuItem onClick={handleClose}>Setting Option1</MenuItem>\n            <MenuItem onClick={handleClose}>Setting Option2</MenuItem>\n            <Divider sx={{ my: 0.5 }} />\n            <MenuItem onClick={handleClose}>Setting Option3</MenuItem>\n          </Menu>\n        </Toolbar>\n      </SecNavbar>\n\n      {redirect ? <Redirect to=\"/\" /> : <Fragment></Fragment>}\n    </Fragment>\n  );\n};\nconst mapStateToProps = (state) => ({\n  isAuthenticated: state.auth.isAuthenticated,\n  user: state.auth.user,\n});\n\nexport default connect(mapStateToProps, { logout })(NavbarSec);\n","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Invoice/Payment.jsx",["317","318"],"/** @format */\n\nimport React, { Fragment, useState } from \"react\";\n\nimport {\n  Grid,\n  Box,\n  FormControlLabel,\n  Radio,\n  RadioGroup,\n  FormControl,\n  Checkbox,\n  Typography,\n  TextField,\n  Table,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TableBody,\n  TableCell,\n  Button,\n} from \"@mui/material\";\n\nimport { LocalizationProvider, DateRangePicker } from \"@mui/lab\";\nimport AdapterDateFns from \"@mui/lab/AdapterDateFns\";\n\nimport { useToggle } from \"../../context/useToggle\";\n\nconst PaymentPlan = () => {\n  const [paymentData, setPaymentData] = useState({\n    payment_no: \"File# - 001\",\n    due: \"2020/07/01\",\n    amount: \"$ 750.00\",\n    late_fee: \"$22.00\",\n    total_due: \"$ 775.00\",\n    payment: \"$775.00\",\n    posted: \"$2020/07/05\",\n    method: \"Check\",\n  });\n\n  return (\n    <Fragment>\n      <Grid container mt={3} mb={3}>\n        <Grid item xs={4}>\n          <Typography>Start Balance:</Typography>\n          <Typography>Start Date:</Typography>\n          <Typography>Interest Rate:</Typography>\n        </Grid>\n        <Grid item xs={4}>\n          <Typography>Payment Amout:</Typography>\n          <Typography>Payment Date:</Typography>\n          <Typography>No Payments:</Typography>\n        </Grid>\n        <Grid item xs={4}>\n          <Typography>Payment Remaining:</Typography>\n          <Typography>Last Payment:</Typography>\n          <Typography>Last Payment $:</Typography>\n        </Grid>\n      </Grid>\n      <Table size=\"small\">\n        <TableHead>\n          <TableRow>\n            <TableCell></TableCell>\n            <TableCell>Payment #</TableCell>\n            <TableCell>Due</TableCell>\n            <TableCell>Amout</TableCell>\n            <TableCell>Late Fee</TableCell>\n            <TableCell>Total Due</TableCell>\n            <TableCell>Payment</TableCell>\n            <TableCell>Posted</TableCell>\n            <TableCell>Method</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          <TableCell>\n            <Checkbox />\n          </TableCell>\n          <TableCell>{paymentData.payment_no}</TableCell>\n          <TableCell>{paymentData.due}</TableCell>\n          <TableCell>{paymentData.amount} </TableCell>\n          <TableCell>{paymentData.late_fee}</TableCell>\n          <TableCell>{paymentData.total_due}</TableCell>\n          <TableCell>{paymentData.payment}</TableCell>\n          <TableCell>{paymentData.posted}</TableCell>\n          <TableCell>{paymentData.method}</TableCell>\n        </TableBody>\n      </Table>\n      <Button\n        variant=\"contained\"\n        sx={{\n          float: \"right\",\n          borderRadius: \"0.5rem\",\n          paddingInline: \"2rem\",\n          marginTop: \"2rem\",\n        }}\n      >\n        Close\n      </Button>{\" \"}\n    </Fragment>\n  );\n};\n\nconst InvoicePayment = () => {\n  const [invoiceData, setInvoiceData] = useState({\n    invoice_no: \"i-2106-0004542\",\n    due: \"2020/07/01\",\n    tax: \"$ 15.00\",\n    interest: \"$2.35\",\n    time: \"$ 1,234.50\",\n    hard: \"$457.00\",\n    soft: \"$45.00\",\n    total: \"$ 1,753.85\",\n  });\n\n  return (\n    <Fragment>\n      <Table size=\"small\">\n        <TableHead>\n          <TableRow>\n            <TableCell></TableCell>\n            <TableCell>Invoice</TableCell>\n            <TableCell>Due</TableCell>\n            <TableCell>Tax</TableCell>\n            <TableCell>Interest</TableCell>\n            <TableCell>Time</TableCell>\n            <TableCell>Hard</TableCell>\n            <TableCell>Soft</TableCell>\n            <TableCell>Total</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          <TableCell>\n            <Checkbox />\n          </TableCell>\n          <TableCell>{invoiceData.invoice_no}</TableCell>\n          <TableCell>{invoiceData.due}</TableCell>\n          <TableCell>{invoiceData.tax} </TableCell>\n          <TableCell>{invoiceData.interest}</TableCell>\n          <TableCell>{invoiceData.time}</TableCell>\n          <TableCell>{invoiceData.hard}</TableCell>\n          <TableCell>{invoiceData.soft}</TableCell>\n          <TableCell>{invoiceData.total}</TableCell>\n        </TableBody>\n      </Table>{\" \"}\n      <Button\n        variant=\"contained\"\n        sx={{\n          float: \"right\",\n          borderRadius: \"0.5rem\",\n          paddingInline: \"2rem\",\n          marginTop: \"2rem\",\n        }}\n      >\n        Pay\n      </Button>{\" \"}\n    </Fragment>\n  );\n};\n\nconst Payment = () => {\n  const [dateRange, setDateRange] = useState([null, null]);\n  const [isPlan, setIsPlan] = useToggle(false);\n  const [invoiceData, setInvoiceData] = useState({\n    payment_type: \"\",\n    date: \"\",\n    retainer: \"\",\n    payment: \"\",\n    date_range: \"\",\n    menu: \"\",\n    bank_account: \"\",\n    payment_method: \"\",\n  });\n\n  // const {\n  //   payment_type,\n  //   date,\n  //   retainer,\n  //   payment,\n  //   date_range,\n  //   menu,\n  //   bank_account,\n  //   payment_method,\n  // } = invoiceData;\n  const onChange = (e) =>\n    setInvoiceData({ ...invoiceData, [e.target.name]: e.target.value });\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n  };\n  return (\n    <Fragment>\n      <Grid container>\n        <Grid item xs={12}>\n          <Box\n            component=\"form\"\n            Validate\n            sx={{\n              \"& .MuiTextField-root\": { m: 1, width: \"15rem\" },\n            }}\n            onSubmit={(e) => onSubmit(e)}\n          >\n            <FormControl component=\"fieldset\">\n              <RadioGroup\n                row\n                aria-label=\"payment_type\"\n                defaultValue=\"cash\"\n                name=\"payment_type\"\n                onChange={(e) => onChange(e)}\n                id=\"payment_type\"\n                autoComplete=\"payment_type\"\n              >\n                <FormControlLabel\n                  value=\"cash\"\n                  control={<Radio />}\n                  label=\"Cash\"\n                />\n                <FormControlLabel value=\"cc\" control={<Radio />} label=\"CC\" />\n                <FormControlLabel\n                  value=\"wire\"\n                  control={<Radio />}\n                  label=\"Wire\"\n                />\n                <FormControlLabel\n                  value=\"check\"\n                  control={<Radio />}\n                  label=\"Check\"\n                />\n              </RadioGroup>\n            </FormControl>\n            <TextField\n              size=\"small\"\n              id=\"date\"\n              label=\"date\"\n              type=\"date\"\n              InputLabelProps={{\n                shrink: true,\n              }}\n            />\n            <FormControlLabel\n              value=\"retainer\"\n              control={<Checkbox />}\n              label=\"Retainer\"\n            />\n            <FormControlLabel\n              value=\"payment\"\n              control={<Checkbox />}\n              label=\"Payment\"\n            />\n            <LocalizationProvider dateAdapter={AdapterDateFns}>\n              <Typography sx={{ mt: 2, mb: 1 }}> Date Range </Typography>\n              <DateRangePicker\n                calendars={1}\n                value={dateRange}\n                onChange={(newValue) => {\n                  setDateRange(newValue);\n                }}\n                renderInput={(startProps, endProps) => (\n                  <Fragment>\n                    <TextField size=\"small\" {...startProps} />\n                    <Box sx={{ mx: 2 }}> to </Box>\n                    <TextField size=\"small\" {...endProps} />\n                  </Fragment>\n                )}\n              />\n            </LocalizationProvider>\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"menu\"\n              label=\"menu\"\n              type=\"text\"\n              onChange={(e) => onChange(e)}\n              id=\"menu\"\n              autoComplete=\"menu\"\n            />\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"bank_account\"\n              label=\"bank_account\"\n              type=\"text\"\n              onChange={(e) => onChange(e)}\n              id=\"bank_account\"\n              autoComplete=\"bank_account\"\n            />\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"payment_method\"\n              label=\"payment_method\"\n              type=\"text\"\n              onChange={(e) => onChange(e)}\n              id=\"payment_method\"\n              autoComplete=\"payment_method\"\n            />\n            <FormControl component=\"fieldset\">\n              <RadioGroup\n                row\n                aria-label=\"isPlan\"\n                defaultValue={isPlan}\n                name=\"isPlan\"\n                onChange={(e) => setIsPlan(e)}\n                id=\"isPlan\"\n                autoComplete=\"isPlan\"\n              >\n                <FormControlLabel\n                  value={false}\n                  control={<Radio />}\n                  label=\"Invoice Payment\"\n                />\n                <FormControlLabel\n                  value={true}\n                  control={<Radio />}\n                  label=\"Payment Plan\"\n                />\n              </RadioGroup>\n            </FormControl>\n          </Box>\n        </Grid>\n        <Grid item xs={12}>\n          <TableContainer>\n            {isPlan ? <PaymentPlan /> : <InvoicePayment />}\n          </TableContainer>\n        </Grid>\n      </Grid>\n    </Fragment>\n  );\n};\n\nexport default Payment;\n","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Category/ManageCategory.jsx",["319"],"/** @format */\n\nimport React, { Fragment, useState } from \"react\";\n\nimport { Typography, Grid } from \"@mui/material\";\n\nimport SubCategory from \"./SubCategory\";\nimport Category from \"./Category\";\nimport Classification from \"./Classification\";\n\nconst ManageCategory = () => {\n  return (\n    <Fragment>\n      <Grid container>\n        <Grid item xs={8}>\n          <Typography component=\"h3\" variant=\"h5\">\n            Manage Category, Sub-category, Classification\n          </Typography>\n        </Grid>\n\n        <Grid item xs={12}>\n          <Grid container spacing={5} mt={1}>\n            <Grid item xs={4}>\n              <Category />\n            </Grid>\n            <Grid item xs={4}>\n              <SubCategory />\n            </Grid>\n            <Grid item xs={4}>\n              <Classification />\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n    </Fragment>\n  );\n};\n\nexport default ManageCategory;\n","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Category/Category.jsx",["320","321","322"],"/** @format */\nimport React, { Fragment, useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport {\n  Button,\n  Box,\n  List,\n  ListItem,\n  ListItemText,\n  Typography,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  TextField,\n} from \"@mui/material\";\n\nimport ClearIcon from \"@mui/icons-material/Clear\";\nimport { ActionAlerts } from \"../../utils/ActionAlerts\";\n\nconst CONFIG = {\n  headers: {\n    \"Content-Type\": \"application/json\",\n    Accept: \"application/json\",\n  },\n};\n\nconst catHandler = (id) => {\n  console.log(id);\n};\n\nconst Category = () => {\n  const [category, setCategory] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const [formData, setFormData] = useState({\n    name: \"\",\n  });\n\n  const { name } = formData;\n\n  const onChange = (e) =>\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n\n  const [open, setOpen] = useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const FetchData = () => {\n    axios\n      .get(`${process.env.REACT_APP_API_URL}/api/category/`, CONFIG)\n      .then((res) => {\n        console.log(res.data);\n        setLoading(false);\n        setStatus(res.statusText);\n        setCategory(res.data);\n      })\n      .catch((err) => {\n        console.log(err);\n        setLoading(false);\n        setError(err.message);\n      });\n  };\n  useEffect(() => {\n    FetchData();\n  }, []);\n  const handleDelete = (id) => {\n    axios\n      .delete(`${process.env.REACT_APP_API_URL}/api/category/${id}/`, CONFIG)\n      .then((res) => {\n        FetchData();\n        return (\n          <ActionAlerts\n            value={{ status: res.statusText, message: \"Success\" }}\n          />\n        );\n      });\n  };\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const body = JSON.stringify({ name });\n    axios\n      .post(`${process.env.REACT_APP_API_URL}/api/category/`, body, CONFIG)\n      .then((res) => {\n        FetchData();\n        return (\n          <ActionAlerts\n            value={{ status: res.statusText, message: \"Success\" }}\n          />\n        );\n      })\n      .catch((err) => {\n        FetchData();\n        return (\n          <ActionAlerts\n            value={{ status: err.statusText, message: \"Success\" }}\n          />\n        );\n      });\n  };\n  return (\n    <Fragment>\n      <Button\n        variant=\"contained\"\n        onClick={handleClickOpen}\n        fullWidth\n        sx={{\n          borderRadius: \"0.5rem\",\n        }}\n      >\n        + New category\n      </Button>\n      <Dialog\n        component=\"form\"\n        Validate\n        onSubmit={(e) => handleSubmit(e)}\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">{\"Add New Category\"}</DialogTitle>\n        <DialogContent>\n          <TextField\n            required\n            fullWidth\n            size=\"small\"\n            margin=\"normal\"\n            variant=\"outlined\"\n            name=\"name\"\n            label=\"Category Name\"\n            type=\"text\"\n            value={name}\n            onChange={(e) => onChange(e)}\n            id=\"name\"\n            autoComplete=\"name\"\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose}>Close</Button>\n          <Button type=\"submit\" autoFocus>\n            Add\n          </Button>\n        </DialogActions>\n      </Dialog>\n      {!loading ? (\n        category.map((data) => (\n          <Box mt={1}>\n            <List>\n              <ListItem disablePadding>\n                <ListItemText>{data.name}</ListItemText>\n                <Button\n                  variant=\"contained\"\n                  value={data.id}\n                  onClick={() => handleDelete(data.id)}\n                  sx={{\n                    borderRadius: \"0.5rem\",\n                    float: \"right\",\n                  }}\n                >\n                  <ClearIcon />\n                </Button>\n              </ListItem>\n            </List>\n          </Box>\n        ))\n      ) : (\n        <Typography>Loading ...</Typography>\n      )}\n    </Fragment>\n  );\n};\n\nexport default Category;\n","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Category/SubCategory.jsx",["323","324","325","326","327"],"/** @format */\n\nimport React, { Fragment, useState, useEffect, useCallback } from \"react\";\nimport axios from \"axios\";\nimport {\n  Button,\n  Box,\n  List,\n  ListItem,\n  ListItemText,\n  Typography,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  TextField,\n} from \"@mui/material\";\n\nimport ClearIcon from \"@mui/icons-material/Clear\";\nimport { ActionAlerts } from \"../../utils/ActionAlerts\";\n\nconst CONFIG = {\n  headers: {\n    \"Content-Type\": \"application/json\",\n    Accept: \"application/json\",\n  },\n};\n\nconst SubCategory = () => {\n  const [subCategory, setSubCategory] = useState([]);\n\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const [formData, setFormData] = useState({\n    name: \"\",\n  });\n\n  const { name } = formData;\n\n  const onChange = (e) =>\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n\n  const [open, setOpen] = useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const FetchData = () => {\n    axios\n      .get(`${process.env.REACT_APP_API_URL}/api/sub-category/`, CONFIG)\n      .then((res) => {\n        console.log(res.data);\n        setLoading(false);\n        setStatus(res.statusText);\n        setSubCategory(res.data);\n      })\n      .catch((err) => {\n        console.log(err);\n        setLoading(false);\n        setStatus(err.statusText);\n      });\n  };\n  useEffect(() => {\n    FetchData();\n  }, []);\n  const handleDelete = (id) => {\n    axios\n      .delete(\n        `${process.env.REACT_APP_API_URL}/api/sub-category/${id}/`,\n        CONFIG,\n      )\n      .then((res) => {\n        FetchData();\n        setStatus(res.statusText);\n      })\n      .catch((err) => setStatus(err.statusText));\n  };\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const body = JSON.stringify({ name });\n    axios\n      .post(`${process.env.REACT_APP_API_URL}/api/sub-category/`, body, CONFIG)\n      .then((res) => {\n        FetchData();\n      })\n      .catch((err) => {\n        FetchData();\n      });\n  };\n  return (\n    <Fragment>\n      <Button\n        variant=\"contained\"\n        onClick={handleClickOpen}\n        fullWidth\n        sx={{\n          borderRadius: \"0.5rem\",\n        }}\n      >\n        + New Sub-Category\n      </Button>\n      <Dialog\n        component=\"form\"\n        Validate\n        onSubmit={(e) => handleSubmit(e)}\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">\n          {\"Add New Sub-Category\"}\n        </DialogTitle>\n        <DialogContent>\n          <TextField\n            required\n            fullWidth\n            size=\"small\"\n            margin=\"normal\"\n            variant=\"outlined\"\n            name=\"name\"\n            label=\"Sub-Category Name\"\n            type=\"text\"\n            value={name}\n            onChange={(e) => onChange(e)}\n            id=\"name\"\n            autoComplete=\"name\"\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose}>Close</Button>\n          <Button type=\"submit\" autoFocus>\n            Add\n          </Button>\n        </DialogActions>\n      </Dialog>\n      {!loading ? (\n        subCategory.map((data) => (\n          <Box mt={1}>\n            <List>\n              <ListItem disablePadding>\n                <ListItemText>{data.name}</ListItemText>\n                <Button\n                  variant=\"contained\"\n                  value={data.id}\n                  onClick={() => handleDelete(data.id)}\n                  sx={{\n                    borderRadius: \"0.5rem\",\n                    float: \"right\",\n                  }}\n                >\n                  <ClearIcon />\n                </Button>\n              </ListItem>\n            </List>\n          </Box>\n        ))\n      ) : (\n        <Typography>Loading ...</Typography>\n      )}\n    </Fragment>\n  );\n};\n\nexport default SubCategory;\n","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Category/Classification.jsx",["328"],"/** @format */\n\nimport React, { Fragment, useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport {\n  Button,\n  Box,\n  List,\n  ListItem,\n  ListItemText,\n  Typography,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  DialogContentText,\n  TextField,\n} from \"@mui/material\";\n\nimport ClearIcon from \"@mui/icons-material/Clear\";\nimport { ActionAlerts } from \"../../utils/ActionAlerts\";\n\nconst CONFIG = {\n  headers: {\n    \"Content-Type\": \"application/json\",\n    Accept: \"application/json\",\n  },\n};\n\nconst Classification = () => {\n  const [classification, setClassification] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [status, setStatus] = useState(\"\");\n  const [formData, setFormData] = useState({\n    name: \"\",\n  });\n\n  const { name } = formData;\n\n  const onChange = (e) =>\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n\n  const [open, setOpen] = useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const FetchData = () => {\n    axios\n      .get(`${process.env.REACT_APP_API_URL}/api/classification/`, CONFIG)\n      .then((res) => {\n        console.log(res.data);\n        setLoading(false);\n        setStatus(res.statusText);\n        setClassification(res.data);\n      })\n      .catch((err) => {\n        console.log(err);\n        setLoading(false);\n        setStatus(err.statusText);\n      });\n  };\n  useEffect(() => {\n    FetchData();\n  }, []);\n  const handleDelete = (id) => {\n    axios\n      .delete(\n        `${process.env.REACT_APP_API_URL}/api/classification/${id}/`,\n        CONFIG,\n      )\n      .then((res) => {\n        FetchData();\n        setStatus(res.statusText);\n        return <ActionAlerts value={{ status: status }} />;\n      });\n  };\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const body = JSON.stringify({ name });\n    axios\n      .post(\n        `${process.env.REACT_APP_API_URL}/api/classification/`,\n        body,\n        CONFIG,\n      )\n      .then((res) => {\n        FetchData();\n        return <ActionAlerts value={{ status: res.statusText }} />;\n      })\n      .catch((err) => {\n        FetchData();\n        return <ActionAlerts value={{ status: err.statusText }} />;\n      });\n  };\n  return (\n    <Fragment>\n      <Button\n        variant=\"contained\"\n        onClick={handleClickOpen}\n        fullWidth\n        sx={{\n          borderRadius: \"0.5rem\",\n        }}\n      >\n        + New Classification\n      </Button>\n      <Dialog\n        component=\"form\"\n        Validate\n        onSubmit={(e) => handleSubmit(e)}\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">\n          {\"Add New Classification\"}\n        </DialogTitle>\n        <DialogContent>\n          <TextField\n            required\n            fullWidth\n            size=\"small\"\n            margin=\"normal\"\n            variant=\"outlined\"\n            name=\"name\"\n            label=\"Classification Name\"\n            type=\"text\"\n            value={name}\n            onChange={(e) => onChange(e)}\n            id=\"name\"\n            autoComplete=\"name\"\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose}>Close</Button>\n          <Button type=\"submit\" autoFocus>\n            Add\n          </Button>\n        </DialogActions>\n      </Dialog>\n      {!loading ? (\n        classification.map((data) => (\n          <Box mt={1}>\n            <List>\n              <ListItem disablePadding>\n                <ListItemText>{data.name}</ListItemText>\n                <Button\n                  variant=\"contained\"\n                  value={data.id}\n                  onClick={() => handleDelete(data.id)}\n                  sx={{\n                    borderRadius: \"0.5rem\",\n                    float: \"right\",\n                  }}\n                >\n                  <ClearIcon />\n                </Button>\n              </ListItem>\n            </List>\n          </Box>\n        ))\n      ) : (\n        <Typography>Loading ...</Typography>\n      )}\n    </Fragment>\n  );\n};\n\nexport default Classification;\n","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/utils/ActionAlerts.js",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/utils/ApiController.js",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/User/CreateUser.jsx",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Legder/Time.jsx",["329"],"/** @format */\n\nimport React, { Fragment, useState } from \"react\";\nimport {\n  TextField,\n  Box,\n  Grid,\n  Switch,\n  Button,\n  Typography,\n  RadioGroup,\n  FormLabel,\n  FormControl,\n  FormControlLabel,\n  Radio,\n} from \"@mui/material\";\nimport axios from \"axios\";\nimport { CONFIG } from \"../../api/MatterApi\";\nimport AdapterDateFns from \"@mui/lab/AdapterDateFns\";\nimport SaveIcon from \"@mui/icons-material/Save\";\nimport { LocalizationProvider, TimePicker, DatePicker } from \"@mui/lab\";\nimport { useToggle } from \"../../context/useToggle\";\nimport { ActionAlerts, GetTime, GetDate } from \"../../utils/ActionAlerts\";\n\nconst Time = () => {\n  const [pickTime, setPickTime] = useState(new Date(\"2021-12-01T21:00:00\"));\n  const [pickDate, setPickDate] = useState(new Date(\"2021-12-01T21:11:54\"));\n  const [timeToggle, setTimeToggle] = useToggle(false);\n  const [billable, setBillable] = useToggle(false);\n\n  // const [bill, setBill] = useToggle(false);\n  const [timeData, setTimeData] = useState({\n    contact: 0,\n    matter_name: 0,\n    category: \"\",\n    sub_category: \"\",\n    hard: false,\n    soft: false,\n    unit: 0,\n    qty: 0,\n    rate: 0,\n    file: \"\",\n    detail: \"\",\n    bill_by: 0,\n    note: \"\",\n  });\n\n  const {\n    contact,\n    matter_name,\n    category,\n    sub_category,\n    hard,\n    soft,\n    unit,\n    qty,\n    rate,\n    file,\n    detail,\n    bill_by,\n\n    note,\n  } = timeData;\n  const onChange = (e) =>\n    setTimeData({ ...timeData, [e.target.name]: e.target.value });\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    let time = GetTime(pickTime);\n    let date = GetDate(pickDate);\n\n    const body = JSON.stringify({\n      contact,\n      matter_name,\n      category,\n      sub_category,\n      hard,\n      soft,\n      unit,\n      qty,\n      rate,\n      time,\n      date,\n      detail,\n      bill_by,\n      billable,\n      note,\n    });\n    axios\n      .post(`${process.env.REACT_APP_API_URL}/api/add-time/`, body, CONFIG)\n      .then((res) => {\n        <ActionAlerts value={{ status: res.statusText, message: \"Success\" }} />;\n      })\n      .catch((err) => {\n        <ActionAlerts value={{ status: err.statusText, message: \"Failed\" }} />;\n      });\n    console.log(body);\n  };\n  return (\n    <Fragment>\n      <Box\n        component=\"form\"\n        Validate\n        sx={{\n          \"& .MuiTextField-root\": { m: 1, width: \"15rem\" },\n        }}\n        onSubmit={(e) => onSubmit(e)}\n      >\n        <Typography component=\"h3\" variant=\"h4\">\n          Time\n        </Typography>\n        <Grid container spacing={2} mt={2}>\n          <Grid item xs={12}>\n            <Grid container p={3}>\n              <Grid item xs={6}>\n                <FormControlLabel\n                  size=\"large\"\n                  label=\"Time\"\n                  labelPlacement=\"start\"\n                  control={\n                    <Switch\n                      size=\"large\"\n                      checked={timeToggle}\n                      onChange={(e) => setTimeToggle(e)}\n                    />\n                  }\n                />\n                {timeToggle ? null : (\n                  <Box>\n                    <FormControl component=\"fieldset\">\n                      <FormLabel component=\"legend\">Expense</FormLabel>\n                      <RadioGroup\n                        row\n                        aria-label=\"expense\"\n                        defaultValue=\"\"\n                        name=\"expense\"\n                        id=\"expense\"\n                      >\n                        <FormControlLabel\n                          value=\"hard\"\n                          control={<Radio />}\n                          label=\"Hard\"\n                        />\n                        <FormControlLabel\n                          value=\"soft\"\n                          control={<Radio />}\n                          label=\"Soft\"\n                        />\n                      </RadioGroup>\n                    </FormControl>\n                  </Box>\n                )}\n              </Grid>\n              <Grid item xs={6}>\n                <TextField\n                  size=\"small\"\n                  margin=\"normal\"\n                  variant=\"outlined\"\n                  name=\"matter\"\n                  label=\"matter\"\n                  type=\"number\"\n                  onChange={(e) => onChange(e)}\n                  id=\"matter\"\n                  autoComplete=\"matter\"\n                  disabled\n                />\n                <TextField\n                  size=\"small\"\n                  margin=\"normal\"\n                  variant=\"outlined\"\n                  name=\"contact\"\n                  label=\"contact\"\n                  type=\"number\"\n                  onChange={(e) => onChange(e)}\n                  id=\"contact\"\n                  autoComplete=\"contact\"\n                  disabled\n                />\n              </Grid>\n            </Grid>\n\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"category\"\n              label=\"category\"\n              type=\"text\"\n              onChange={(e) => onChange(e)}\n              id=\"category\"\n              autoComplete=\"category\"\n            />\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"sub_category\"\n              label=\"sub_category\"\n              type=\"text\"\n              onChange={(e) => onChange(e)}\n              id=\"sub_category\"\n              autoComplete=\"sub_category\"\n            />\n            {timeToggle ? (\n              <TextField\n                size=\"small\"\n                margin=\"normal\"\n                variant=\"outlined\"\n                name=\"rate\"\n                label=\"rate\"\n                type=\"number\"\n                onChange={(e) => onChange(e)}\n                id=\"rate\"\n                autoComplete=\"rate\"\n              />\n            ) : (\n              <Fragment>\n                <TextField\n                  size=\"small\"\n                  margin=\"normal\"\n                  variant=\"outlined\"\n                  name=\"unit\"\n                  label=\"unit\"\n                  type=\"number\"\n                  onChange={(e) => onChange(e)}\n                  id=\"unit\"\n                  autoComplete=\"unit\"\n                />\n                <TextField\n                  size=\"small\"\n                  margin=\"normal\"\n                  variant=\"outlined\"\n                  name=\"qty\"\n                  label=\"Qty\"\n                  type=\"number\"\n                  onChange={(e) => onChange(e)}\n                  id=\"qty\"\n                  autoComplete=\"qty\"\n                />\n                <Box m={1}>\n                  <Typography component=\"lable\"> Receipt(s) </Typography>\n\n                  <Button variant=\"contained\" disabled>\n                    + Attach File\n                  </Button>\n                </Box>\n              </Fragment>\n            )}\n\n            <LocalizationProvider dateAdapter={AdapterDateFns}>\n              <TimePicker\n                label=\"Pick Time\"\n                name=\"picktime\"\n                id=\"picktime\"\n                value={pickTime}\n                onChange={(e) => {\n                  setPickTime(e);\n                }}\n                renderInput={(params) => <TextField size=\"small\" {...params} />}\n              />\n            </LocalizationProvider>\n            <LocalizationProvider dateAdapter={AdapterDateFns}>\n              <DatePicker\n                inputFormat=\"yyyy-MM-dd\"\n                mask=\"____-__-__\"\n                label=\"Pick Date\"\n                value={pickDate}\n                name=\"pickdate\"\n                id=\"pickdate\"\n                onChange={(e) => setPickDate(e)}\n                renderInput={(params) => <TextField size=\"small\" {...params} />}\n              />\n            </LocalizationProvider>\n\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"detail\"\n              label=\"detail\"\n              type=\"text\"\n              onChange={(e) => onChange(e)}\n              id=\"detail\"\n              autoComplete=\"detail\"\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"bill_by\"\n              label=\"bill_by\"\n              type=\"number\"\n              onChange={(e) => onChange(e)}\n              id=\"bill_by\"\n              autoComplete=\"bill_by\"\n            />\n            <FormControlLabel\n              size=\"large\"\n              label=\"Billable\"\n              labelPlacement=\"start\"\n              control={\n                <Switch\n                  size=\"large\"\n                  checked={billable}\n                  onChange={() => setBillable(billable)}\n                />\n              }\n            />\n            <br />\n            <TextField\n              fullWidth\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"note\"\n              rows={4}\n              label=\"note\"\n              type=\"text\"\n              onChange={(e) => onChange(e)}\n              id=\"note\"\n              autoComplete=\"note\"\n            />\n          </Grid>\n        </Grid>\n        <Button\n          variant=\"contained\"\n          type=\"submit\"\n          sx={{ float: \"right\" }}\n          endIcon={<SaveIcon />}\n        >\n          Save\n        </Button>\n      </Box>\n    </Fragment>\n  );\n};\n\nexport default Time;\n","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Legder/LedgerTImeList.jsx",["330","331","332","333"],"/** @format */\n\nimport React, { Fragment, useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport {\n  Table,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TableBody,\n  Typography,\n  Checkbox,\n  Box,\n  Button,\n} from \"@mui/material\";\nimport { CONFIG } from \"../../api/MatterApi\";\nimport { LinkButton } from \"../../styles/styles\";\nimport { ActionAlerts } from \"../../utils/ActionAlerts\";\nimport NumberFormat from \"react-number-format\";\n\nconst LedgerTImeList = () => {\n  const [ledgerData, setLedgerData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const FetchData = () => {\n    axios\n      .get(`${process.env.REACT_APP_API_URL}/api/add-time/`, CONFIG)\n      .then((res) => {\n        setLoading(false);\n        setStatus(res.statusText);\n        setLedgerData(res.data);\n      })\n      .catch((err) => {\n        setLoading(false);\n        setStatus(err.statusText);\n      });\n  };\n  useEffect(() => {\n    FetchData();\n  }, []);\n\n  return (\n    <Fragment>\n      <Box>\n        <Typography component=\"h4\" variant=\"h5\" mb={2}>\n          Ledgers Time list\n        </Typography>\n        <Button\n          variant=\"contained\"\n          sx={{ marginRight: \"1rem\", float: \"right\" }}\n        >\n          Print\n        </Button>\n        <Button\n          variant=\"contained\"\n          sx={{ marginRight: \"1rem\", float: \"right\" }}\n        >\n          Export\n        </Button>\n        <LinkButton to=\"/time\" sx={{ float: \"right\" }}>\n          + Add Time\n        </LinkButton>\n        <TableContainer>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell></TableCell>\n                <TableCell>Cateagory</TableCell>\n                <TableCell>Sub-Category</TableCell>\n                <TableCell>Detail</TableCell>\n                <TableCell>Date</TableCell>\n                <TableCell>Qty</TableCell>\n                <TableCell>Status</TableCell>\n                <TableCell>Total</TableCell>\n                <TableCell>BillBy</TableCell>\n              </TableRow>\n            </TableHead>\n            {loading\n              ? null\n              : ledgerData?.map((data) => {\n                  return (\n                    <TableBody id={data.id}>\n                      <TableCell>\n                        <Checkbox />\n                      </TableCell>\n                      <TableCell>{data.category}</TableCell>\n                      <TableCell>{data.sub_category}</TableCell>\n                      <TableCell>{data.detail}</TableCell>\n                      <TableCell>{data.date}</TableCell>\n                      <TableCell>{data.qty}</TableCell>\n                      <TableCell>\n                        {data.billable ? \"Billable\" : \"Paid\"}\n                      </TableCell>\n                      <TableCell>\n                        <NumberFormat\n                          value={data.qty * 25}\n                          displayType={\"text\"}\n                          thousandSeparator={true}\n                          prefix=\"$\"\n                        />\n                      </TableCell>\n                      <TableCell>{data.bill_by}</TableCell>\n                    </TableBody>\n                  );\n                })}\n          </Table>\n        </TableContainer>\n      </Box>\n    </Fragment>\n  );\n};\n\nexport default LedgerTImeList;\n","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Legder/LedgerActivity.jsx",["334","335","336","337","338"],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Legder/LegderDashbard.jsx",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Legder/LedgerCards.jsx",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Legder/Fillters.jsx",["339","340"],"/** @format */\n\nimport React, { Fragment, useState } from \"react\";\nimport {\n  Box,\n  Switch,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Typography,\n  TextField,\n  FormControlLabel,\n} from \"@mui/material\";\n\nimport { LocalizationProvider, DateRangePicker } from \"@mui/lab\";\nimport AdapterDateFns from \"@mui/lab/AdapterDateFns\";\n\nconst Fillters = () => {\n  const [dateRange, setDateRange] = useState([null, null]);\n  const [billedby, setBilledby] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const [filter, setFilter] = useState(\"\");\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n  };\n  return (\n    <Fragment>\n      <Box\n        component=\"form\"\n        Validate\n        sx={{\n          \"& .MuiTextField-root\": { m: 1, width: \"15rem\" },\n        }}\n        onSubmit={(e) => onSubmit(e)}\n      >\n        <FormControl sx={{ width: \"8rem\", m: 2 }}>\n          <InputLabel id=\"demo-simple-select-label\">Filter By</InputLabel>\n          <Select\n            size=\"small\"\n            labelId=\"demo-simple-select-label\"\n            id=\"demo-simple-select\"\n            value={filter}\n            label=\"Filter By\"\n            onChange={(e) => setFilter(e.target.value)}\n          >\n            <MenuItem value={10}>Ten</MenuItem>\n            <MenuItem value={20}>Twenty</MenuItem>\n            <MenuItem value={30}>Thirty</MenuItem>\n          </Select>\n        </FormControl>\n        <FormControl sx={{ width: \"8rem\", m: 2 }}>\n          <InputLabel id=\"demo-simple-select-label\">Billed by</InputLabel>\n          <Select\n            size=\"small\"\n            labelId=\"demo-simple-select-label\"\n            id=\"demo-simple-select\"\n            value={billedby}\n            label=\"Billed By\"\n            onChange={(e) => setBilledby(e.target.value)}\n          >\n            <MenuItem value={10}>Ten</MenuItem>\n            <MenuItem value={20}>Twenty</MenuItem>\n            <MenuItem value={30}>Thirty</MenuItem>\n          </Select>\n        </FormControl>\n        <FormControl sx={{ width: \"8rem\", m: 2 }}>\n          <InputLabel id=\"demo-simple-select-label\">Status</InputLabel>\n          <Select\n            size=\"small\"\n            labelId=\"demo-simple-select-label\"\n            id=\"demo-simple-select\"\n            value={status}\n            label=\"Age\"\n            onChange={(e) => setStatus(e.target.value)}\n          >\n            <MenuItem value={10}>Ten</MenuItem>\n            <MenuItem value={20}>Twenty</MenuItem>\n            <MenuItem value={30}>Thirty</MenuItem>\n          </Select>\n        </FormControl>\n        <LocalizationProvider dateAdapter={AdapterDateFns}>\n          <Typography sx={{ mt: 2, mb: 1 }}> Date Range </Typography>\n          <DateRangePicker\n            calendars={1}\n            value={dateRange}\n            onChange={(newValue) => {\n              setDateRange(newValue);\n            }}\n            renderInput={(startProps, endProps) => (\n              <Fragment>\n                <TextField size=\"small\" {...startProps} />\n                <Box sx={{ mx: 2 }}> to </Box>\n                <TextField size=\"small\" {...endProps} />\n              </Fragment>\n            )}\n          />\n        </LocalizationProvider>\n      </Box>\n    </Fragment>\n  );\n};\n\nexport default Fillters;\n","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Tasks/CreateTask.jsx",["341","342","343","344","345","346"],"/** @format */\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport {\n  TextField,\n  Switch,\n  FormControl,\n  Select,\n  MenuItem,\n  InputLabel,\n  FormControlLabel,\n  Box,\n  Grid,\n  Button,\n  Typography,\n} from \"@mui/material\";\n\nimport { LocalizationProvider, DatePicker } from \"@mui/lab\";\nimport AdapterDateFns from \"@mui/lab/AdapterDateFns\";\nimport axios from \"axios\";\nimport SaveIcon from \"@mui/icons-material/Save\";\nimport { useToggle } from \"../../context/useToggle\";\nimport { CONFIG } from \"../../api/MatterApi\";\n\nimport { ActionAlerts, GetDate } from \"../../utils/ActionAlerts\";\n\nconst CreateTask = () => {\n  const [dueDate, setDueDate] = useState(new Date(\"2021-12-01T21:11:54\"));\n  const [bill, setBill] = useToggle(true);\n  const [matterData, setMatterData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [isPrivate, setIsPrivate] = useToggle(true);\n  const [file, setFile] = useState(\"\");\n  const [taskData, setTaskData] = useState({\n    matter_id: 0,\n    matter_contact: 0,\n    matter: \"\",\n    task: \"\",\n    filename: \"\",\n    assign_to: 0,\n    detail: \"\",\n  });\n\n  const {\n    matter_id,\n    matter_contact,\n    matter,\n    task,\n    filename,\n    assign_to,\n    detail,\n  } = taskData;\n\n  const onChange = (e) =>\n    setTaskData({ ...taskData, [e.target.name]: e.target.value });\n  const FetchData = () => {\n    axios\n      .get(`${process.env.REACT_APP_API_URL}/api/matter/`, CONFIG)\n      .then((res) => {\n        setLoading(false);\n        setMatterData(res.data);\n      })\n      .catch((err) => {\n        setLoading(false);\n      });\n  };\n  useEffect(() => {\n    FetchData();\n  }, []);\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    console.log(matter_id, matter_contact, matter, task);\n    let due_at = GetDate(dueDate);\n    let is_billable = bill;\n    let is_private = isPrivate;\n\n    const body = JSON.stringify({\n      matter_id,\n      matter_contact,\n      matter,\n      task,\n      file,\n      is_billable,\n      is_private,\n      due_at,\n      assign_to,\n      detail,\n    });\n    axios\n      .post(`${process.env.REACT_APP_API_URL}/api/new-task/`, body, CONFIG)\n      .then((res) => {\n        <ActionAlerts value={{ status: res.statusText, message: \"Success\" }} />;\n      })\n      .catch((err) => {\n        <ActionAlerts value={{ status: err.statusText, message: \"Failed\" }} />;\n      });\n    console.log(body);\n  };\n  return (\n    <Fragment>\n      <Box\n        component=\"form\"\n        Validate\n        sx={{\n          \"& .MuiTextField-root\": { m: 1 },\n          \"& .MuiSelect-root\": { m: 1 },\n        }}\n        onSubmit={(e) => onSubmit(e)}\n      >\n        <Typography component=\"h3\" variant=\"h4\">\n          Create New Task\n        </Typography>\n        <Grid container spacing={2} p={2}>\n          <Grid item xs={6}>\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"matter_id\"\n              label=\"matter_id\"\n              type=\"number\"\n              min=\"0\"\n              value={matter_id}\n              onChange={(e) => onChange(e)}\n              id=\"matter_id\"\n            />\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"matter\"\n              label=\"matter\"\n              type=\"text\"\n              min=\"0\"\n              value={matter}\n              onChange={(e) => onChange(e)}\n              id=\"matter\"\n            />\n            <TextField\n              fullWidth\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"task\"\n              label=\"Task\"\n              type=\"text\"\n              value={task}\n              onChange={(e) => onChange(e)}\n              id=\"task\"\n              autoComplete=\"task\"\n            />\n            <Box ml={2} mt={1}>\n              <FormControlLabel\n                fullWidth\n                size=\"large\"\n                label=\"Attach File \"\n                labelPlacement=\"start\"\n                control={\n                  <input\n                    type=\"file\"\n                    name=\"filename\"\n                    id=\"file\"\n                    onChange={(e) => onChange(e)}\n                  />\n                }\n              />\n              <TextField\n                size=\"small\"\n                margin=\"normal\"\n                variant=\"outlined\"\n                name=\"file\"\n                label=\"please chose any file\"\n                type=\"text\"\n                min=\"0\"\n                value={filename}\n                onChange={(e) => setFile(filename)}\n                id=\"file\"\n                disabled\n              />\n            </Box>\n          </Grid>\n          <Grid item xs={6}>\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"matter_contact\"\n              label=\"matter_contact\"\n              type=\"number\"\n              min=\"0\"\n              value={matter_contact}\n              onChange={(e) => onChange(e)}\n              id=\"matter_contact\"\n            />\n            <Box p={1}>\n              <FormControlLabel\n                fullWidth\n                size=\"large\"\n                label=\"Billable\"\n                labelPlacement=\"start\"\n                control={\n                  <Switch\n                    size=\"large\"\n                    checked={bill}\n                    onChange={() => setBill(bill)}\n                  />\n                }\n              />\n              <FormControlLabel\n                fullWidth\n                size=\"large\"\n                label=\"Private\"\n                labelPlacement=\"start\"\n                control={\n                  <Switch\n                    size=\"large\"\n                    checked={isPrivate}\n                    onChange={() => setIsPrivate(isPrivate)}\n                  />\n                }\n              />\n            </Box>\n            <LocalizationProvider dateAdapter={AdapterDateFns}>\n              <DatePicker\n                inputFormat=\"yyyy-MM-dd\"\n                mask=\"____-__-__\"\n                label=\"Due Date\"\n                value={dueDate}\n                name=\"dueDate\"\n                id=\"dueDate\"\n                onChange={(e) => setDueDate(e)}\n                renderInput={(params) => (\n                  <TextField fullWidth size=\"small\" {...params} />\n                )}\n              />\n            </LocalizationProvider>\n\n            <TextField\n              fullWidth\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"assign_to\"\n              label=\"Assign to\"\n              type=\"number\"\n              value={assign_to}\n              onChange={(e) => onChange(e)}\n              id=\"assign_to\"\n              autoComplete=\"assign_to\"\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <TextField\n              fullWidth\n              multiline\n              rows={5}\n              size=\"small\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              name=\"detail\"\n              label=\"Detail\"\n              type=\"text\"\n              value={detail}\n              onChange={(e) => onChange(e)}\n              id=\"detail\"\n            />\n\n            <Button\n              variant=\"contained\"\n              type=\"submit\"\n              sx={{ float: \"right\" }}\n              endIcon={<SaveIcon />}\n            >\n              Save\n            </Button>\n          </Grid>\n        </Grid>\n      </Box>\n    </Fragment>\n  );\n};\n\nexport default CreateTask;\n","/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Tasks/ViewTasks.jsx",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/api/MatterApi.js",[],"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/components/Legder/LedgerDoc.jsx",[],{"ruleId":"347","replacedBy":"348"},{"ruleId":"349","replacedBy":"350"},{"ruleId":"351","severity":1,"message":"352","line":8,"column":32,"nodeType":"353","messageId":"354","endLine":8,"endColumn":47},{"ruleId":"351","severity":1,"message":"355","line":11,"column":10,"nodeType":"353","messageId":"354","endLine":11,"endColumn":22},{"ruleId":"351","severity":1,"message":"356","line":19,"column":3,"nodeType":"353","messageId":"354","endLine":19,"endColumn":19},{"ruleId":"351","severity":1,"message":"357","line":23,"column":10,"nodeType":"353","messageId":"354","endLine":23,"endColumn":17},{"ruleId":"351","severity":1,"message":"358","line":27,"column":10,"nodeType":"353","messageId":"354","endLine":27,"endColumn":16},{"ruleId":"351","severity":1,"message":"359","line":5,"column":3,"nodeType":"353","messageId":"354","endLine":5,"endColumn":6},{"ruleId":"351","severity":1,"message":"360","line":14,"column":10,"nodeType":"353","messageId":"354","endLine":14,"endColumn":20},{"ruleId":"351","severity":1,"message":"357","line":18,"column":10,"nodeType":"353","messageId":"354","endLine":18,"endColumn":17},{"ruleId":"351","severity":1,"message":"358","line":24,"column":10,"nodeType":"353","messageId":"354","endLine":24,"endColumn":16},{"ruleId":"351","severity":1,"message":"361","line":10,"column":8,"nodeType":"353","messageId":"354","endLine":10,"endColumn":21},{"ruleId":"351","severity":1,"message":"362","line":18,"column":26,"nodeType":"353","messageId":"354","endLine":18,"endColumn":43},{"ruleId":"351","severity":1,"message":"363","line":19,"column":23,"nodeType":"353","messageId":"354","endLine":19,"endColumn":37},{"ruleId":"351","severity":1,"message":"364","line":20,"column":26,"nodeType":"353","messageId":"354","endLine":20,"endColumn":43},{"ruleId":"351","severity":1,"message":"365","line":13,"column":10,"nodeType":"353","messageId":"354","endLine":13,"endColumn":18},{"ruleId":"351","severity":1,"message":"366","line":20,"column":23,"nodeType":"353","messageId":"354","endLine":20,"endColumn":37},{"ruleId":"351","severity":1,"message":"362","line":23,"column":26,"nodeType":"353","messageId":"354","endLine":23,"endColumn":43},{"ruleId":"351","severity":1,"message":"363","line":24,"column":23,"nodeType":"353","messageId":"354","endLine":24,"endColumn":37},{"ruleId":"351","severity":1,"message":"367","line":5,"column":22,"nodeType":"353","messageId":"354","endLine":5,"endColumn":33},{"ruleId":"351","severity":1,"message":"359","line":4,"column":10,"nodeType":"353","messageId":"354","endLine":4,"endColumn":13},{"ruleId":"351","severity":1,"message":"368","line":15,"column":19,"nodeType":"353","messageId":"354","endLine":15,"endColumn":29},{"ruleId":"369","severity":1,"message":"370","line":51,"column":37,"nodeType":"371","messageId":"372","endLine":51,"endColumn":39},{"ruleId":"351","severity":1,"message":"373","line":22,"column":10,"nodeType":"353","messageId":"354","endLine":22,"endColumn":16},{"ruleId":"351","severity":1,"message":"368","line":59,"column":19,"nodeType":"353","messageId":"354","endLine":59,"endColumn":29},{"ruleId":"369","severity":1,"message":"370","line":283,"column":43,"nodeType":"371","messageId":"372","endLine":283,"endColumn":45},{"ruleId":"351","severity":1,"message":"374","line":52,"column":20,"nodeType":"353","messageId":"354","endLine":52,"endColumn":31},{"ruleId":"351","severity":1,"message":"375","line":30,"column":23,"nodeType":"353","messageId":"354","endLine":30,"endColumn":37},{"ruleId":"351","severity":1,"message":"376","line":104,"column":23,"nodeType":"353","messageId":"354","endLine":104,"endColumn":37},{"ruleId":"351","severity":1,"message":"377","line":3,"column":27,"nodeType":"353","messageId":"354","endLine":3,"endColumn":35},{"ruleId":"351","severity":1,"message":"378","line":28,"column":7,"nodeType":"353","messageId":"354","endLine":28,"endColumn":17},{"ruleId":"351","severity":1,"message":"379","line":35,"column":10,"nodeType":"353","messageId":"354","endLine":35,"endColumn":15},{"ruleId":"351","severity":1,"message":"358","line":36,"column":10,"nodeType":"353","messageId":"354","endLine":36,"endColumn":16},{"ruleId":"351","severity":1,"message":"380","line":3,"column":48,"nodeType":"353","messageId":"354","endLine":3,"endColumn":59},{"ruleId":"351","severity":1,"message":"381","line":20,"column":10,"nodeType":"353","messageId":"354","endLine":20,"endColumn":22},{"ruleId":"351","severity":1,"message":"379","line":33,"column":10,"nodeType":"353","messageId":"354","endLine":33,"endColumn":15},{"ruleId":"351","severity":1,"message":"382","line":33,"column":17,"nodeType":"353","messageId":"354","endLine":33,"endColumn":25},{"ruleId":"351","severity":1,"message":"358","line":34,"column":10,"nodeType":"353","messageId":"354","endLine":34,"endColumn":16},{"ruleId":"351","severity":1,"message":"383","line":16,"column":3,"nodeType":"353","messageId":"354","endLine":16,"endColumn":20},{"ruleId":"351","severity":1,"message":"384","line":58,"column":5,"nodeType":"353","messageId":"354","endLine":58,"endColumn":9},{"ruleId":"351","severity":1,"message":"381","line":19,"column":10,"nodeType":"353","messageId":"354","endLine":19,"endColumn":22},{"ruleId":"351","severity":1,"message":"379","line":25,"column":10,"nodeType":"353","messageId":"354","endLine":25,"endColumn":15},{"ruleId":"351","severity":1,"message":"382","line":25,"column":17,"nodeType":"353","messageId":"354","endLine":25,"endColumn":25},{"ruleId":"351","severity":1,"message":"358","line":26,"column":10,"nodeType":"353","messageId":"354","endLine":26,"endColumn":16},{"ruleId":"351","severity":1,"message":"385","line":6,"column":3,"nodeType":"353","messageId":"354","endLine":6,"endColumn":7},{"ruleId":"351","severity":1,"message":"381","line":18,"column":10,"nodeType":"353","messageId":"354","endLine":18,"endColumn":22},{"ruleId":"351","severity":1,"message":"379","line":24,"column":10,"nodeType":"353","messageId":"354","endLine":24,"endColumn":15},{"ruleId":"351","severity":1,"message":"382","line":24,"column":17,"nodeType":"353","messageId":"354","endLine":24,"endColumn":25},{"ruleId":"351","severity":1,"message":"358","line":25,"column":10,"nodeType":"353","messageId":"354","endLine":25,"endColumn":16},{"ruleId":"351","severity":1,"message":"386","line":6,"column":3,"nodeType":"353","messageId":"354","endLine":6,"endColumn":9},{"ruleId":"351","severity":1,"message":"387","line":13,"column":3,"nodeType":"353","messageId":"354","endLine":13,"endColumn":19},{"ruleId":"351","severity":1,"message":"388","line":6,"column":3,"nodeType":"353","messageId":"354","endLine":6,"endColumn":14},{"ruleId":"351","severity":1,"message":"389","line":7,"column":3,"nodeType":"353","messageId":"354","endLine":7,"endColumn":9},{"ruleId":"351","severity":1,"message":"390","line":8,"column":3,"nodeType":"353","messageId":"354","endLine":8,"endColumn":11},{"ruleId":"351","severity":1,"message":"391","line":9,"column":3,"nodeType":"353","messageId":"354","endLine":9,"endColumn":13},{"ruleId":"351","severity":1,"message":"392","line":29,"column":10,"nodeType":"353","messageId":"354","endLine":29,"endColumn":20},{"ruleId":"351","severity":1,"message":"393","line":30,"column":10,"nodeType":"353","messageId":"354","endLine":30,"endColumn":17},"no-native-reassign",["394"],"no-negated-in-lhs",["395"],"no-unused-vars","'DateRangePicker' is defined but never used.","Identifier","unusedVar","'CreateMatter' is defined but never used.","'containerClasses' is defined but never used.","'GetDate' is defined but never used.","'status' is assigned a value but never used.","'Box' is defined but never used.","'LinkButton' is defined but never used.","'PrivateRoutes' is defined but never used.","'setCalendarToggle' is assigned a value but never used.","'setTasksToggle' is assigned a value but never used.","'setProgressToggle' is assigned a value but never used.","'cardData' is defined but never used.","'setCardsToggle' is assigned a value but never used.","'setProgress' is assigned a value but never used.","'setInvoice' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'styled' is defined but never used.","'setRedirect' is assigned a value but never used.","'setPaymentData' is assigned a value but never used.","'setInvoiceData' is assigned a value but never used.","'useState' is defined but never used.","'catHandler' is assigned a value but never used.","'error' is assigned a value but never used.","'useCallback' is defined but never used.","'ActionAlerts' is defined but never used.","'setError' is assigned a value but never used.","'DialogContentText' is defined but never used.","'file' is assigned a value but never used.","'Grid' is defined but never used.","'Switch' is defined but never used.","'FormControlLabel' is defined but never used.","'FormControl' is defined but never used.","'Select' is defined but never used.","'MenuItem' is defined but never used.","'InputLabel' is defined but never used.","'matterData' is assigned a value but never used.","'loading' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]