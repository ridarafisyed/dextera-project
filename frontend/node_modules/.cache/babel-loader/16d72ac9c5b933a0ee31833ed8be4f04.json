{"ast":null,"code":"var _jsxFileName = \"/home/supersis03/Projects/Dextera/dextera-project/frontend/src/containers/Auth/ResetPasswordConfirm.js\",\n    _s = $RefreshSig$();\n\n/** @format */\nimport React, { useState } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { reset_password_confirm } from \"./../store/actions/auth\";\nimport { Avatar, Button, Paper, Grid, Box, Typography, TextField } from \"@mui/material\";\nimport LockOutlinedIcon from \"@mui/icons-material/LockOutlined\";\nimport BackgroundImage from \"../../asserts/login_light.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ResetPasswordConfirm = ({\n  match,\n  reset_password_confirm\n}) => {\n  _s();\n\n  const [requestSent, setRequestSent] = useState(false);\n  const [formData, setFormData] = useState({\n    new_password: \"\",\n    re_new_password: \"\"\n  });\n  const {\n    new_password,\n    re_new_password\n  } = formData;\n\n  const onChange = e => setFormData({ ...formData,\n    [e.target.name]: e.target.value\n  });\n\n  const onSubmit = e => {\n    e.preventDefault();\n    const uid = match.params.uid;\n    const token = match.params.token;\n    reset_password_confirm(uid, token, new_password, re_new_password);\n    setRequestSent(true);\n  };\n\n  if (requestSent) {\n    return /*#__PURE__*/_jsxDEV(Redirect, {\n      to: \"/\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    component: \"main\",\n    sx: {\n      height: \"87vh\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: false,\n      sm: 4,\n      md: 8,\n      sx: {\n        backgroundImage: `url(${BackgroundImage})`,\n        backgroundRepeat: \"no-repeat\",\n        backgroundColor: t => t.palette.mode === \"light\" ? t.palette.grey[50] : t.palette.grey[900],\n        backgroundSize: \"cover\",\n        backgroundPosition: \"center\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      sm: 8,\n      md: 4,\n      component: Paper,\n      elevation: 6,\n      square: true,\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          my: 8,\n          mx: 4,\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(Avatar, {\n          sx: {\n            m: 1,\n            bgcolor: \"warning.main\"\n          },\n          children: /*#__PURE__*/_jsxDEV(LockOutlinedIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          component: \"h1\",\n          variant: \"h5\",\n          children: \"Set New Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          component: \"form\",\n          Validate: true,\n          sx: {\n            mt: 1\n          },\n          onSubmit: e => onSubmit(e),\n          children: [/*#__PURE__*/_jsxDEV(TextField, {\n            margin: \"normal\",\n            required: true,\n            fullWidth: true,\n            name: \"new_password\",\n            label: \"Password\",\n            type: \"password\",\n            value: new_password,\n            onChange: e => onChange(e),\n            id: \"new_password\",\n            minLength: \"6\",\n            autoComplete: \"new_password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            margin: \"normal\",\n            required: true,\n            fullWidth: true,\n            name: \"re_new_password\",\n            label: \"Confirem Password\",\n            type: \"password\",\n            value: re_new_password,\n            onChange: e => onChange(e),\n            id: \"re_new_password\",\n            minLength: \"6\",\n            autoComplete: \"re_new_password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            fullWidth: true,\n            variant: \"contained\",\n            sx: {\n              mt: 3,\n              mb: 2\n            },\n            children: \"Reset Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ResetPasswordConfirm, \"o4QMI9dLMfup7D3M+KUH2oUZEnE=\");\n\n_c = ResetPasswordConfirm;\nexport default connect(null, {\n  reset_password_confirm\n})(ResetPasswordConfirm);\n\nvar _c;\n\n$RefreshReg$(_c, \"ResetPasswordConfirm\");","map":{"version":3,"sources":["/home/supersis03/Projects/Dextera/dextera-project/frontend/src/containers/Auth/ResetPasswordConfirm.js"],"names":["React","useState","Redirect","connect","reset_password_confirm","Avatar","Button","Paper","Grid","Box","Typography","TextField","LockOutlinedIcon","BackgroundImage","ResetPasswordConfirm","match","requestSent","setRequestSent","formData","setFormData","new_password","re_new_password","onChange","e","target","name","value","onSubmit","preventDefault","uid","params","token","height","backgroundImage","backgroundRepeat","backgroundColor","t","palette","mode","grey","backgroundSize","backgroundPosition","my","mx","display","flexDirection","alignItems","m","bgcolor","mt","mb"],"mappings":"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","sourcesContent":["/** @format */\n\nimport React, { useState } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { reset_password_confirm } from \"./../store/actions/auth\";\n\nimport {\n  Avatar,\n  Button,\n  Paper,\n  Grid,\n  Box,\n  Typography,\n  TextField,\n} from \"@mui/material\";\n\nimport LockOutlinedIcon from \"@mui/icons-material/LockOutlined\";\n\nimport BackgroundImage from \"../../asserts/login_light.png\";\n\nconst ResetPasswordConfirm = ({ match, reset_password_confirm }) => {\n  const [requestSent, setRequestSent] = useState(false);\n  const [formData, setFormData] = useState({\n    new_password: \"\",\n    re_new_password: \"\",\n  });\n\n  const { new_password, re_new_password } = formData;\n\n  const onChange = (e) =>\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n\n    const uid = match.params.uid;\n    const token = match.params.token;\n\n    reset_password_confirm(uid, token, new_password, re_new_password);\n    setRequestSent(true);\n  };\n\n  if (requestSent) {\n    return <Redirect to=\"/\" />;\n  }\n  return (\n    <Grid container component=\"main\" sx={{ height: \"87vh\" }}>\n      <Grid\n        item\n        xs={false}\n        sm={4}\n        md={8}\n        sx={{\n          backgroundImage: `url(${BackgroundImage})`,\n          backgroundRepeat: \"no-repeat\",\n          backgroundColor: (t) =>\n            t.palette.mode === \"light\"\n              ? t.palette.grey[50]\n              : t.palette.grey[900],\n          backgroundSize: \"cover\",\n          backgroundPosition: \"center\",\n        }}\n      />\n      <Grid item xs={12} sm={8} md={4} component={Paper} elevation={6} square>\n        <Box\n          sx={{\n            my: 8,\n            mx: 4,\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\",\n          }}\n        >\n          <Avatar sx={{ m: 1, bgcolor: \"warning.main\" }}>\n            <LockOutlinedIcon />\n          </Avatar>\n          <Typography component=\"h1\" variant=\"h5\">\n            Set New Password\n          </Typography>\n          <Box\n            component=\"form\"\n            Validate\n            sx={{ mt: 1 }}\n            onSubmit={(e) => onSubmit(e)}\n          >\n            <TextField\n              margin=\"normal\"\n              required\n              fullWidth\n              name=\"new_password\"\n              label=\"Password\"\n              type=\"password\"\n              value={new_password}\n              onChange={(e) => onChange(e)}\n              id=\"new_password\"\n              minLength=\"6\"\n              autoComplete=\"new_password\"\n            />\n            <TextField\n              margin=\"normal\"\n              required\n              fullWidth\n              name=\"re_new_password\"\n              label=\"Confirem Password\"\n              type=\"password\"\n              value={re_new_password}\n              onChange={(e) => onChange(e)}\n              id=\"re_new_password\"\n              minLength=\"6\"\n              autoComplete=\"re_new_password\"\n            />\n            <Button\n              type=\"submit\"\n              fullWidth\n              variant=\"contained\"\n              sx={{ mt: 3, mb: 2 }}\n            >\n              Reset Password\n            </Button>\n          </Box>\n        </Box>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default connect(null, { reset_password_confirm })(ResetPasswordConfirm);\n"]},"metadata":{},"sourceType":"module"}