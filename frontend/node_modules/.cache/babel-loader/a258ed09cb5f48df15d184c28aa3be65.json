{"ast":null,"code":"import axios from 'axios';\nimport { LOGIN_SUCCESS, LOGIN_FAIL, USER_LOADED_SUCCESS, USER_LOADED_FAIL, AUTHENTICATED_SUCCESS, AUTHENTICATED_FAIL, PASSWORD_RESET_SUCCESS, PASSWORD_RESET_FAIL, PASSWORD_RESET_CONFIRM_SUCCESS, PASSWORD_RESET_CONFIRM_FAIL, SIGNUP_SUCCESS, SIGNUP_FAIL, ACTIVATION_SUCCESS, ACTIVATION_FAIL, GOOGLE_AUTH_SUCCESS, GOOGLE_AUTH_FAIL, FACEBOOK_AUTH_SUCCESS, FACEBOOK_AUTH_FAIL, LOGOUT, ROLE_FAIL } from './types';\nimport { get_role, create_role } from './role';\nexport const load_user = () => async dispatch => {\n  if (localStorage.getItem('access')) {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${localStorage.getItem('access')}`,\n        'Accept': 'application/json'\n      }\n    };\n\n    try {\n      const res = await axios.get(`${process.env.REACT_APP_API_URL}/auth/users/me/`, config);\n      console.log('res.data load user :', res.data);\n      dispatch({\n        type: USER_LOADED_SUCCESS,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: USER_LOADED_FAIL\n      });\n    }\n  } else {\n    dispatch({\n      type: USER_LOADED_FAIL\n    });\n  }\n};\nexport const checkAuthenticated = () => async dispatch => {\n  if (localStorage.getItem('access')) {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      }\n    };\n    const body = JSON.stringify({\n      token: localStorage.getItem('access')\n    });\n\n    try {\n      const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/jwt/verify/`, body, config);\n\n      if (res.data.code !== 'token_not_valid') {\n        dispatch({\n          type: AUTHENTICATED_SUCCESS\n        });\n      } else {\n        dispatch({\n          type: AUTHENTICATED_FAIL\n        });\n      }\n    } catch (err) {\n      dispatch({\n        type: AUTHENTICATED_FAIL\n      });\n    }\n  } else {\n    dispatch({\n      type: AUTHENTICATED_FAIL\n    });\n  }\n};\nexport const login = (email, password, username) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/jwt/create/`, body, config);\n    console.log(res.data);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(load_user());\n    dispatch(get_role(username));\n  } catch (err) {\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n};\nexport const signup = (email, first_name, last_name, username, password, re_password, is_firm, is_client) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    first_name,\n    last_name,\n    username,\n    password,\n    re_password\n  });\n  const is_lawyer = false;\n\n  try {\n    const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/`, body, config);\n    dispatch({\n      type: SIGNUP_SUCCESS,\n      payload: res.data\n    });\n    dispatch(create_role(username, is_firm, is_lawyer, is_client));\n  } catch (err) {\n    dispatch({\n      type: SIGNUP_FAIL\n    });\n  }\n};\nexport const verify = (uid, token) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    uid,\n    token\n  });\n\n  try {\n    await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/activation/`, body, config);\n    dispatch({\n      type: ACTIVATION_SUCCESS\n    });\n  } catch (err) {\n    dispatch({\n      type: ACTIVATION_FAIL\n    });\n  }\n};\nexport const reset_password = email => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email\n  });\n\n  try {\n    await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/reset_password/`, body, config);\n    dispatch({\n      type: PASSWORD_RESET_SUCCESS\n    });\n  } catch (err) {\n    dispatch({\n      type: PASSWORD_RESET_FAIL\n    });\n  }\n};\nexport const reset_password_confirm = (uid, token, new_password, re_new_password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    uid,\n    token,\n    new_password,\n    re_new_password\n  });\n\n  try {\n    await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/reset_password_confirm/`, body, config);\n    dispatch({\n      type: PASSWORD_RESET_CONFIRM_SUCCESS\n    });\n  } catch (err) {\n    dispatch({\n      type: PASSWORD_RESET_CONFIRM_FAIL\n    });\n  }\n};\nexport const logout = () => dispatch => {\n  dispatch({\n    type: LOGOUT\n  });\n};\nexport const googleAuthenticate = (state, code) => async dispatch => {\n  if (state && code && !localStorage.getItem('access')) {\n    const config = {\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      }\n    };\n    const details = {\n      'state': state,\n      'code': code\n    };\n    const formBody = Object.keys(details).map(key => encodeURIComponent(key) + '=' + encodeURIComponent(details[key])).join('&');\n\n    try {\n      const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/o/google-oauth2/?${formBody}`, config);\n      dispatch({\n        type: GOOGLE_AUTH_SUCCESS,\n        payload: res.data\n      });\n      dispatch(load_user());\n    } catch (err) {\n      dispatch({\n        type: GOOGLE_AUTH_FAIL\n      });\n    }\n  }\n};\nexport const facebookAuthenticate = (state, code) => async dispatch => {\n  if (state && code && !localStorage.getItem('access')) {\n    const config = {\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      }\n    };\n    const details = {\n      'state': state,\n      'code': code\n    };\n    const formBody = Object.keys(details).map(key => encodeURIComponent(key) + '=' + encodeURIComponent(details[key])).join('&');\n\n    try {\n      const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/o/facebook/?${formBody}`, config);\n      dispatch({\n        type: FACEBOOK_AUTH_SUCCESS,\n        payload: res.data\n      });\n      dispatch(load_user());\n    } catch (err) {\n      dispatch({\n        type: FACEBOOK_AUTH_FAIL\n      });\n    }\n  }\n};","map":{"version":3,"sources":["/home/supersis03/Projects/dextera-project/frontend/src/actions/auth.js"],"names":["axios","LOGIN_SUCCESS","LOGIN_FAIL","USER_LOADED_SUCCESS","USER_LOADED_FAIL","AUTHENTICATED_SUCCESS","AUTHENTICATED_FAIL","PASSWORD_RESET_SUCCESS","PASSWORD_RESET_FAIL","PASSWORD_RESET_CONFIRM_SUCCESS","PASSWORD_RESET_CONFIRM_FAIL","SIGNUP_SUCCESS","SIGNUP_FAIL","ACTIVATION_SUCCESS","ACTIVATION_FAIL","GOOGLE_AUTH_SUCCESS","GOOGLE_AUTH_FAIL","FACEBOOK_AUTH_SUCCESS","FACEBOOK_AUTH_FAIL","LOGOUT","ROLE_FAIL","get_role","create_role","load_user","dispatch","localStorage","getItem","config","headers","res","get","process","env","REACT_APP_API_URL","console","log","data","type","payload","err","checkAuthenticated","body","JSON","stringify","token","post","code","login","email","password","username","signup","first_name","last_name","re_password","is_firm","is_client","is_lawyer","verify","uid","reset_password","reset_password_confirm","new_password","re_new_password","logout","googleAuthenticate","state","details","formBody","Object","keys","map","key","encodeURIComponent","join","facebookAuthenticate"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport {\n    LOGIN_SUCCESS,\n    LOGIN_FAIL,\n    USER_LOADED_SUCCESS,\n    USER_LOADED_FAIL,\n    AUTHENTICATED_SUCCESS,\n    AUTHENTICATED_FAIL,\n    PASSWORD_RESET_SUCCESS,\n    PASSWORD_RESET_FAIL,\n    PASSWORD_RESET_CONFIRM_SUCCESS,\n    PASSWORD_RESET_CONFIRM_FAIL,\n    SIGNUP_SUCCESS,\n    SIGNUP_FAIL,\n    ACTIVATION_SUCCESS,\n    ACTIVATION_FAIL,\n    GOOGLE_AUTH_SUCCESS,\n    GOOGLE_AUTH_FAIL,\n    FACEBOOK_AUTH_SUCCESS,\n    FACEBOOK_AUTH_FAIL,\n    LOGOUT,\n    ROLE_FAIL,\n} from './types';\nimport {get_role, create_role} from './role'\n\nexport const load_user = () => async dispatch => {\n    if (localStorage.getItem('access')) {\n        const config = {\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${localStorage.getItem('access')}`,\n                'Accept': 'application/json'\n            }\n        }; \n\n        try {\n            const res = await axios.get(`${process.env.REACT_APP_API_URL}/auth/users/me/`, config);\n            console.log('res.data load user :', res.data)\n            dispatch({\n                type: USER_LOADED_SUCCESS,\n                payload: res.data\n            });\n            \n        } catch (err) {\n            dispatch({\n                type: USER_LOADED_FAIL\n            });\n        }\n    } else {\n        dispatch({\n            type: USER_LOADED_FAIL\n        });\n    }\n};\n\nexport const checkAuthenticated = () => async dispatch => {\n    if (localStorage.getItem('access')) {\n        const config = {\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            }\n        }; \n\n        const body = JSON.stringify({ token: localStorage.getItem('access') });\n\n        try {\n            const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/jwt/verify/`, body, config)\n\n            if (res.data.code !== 'token_not_valid') {\n                dispatch({\n                    type: AUTHENTICATED_SUCCESS\n                });\n            } else {\n                dispatch({\n                    type: AUTHENTICATED_FAIL\n                });\n            }\n        } catch (err) {\n            dispatch({\n                type: AUTHENTICATED_FAIL\n            });\n        }\n\n    } else {\n        dispatch({\n            type: AUTHENTICATED_FAIL\n        });\n    }\n};\n\nexport const login = ( email, password, username) => async dispatch => {\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    };\n\n    const body = JSON.stringify({ email, password });\n\n    try {\n        const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/jwt/create/`, body, config);\n        console.log(res.data)\n\n        dispatch({\n            type: LOGIN_SUCCESS,\n            payload: res.data\n        });\n        dispatch(load_user());\n        dispatch(get_role(username));\n    } catch (err) {\n        dispatch({\n            type: LOGIN_FAIL\n        })\n    }\n};\n\n\n\nexport const signup = ( email, first_name, last_name, username, password, re_password, is_firm, is_client) => async dispatch => {\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    };\n\n    const body = JSON.stringify({ email, first_name, last_name, username, password, re_password});\n    const is_lawyer = false\n    \n    try {\n        const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/`, body, config);\n        dispatch({\n            type: SIGNUP_SUCCESS,\n            payload: res.data \n        });\n        dispatch(create_role(username, is_firm, is_lawyer, is_client));\n\n    } catch (err) {\n        dispatch({\n            type: SIGNUP_FAIL\n        })\n    }\n};\n\nexport const verify = (uid, token) => async dispatch => {\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    };\n\n    const body = JSON.stringify({ uid, token });\n\n    try {\n        await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/activation/`, body, config);\n\n        dispatch({\n            type: ACTIVATION_SUCCESS,\n        });\n    } catch (err) {\n        dispatch({\n            type: ACTIVATION_FAIL\n        })\n    }\n};\n\nexport const reset_password = (email) => async dispatch => {\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    };\n\n    const body = JSON.stringify({ email });\n\n    try {\n        await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/reset_password/`, body, config);\n\n        dispatch({\n            type: PASSWORD_RESET_SUCCESS\n        });\n    } catch (err) {\n        dispatch({\n            type: PASSWORD_RESET_FAIL\n        });\n    }\n};\n\nexport const reset_password_confirm = (uid, token, new_password, re_new_password) => async dispatch => {\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    };\n\n    const body = JSON.stringify({ uid, token, new_password, re_new_password });\n\n    try {\n        await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/reset_password_confirm/`, body, config);\n\n        dispatch({\n            type: PASSWORD_RESET_CONFIRM_SUCCESS\n        });\n    } catch (err) {\n        dispatch({\n            type: PASSWORD_RESET_CONFIRM_FAIL\n        });\n    }\n};\n\nexport const logout = () => dispatch => {\n    dispatch({\n        type: LOGOUT\n    });\n};\n\n\n\nexport const googleAuthenticate = (state, code) => async dispatch => {\n    if (state && code && !localStorage.getItem('access')) {\n        const config = {\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded'\n            }\n        };\n\n        const details = {\n            'state': state,\n            'code': code\n        };\n\n        const formBody = Object.keys(details).map(key => encodeURIComponent(key) + '=' + encodeURIComponent(details[key])).join('&');\n\n        try {\n            const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/o/google-oauth2/?${formBody}`, config);\n\n            dispatch({\n                type: GOOGLE_AUTH_SUCCESS,\n                payload: res.data\n            });\n\n            dispatch(load_user());\n        } catch (err) {\n            dispatch({\n                type: GOOGLE_AUTH_FAIL\n            });\n        }\n    }\n};\n\nexport const facebookAuthenticate = (state, code) => async dispatch => {\n    if (state && code && !localStorage.getItem('access')) {\n        const config = {\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded'\n            }\n        };\n\n        const details = {\n            'state': state,\n            'code': code\n        };\n\n        const formBody = Object.keys(details).map(key => encodeURIComponent(key) + '=' + encodeURIComponent(details[key])).join('&');\n\n        try {\n            const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/o/facebook/?${formBody}`, config);\n\n            dispatch({\n                type: FACEBOOK_AUTH_SUCCESS,\n                payload: res.data\n            });\n\n            dispatch(load_user());\n        } catch (err) {\n            dispatch({\n                type: FACEBOOK_AUTH_FAIL\n            });\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"module"}